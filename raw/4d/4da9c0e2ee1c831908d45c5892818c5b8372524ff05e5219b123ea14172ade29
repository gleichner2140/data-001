%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1411.i043.007.S.m004.c11.medical flat banners.eps
%%Creator: Adobe Illustrator(R) 18.0
%%For: IvAN
%%CreationDate: 11/7/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.0.0 x18 R agm 4.7713 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c011 79.156289, 2014/03/31-23:39:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">blank template 450x450 RGB</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2014-11-07T23:28:16+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2014-11-07T23:28:16+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2014-11-07T23:28:16+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6jp1hLf3iWsTKjvWjOaD&#xA;YVzeZJiIsvE4MJyTER1UJEMcjI1CUJUkEEVBpsRsckDbXIUaW4WLsVdirsVdirsVdiqySVUG/XsM&#xA;UodriQ9NhgtaaE8o71xtVaO4DGjbH8MbVWwodirsVXJHJIwSNS7Hoqgk/cMBLKMSTQblhmibjKjR&#xA;t4MCD+OINrKBjzFLMLF2KuxVoso6kDBaaNW0JIz0YYVXYodirsVdirsVVrS0ubudYLeMySv9lRkZ&#xA;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&#xA;JO5JPc4JSMjZTjxiAoP/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:119931d3-4b46-6047-b83d-d9011ee3b833</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:119931d3-4b46-6047-b83d-d9011ee3b833</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:642445ee-aba9-5543-9f43-a1f762b2542a</stRef:instanceID>
            <stRef:documentID>xmp.did:642445ee-aba9-5543-9f43-a1f762b2542a</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:12576227-8530-4a49-b732-a0deff84df38</stEvt:instanceID>
                  <stEvt:when>2014-09-16T20:10:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:642445ee-aba9-5543-9f43-a1f762b2542a</stEvt:instanceID>
                  <stEvt:when>2014-11-06T10:21:37+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:119931d3-4b46-6047-b83d-d9011ee3b833</stEvt:instanceID>
                  <stEvt:when>2014-11-07T23:28:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 300 li
450 300 li
450 450 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.811765 .992157 1 rgb
f
170.201 388.196 mo
147.312 388.196 128.756 369.641 128.756 346.751 cv
128.756 323.862 147.312 305.306 170.201 305.306 cv
193.09 305.306 211.646 323.862 211.646 346.751 cv
211.646 369.641 193.09 388.196 170.201 388.196 cv
174.211 351.355 mo
197.741 374.885 li
198.047 375.191 198.448 375.344 198.849 375.344 cv
199.25 375.344 199.651 375.191 199.957 374.885 cv
200.569 374.273 200.569 373.281 199.957 372.67 cv
176.427 349.14 li
177.5 348.066 li
181.641 343.926 li
184.054 340.074 li
189.334 334.794 li
190.536 335.845 192.037 336.371 193.537 336.371 cv
195.167 336.371 196.797 335.75 198.041 334.505 cv
200.534 332.013 200.534 327.972 198.041 325.479 cv
196.795 324.233 195.162 323.61 193.528 323.61 cv
191.895 323.61 190.262 324.233 189.015 325.479 cv
186.625 327.869 186.533 331.679 188.727 334.186 cv
183.447 339.467 li
179.595 341.88 li
175.455 346.02 li
174.381 347.094 li
172.441 345.154 li
167.957 340.67 li
154.444 328.688 li
154.289 328.551 154.114 328.439 153.924 328.355 cv
150.552 326.875 li
150.372 326.796 150.248 326.626 150.228 326.43 cv
149.906 323.215 li
150.07 323.106 li
150.287 322.889 150.287 322.538 150.07 322.321 cv
149.962 322.213 149.82 322.159 149.678 322.159 cv
149.536 322.159 149.394 322.213 149.285 322.321 cv
149.068 322.538 149.068 322.889 149.285 323.106 cv
149.501 323.234 li
149.58 326.497 li
149.594 327.051 149.926 327.547 150.434 327.769 cv
153.099 328.94 li
153.398 329.071 153.664 329.265 153.881 329.509 cv
165.741 342.885 li
170.226 347.37 li
172.165 349.31 li
150.051 371.424 li
149.486 371.989 149.486 372.905 150.051 373.469 cv
150.334 373.752 150.704 373.893 151.074 373.893 cv
151.444 373.893 151.814 373.752 152.097 373.469 cv
174.211 351.355 li
.713725 .921569 .929412 rgb
f
255.654 419.439 mo
234.937 419.439 218.142 402.644 218.142 381.927 cv
218.142 361.21 234.937 344.416 255.654 344.416 cv
276.371 344.416 293.165 361.21 293.165 381.927 cv
293.165 402.644 276.371 419.439 255.654 419.439 cv
259.595 393.201 mo
261.566 393.201 263.691 394.244 264.711 399.068 cv
265.368 402.177 265.397 405.074 265.577 407.388 cv
265.721 409.243 265.334 412.187 267.17 412.187 cv
269.989 412.187 273.173 405.754 275.041 399.903 cv
276.716 394.662 282.337 380.001 283.401 374.881 cv
284.715 368.553 282.969 364.567 281.273 362.337 cv
279.21 359.626 276.005 357.989 272.49 357.709 cv
271.488 357.629 270.576 357.597 269.717 357.597 cv
266.344 357.597 263.763 358.086 259.595 358.086 cv
255.426 358.086 252.845 357.597 249.473 357.597 cv
248.613 357.597 247.702 357.629 246.7 357.709 cv
243.184 357.989 239.979 359.626 237.916 362.337 cv
236.221 364.567 234.474 368.553 235.788 374.881 cv
236.852 380.001 242.474 394.662 244.148 399.903 cv
246.017 405.754 249.2 412.187 252.02 412.187 cv
253.855 412.187 253.468 409.243 253.613 407.388 cv
253.793 405.074 253.821 402.177 254.478 399.068 cv
255.498 394.244 257.623 393.201 259.595 393.201 cv
f
326.821 366.261 mo
310.492 366.261 297.256 353.025 297.256 336.696 cv
297.256 320.368 310.492 307.132 326.821 307.132 cv
343.149 307.132 356.385 320.368 356.385 336.696 cv
356.385 353.025 343.149 366.261 326.821 366.261 cv
334.5 315.953 mo
334.21 315.953 333.945 316.149 333.87 316.443 cv
332.999 319.858 li
332.91 320.207 333.121 320.561 333.469 320.65 cv
333.969 320.777 li
332.906 323.813 332.082 326.125 330.951 328.366 cv
330.783 328.698 330.608 329.029 330.425 329.36 cv
330.279 329.625 li
330.041 330.045 329.79 330.467 329.519 330.895 cv
329.448 331.003 li
329.2 331.391 328.933 331.787 328.651 332.189 cv
328.579 332.292 328.505 332.396 328.431 332.499 cv
328.162 332.875 327.878 333.258 327.576 333.652 cv
326.299 335.314 324.712 337.155 322.63 339.378 cv
310.337 351.671 li
316.459 357.793 li
328.752 345.5 li
331.228 343.024 332.943 340.587 334.17 338.195 cv
334.174 338.197 li
334.274 337.982 li
334.502 337.528 334.713 337.076 334.907 336.625 cv
334.963 336.494 335.019 336.363 335.073 336.232 cv
335.26 335.778 335.432 335.325 335.589 334.874 cv
335.684 334.61 li
335.868 334.064 336.034 333.521 336.181 332.98 cv
336.218 332.833 li
336.346 332.353 336.461 331.876 336.565 331.401 cv
336.603 331.245 li
336.599 331.242 li
337.128 328.779 337.38 326.375 337.657 324.041 cv
337.861 323.215 338.4 322.51 339.144 322.097 cv
340.505 321.43 li
340.625 320.961 li
341.119 321.087 li
341.394 320.007 li
341.215 320.709 li
344.767 321.267 li
344.797 321.503 344.966 321.708 345.21 321.771 cv
345.26 321.784 345.31 321.79 345.359 321.79 cv
345.625 321.79 345.869 321.61 345.937 321.339 cv
346.019 321.019 345.826 320.694 345.506 320.612 cv
345.457 320.599 345.408 320.594 345.359 320.594 cv
345.167 320.594 344.987 320.688 344.875 320.843 cv
341.49 319.631 li
341.586 319.253 li
341.093 319.127 li
341.212 318.658 li
340.336 317.421 li
334.661 315.973 li
334.607 315.96 334.553 315.953 334.5 315.953 cv
f
392.878 436.172 mo
367.851 436.172 347.563 415.884 347.563 390.857 cv
347.563 365.83 367.851 345.542 392.878 345.542 cv
417.905 345.542 438.193 365.83 438.193 390.857 cv
438.193 415.884 417.905 436.172 392.878 436.172 cv
384.431 378.297 mo
380.344 378.297 374.003 379.551 368.179 380.002 cv
362.362 380.451 360.116 380.117 359.72 380.804 cv
359.445 381.278 360.192 384.699 363.301 390.772 cv
366.816 397.639 376.143 411.418 397.895 411.418 cv
419.647 411.418 428.973 397.639 432.489 390.772 cv
435.597 384.699 436.344 381.278 436.07 380.804 cv
435.674 380.117 433.428 380.451 427.611 380.002 cv
421.787 379.551 415.446 378.297 411.359 378.297 cv
410.757 378.297 410.205 378.324 409.71 378.385 cv
405.912 378.852 401.594 381.806 397.895 381.806 cv
394.196 381.806 389.878 378.852 386.079 378.385 cv
385.585 378.324 385.032 378.297 384.431 378.297 cv
f
144.21 390.857 mo
144.21 395.789 140.212 399.787 135.281 399.787 cv
130.349 399.787 126.351 395.789 126.351 390.857 cv
126.351 385.925 130.349 381.927 135.281 381.927 cv
140.212 381.927 144.21 385.925 144.21 390.857 cv
cp
.427451 .823529 .901961 rgb
f
299.375 442.614 mo
294.444 442.614 290.446 438.616 290.446 433.684 cv
290.446 428.752 294.444 424.754 299.375 424.754 cv
304.307 424.754 308.305 428.752 308.305 433.684 cv
308.305 438.616 304.307 442.614 299.375 442.614 cv
.713725 .921569 .929412 rgb
f
381.34 327.767 mo
381.34 332.698 377.342 336.696 372.41 336.696 cv
367.479 336.696 363.481 332.698 363.481 327.767 cv
363.481 322.835 367.479 318.837 372.41 318.837 cv
377.342 318.837 381.34 322.835 381.34 327.767 cv
cp
.427451 .823529 .901961 rgb
f
18.1506 326.625 mo
13.218 326.625 9.22086 322.627 9.22086 317.696 cv
9.22086 312.764 13.218 308.766 18.1506 308.766 cv
23.0813 308.766 27.0803 312.764 27.0803 317.696 cv
27.0803 322.627 23.0813 326.625 18.1506 326.625 cv
.32549 .607843 .682353 rgb
f
272.833 329.087 mo
266.269 329.087 260.948 323.765 260.948 317.202 cv
260.948 310.638 266.269 305.317 272.833 305.317 cv
279.396 305.317 284.717 310.638 284.717 317.202 cv
284.717 323.765 279.396 329.087 272.833 329.087 cv
.682353 .898039 .909804 rgb
f
320.718 414.108 mo
315.793 414.108 311.8 410.115 311.8 405.19 cv
311.8 400.264 315.793 396.271 320.718 396.271 cv
325.644 396.271 329.637 400.264 329.637 405.19 cv
329.637 410.115 325.644 414.108 320.718 414.108 cv
.32549 .607843 .682353 rgb
f
130.557 435.071 mo
127.778 435.071 125.526 432.82 125.526 430.041 cv
125.526 427.264 127.778 425.012 130.557 425.012 cv
133.334 425.012 135.586 427.264 135.586 430.041 cv
135.586 432.82 133.334 435.071 130.557 435.071 cv
.67451 .819608 .823529 rgb
f
171.538 418.651 mo
168.76 418.651 166.509 416.399 166.509 413.62 cv
166.509 410.843 168.76 408.591 171.538 408.591 cv
174.317 408.591 176.568 410.843 176.568 413.62 cv
176.568 416.399 174.317 418.651 171.538 418.651 cv
.32549 .607843 .682353 rgb
f
435.721 332.076 mo
432.943 332.076 430.691 329.824 430.691 327.045 cv
430.691 324.267 432.943 322.016 435.721 322.016 cv
438.499 322.016 440.751 324.267 440.751 327.045 cv
440.751 329.824 438.499 332.076 435.721 332.076 cv
.67451 .819608 .823529 rgb
f
440.654 435.473 mo
440.654 438.474 438.224 440.905 435.222 440.905 cv
432.221 440.905 429.79 438.474 429.79 435.473 cv
429.79 432.472 432.221 430.041 435.222 430.041 cv
438.224 430.041 440.654 432.472 440.654 435.473 cv
cp
.427451 .823529 .901961 rgb
f
398.359 313.718 mo
396.69 313.718 395.338 312.366 395.338 310.697 cv
395.338 309.029 396.69 307.676 398.359 307.676 cv
400.028 307.676 401.38 309.029 401.38 310.697 cv
401.38 312.366 400.028 313.718 398.359 313.718 cv
.32549 .607843 .682353 rgb
f
116.097 320.906 mo
114.428 320.906 113.076 319.554 113.076 317.884 cv
113.076 316.216 114.428 314.864 116.097 314.864 cv
117.766 314.864 119.118 316.216 119.118 317.884 cv
119.118 319.554 117.766 320.906 116.097 320.906 cv
f
316.153 384.955 mo
314.484 384.955 313.132 383.603 313.132 381.934 cv
313.132 380.265 314.484 378.914 316.153 378.914 cv
317.821 378.914 319.174 380.265 319.174 381.934 cv
319.174 383.603 317.821 384.955 316.153 384.955 cv
f
231.38 324.461 mo
231.38 328.897 227.785 332.492 223.35 332.492 cv
218.915 332.492 215.32 328.897 215.32 324.461 cv
215.32 320.026 218.915 316.432 223.35 316.432 cv
227.785 316.432 231.38 320.026 231.38 324.461 cv
cp
.427451 .823529 .901961 rgb
f
29.4091 437.069 mo
29.4091 439.98 27.0501 442.338 24.1398 442.338 cv
21.2296 442.338 18.8708 439.98 18.8708 437.069 cv
18.8708 434.159 21.2296 431.8 24.1398 431.8 cv
27.0501 431.8 29.4091 434.159 29.4091 437.069 cv
cp
f
193.922 438.505 mo
195.057 438.505 li
196.598 438.505 198.152 437.833 198.152 434.597 cv
198.152 431.277 196.527 430.815 194.958 430.815 cv
193.922 430.815 li
193.922 438.505 li
cp
194.706 429.835 mo
197.115 429.835 199.455 430.604 199.455 434.597 cv
199.455 438.547 197.018 439.472 194.958 439.472 cv
192.717 439.472 li
192.717 429.835 li
194.706 429.835 li
cp
.00392157 .352941 .470588 rgb
f
202.895 430.815 mo
202.895 434.065 li
206.188 434.065 li
206.188 435.045 li
202.895 435.045 li
202.895 438.491 li
206.93 438.491 li
206.93 439.472 li
201.69 439.472 li
201.69 429.835 li
206.832 429.835 li
206.691 430.815 li
202.895 430.815 li
cp
f
214.14 439.472 mo
210.077 431.165 li
210.147 431.935 210.245 433.042 210.245 434.821 cv
210.245 439.472 li
209.11 439.472 li
209.11 429.835 li
210.693 429.835 li
214.784 438.155 li
214.756 437.889 214.63 436.418 214.63 435.228 cv
214.63 429.835 li
215.765 429.835 li
215.765 439.472 li
214.14 439.472 li
cp
f
221.391 430.871 mo
221.391 439.472 li
220.186 439.472 li
220.186 430.871 li
217.412 430.871 li
217.412 429.835 li
224.234 429.835 li
224.094 430.871 li
221.391 430.871 li
cp
f
225.813 439.472 mo
225.813 429.835 li
227.031 429.835 li
227.031 439.472 li
225.813 439.472 li
cp
f
235.168 430.773 mo
234.481 431.543 li
233.781 430.927 233.109 430.675 232.297 430.675 cv
231.274 430.675 230.504 431.165 230.504 432.103 cv
230.504 432.958 230.91 433.364 232.646 433.897 cv
234.229 434.373 235.477 434.989 235.477 436.796 cv
235.477 438.478 234.216 439.64 232.101 439.64 cv
230.727 439.64 229.663 439.178 228.865 438.407 cv
229.579 437.623 li
230.237 438.253 231.022 438.631 232.087 438.631 cv
233.264 438.631 234.216 438.029 234.216 436.838 cv
234.216 435.844 233.739 435.409 232.087 434.905 cv
230.195 434.331 229.257 433.616 229.257 432.146 cv
229.257 430.703 230.49 429.666 232.24 429.666 cv
233.558 429.666 234.384 430.059 235.168 430.773 cv
cp
f
240.137 430.871 mo
240.137 439.472 li
238.932 439.472 li
238.932 430.871 li
236.158 430.871 li
236.158 429.835 li
242.98 429.835 li
242.84 430.871 li
240.137 430.871 li
cp
f
247.179 434.387 mo
248.565 434.387 249.363 433.868 249.363 432.538 cv
249.363 431.319 248.663 430.787 247.024 430.787 cv
245.764 430.787 li
245.764 434.387 li
247.179 434.387 li
cp
245.764 435.325 mo
245.764 439.472 li
244.559 439.472 li
244.559 429.835 li
247.038 429.835 li
249.42 429.835 250.652 430.759 250.652 432.538 cv
250.652 433.911 249.924 434.709 248.551 435.115 cv
251.156 439.472 li
249.714 439.472 li
247.36 435.325 li
245.764 435.325 li
cp
f
255.537 439.472 mo
254.304 439.472 li
254.304 435.76 li
251.208 429.835 li
252.553 429.835 li
254.963 434.695 li
257.357 429.835 li
258.633 429.835 li
255.537 435.746 li
255.537 439.472 li
cp
f
397.895 411.418 mo
376.143 411.418 366.816 397.639 363.301 390.772 cv
360.192 384.699 359.445 381.278 359.72 380.804 cv
360.116 380.117 362.362 380.451 368.179 380.002 cv
374.003 379.551 380.344 378.297 384.431 378.297 cv
385.032 378.297 385.585 378.324 386.079 378.385 cv
389.878 378.852 394.196 381.806 397.895 381.806 cv
401.594 381.806 405.912 378.852 409.71 378.385 cv
410.205 378.324 410.757 378.297 411.359 378.297 cv
415.446 378.297 421.787 379.551 427.611 380.002 cv
433.428 380.451 435.674 380.117 436.07 380.804 cv
436.344 381.278 435.597 384.699 432.489 390.772 cv
428.973 397.639 419.647 411.418 397.895 411.418 cv
.505882 .768627 .784314 rgb
f
430.551 376.407 mo
430.551 376.407 422.774 400.941 392.977 400.941 cv
362.481 400.941 355.404 376.407 355.404 376.407 cv
355.404 376.407 366.548 383.774 392.977 383.774 cv
419.406 383.774 430.551 376.407 430.551 376.407 cv
cp
.380392 .152941 .0745098 rgb
f
418.778 380.256 mo
418.5 379.978 392.977 382.3 392.977 382.3 cv
392.977 382.3 367.455 379.978 367.177 380.256 cv
366.899 380.533 367.177 384.682 367.177 384.682 cv
367.177 384.682 374.125 390.444 380.601 391.962 cv
386.186 393.27 392.977 392.966 392.977 392.966 cv
392.977 392.966 399.768 393.27 405.354 391.962 cv
411.83 390.444 418.778 384.682 418.778 384.682 cv
418.778 384.682 419.056 380.533 418.778 380.256 cv
cp
.839216 .407843 .419608 rgb
f
404.614 395.372 mo
403.789 395.372 403.616 395.093 403.616 394.859 cv
403.616 394.811 403.655 390.173 403.746 388.903 cv
403.909 386.617 405.029 384.924 406.598 384.589 cv
406.806 384.544 407.022 384.522 407.238 384.522 cv
408.642 384.522 409.89 385.419 410.273 386.704 cv
410.778 388.399 410.881 391.715 410.881 392.509 cv
410.881 393.383 410.061 394.008 408.05 394.666 cv
406.681 395.115 405.428 395.372 404.614 395.372 cv
cp
.807843 .737255 .698039 rgb
f
403.776 394.859 mo
403.776 394.859 403.814 390.194 403.906 388.915 cv
404.046 386.951 404.988 385.096 406.632 384.746 cv
408.082 384.436 409.682 385.283 410.119 386.75 cv
410.63 388.464 410.721 391.868 410.721 392.509 cv
410.721 393.151 410.229 393.784 408 394.514 cv
405.67 395.277 403.776 395.448 403.776 394.859 cv
cp
1 1 1 rgb
f
411.383 392.966 mo
410.763 392.966 410.696 392.635 410.696 392.493 cv
410.697 392.323 410.724 388.341 411.113 386.817 cv
411.542 385.14 412.451 384.018 413.547 383.815 cv
413.715 383.784 413.88 383.768 414.036 383.768 cv
415.052 383.768 415.743 384.413 415.982 385.582 cv
416.285 387.061 416.392 389.506 416.392 389.997 cv
416.392 390.684 415.975 391.092 414.363 391.982 cv
413.331 392.552 412.077 392.966 411.383 392.966 cv
cp
.807843 .737255 .698039 rgb
f
410.857 392.493 mo
410.857 392.493 410.879 388.38 411.269 386.857 cv
411.718 385.098 412.638 384.147 413.576 383.973 cv
414.636 383.777 415.539 384.218 415.825 385.614 cv
416.113 387.017 416.232 389.417 416.232 389.997 cv
416.232 390.578 415.902 390.949 414.286 391.841 cv
412.862 392.628 410.857 393.182 410.857 392.493 cv
cp
1 1 1 rgb
f
416.641 390.301 mo
416.327 390.301 416.132 390.121 416.132 389.83 cv
416.13 389.691 416.085 386.365 416.125 385.427 cv
416.178 384.18 416.422 383.404 416.892 382.985 cv
417.049 382.846 417.219 382.775 417.399 382.775 cv
417.863 382.775 418.294 383.247 418.55 384.037 cv
418.871 385.025 418.938 387.448 418.938 387.884 cv
418.938 388.401 418.826 389.02 417.996 389.696 cv
417.552 390.058 417.008 390.301 416.641 390.301 cv
cp
.807843 .737255 .698039 rgb
f
416.292 389.83 mo
416.292 389.83 416.245 386.378 416.285 385.434 cv
416.335 384.264 416.557 383.498 416.999 383.105 cv
417.508 382.652 418.093 383.149 418.398 384.086 cv
418.708 385.042 418.778 387.411 418.778 387.884 cv
418.778 388.358 418.678 388.933 417.895 389.572 cv
417.222 390.12 416.292 390.393 416.292 389.83 cv
cp
1 1 1 rgb
f
381.34 395.372 mo
382.166 395.372 382.339 395.093 382.339 394.859 cv
382.339 394.811 382.3 390.173 382.209 388.903 cv
382.046 386.617 380.926 384.924 379.357 384.589 cv
379.148 384.544 378.933 384.522 378.716 384.522 cv
377.313 384.522 376.065 385.419 375.682 386.704 cv
375.177 388.399 375.074 391.715 375.074 392.509 cv
375.074 393.383 375.894 394.008 377.905 394.666 cv
379.274 395.115 380.527 395.372 381.34 395.372 cv
cp
.807843 .737255 .698039 rgb
f
382.179 394.859 mo
382.179 394.859 382.141 390.194 382.049 388.915 cv
381.909 386.951 380.967 385.096 379.323 384.746 cv
377.873 384.436 376.273 385.283 375.835 386.75 cv
375.325 388.464 375.234 391.868 375.234 392.509 cv
375.234 393.151 375.726 393.784 377.955 394.514 cv
380.285 395.277 382.179 395.448 382.179 394.859 cv
cp
1 1 1 rgb
f
374.572 392.966 mo
375.192 392.966 375.258 392.635 375.258 392.493 cv
375.258 392.323 375.231 388.341 374.842 386.817 cv
374.413 385.14 373.503 384.018 372.408 383.815 cv
372.24 383.784 372.075 383.768 371.919 383.768 cv
370.903 383.768 370.212 384.413 369.973 385.582 cv
369.67 387.061 369.563 389.506 369.563 389.997 cv
369.563 390.684 369.98 391.092 371.591 391.982 cv
372.624 392.552 373.878 392.966 374.572 392.966 cv
cp
.807843 .737255 .698039 rgb
f
375.098 392.493 mo
375.098 392.493 375.076 388.38 374.686 386.857 cv
374.237 385.098 373.317 384.147 372.379 383.973 cv
371.319 383.777 370.416 384.218 370.13 385.614 cv
369.842 387.017 369.723 389.417 369.723 389.997 cv
369.723 390.578 370.053 390.949 371.669 391.841 cv
373.093 392.628 375.098 393.182 375.098 392.493 cv
cp
1 1 1 rgb
f
369.314 390.301 mo
369.628 390.301 369.823 390.121 369.823 389.83 cv
369.825 389.691 369.87 386.365 369.83 385.427 cv
369.777 384.18 369.533 383.404 369.063 382.985 cv
368.906 382.846 368.735 382.775 368.556 382.775 cv
368.092 382.775 367.661 383.247 367.405 384.037 cv
367.084 385.025 367.017 387.448 367.017 387.884 cv
367.017 388.401 367.128 389.02 367.959 389.696 cv
368.402 390.058 368.947 390.301 369.314 390.301 cv
cp
.807843 .737255 .698039 rgb
f
369.663 389.83 mo
369.663 389.83 369.71 386.378 369.67 385.434 cv
369.62 384.264 369.398 383.498 368.956 383.105 cv
368.447 382.652 367.861 383.149 367.557 384.086 cv
367.247 385.042 367.177 387.411 367.177 387.884 cv
367.177 388.358 367.276 388.933 368.06 389.572 cv
368.733 390.12 369.663 390.393 369.663 389.83 cv
cp
1 1 1 rgb
f
399.096 396.186 mo
398.009 396.186 396.75 396.164 395.83 396.148 cv
395.277 396.138 394.835 396.131 394.605 396.131 cv
393.614 396.131 392.921 395.405 392.921 394.367 cv
392.92 394.089 li
392.91 392.975 392.886 390.366 393.652 388.22 cv
394.337 386.303 395.414 384.345 398.213 384.345 cv
401.16 384.345 401.947 385.745 402.709 387.099 cv
403.307 388.162 403.801 392.395 403.801 394.106 cv
403.801 395.786 402.447 395.963 401.552 396.08 cv
401.31 396.112 li
400.972 396.162 400.248 396.186 399.096 396.186 cv
cp
.807843 .737255 .698039 rgb
f
398.213 384.505 mo
395.728 384.505 394.605 386.029 393.803 388.273 cv
392.973 390.598 393.082 393.485 393.082 394.367 cv
393.082 395.249 393.643 395.97 394.605 395.97 cv
395.567 395.97 400.255 396.105 401.287 395.954 cv
402.195 395.82 403.641 395.79 403.641 394.106 cv
403.641 392.423 403.153 388.215 402.569 387.178 cv
401.727 385.681 400.966 384.505 398.213 384.505 cv
cp
1 1 1 rgb
f
386.859 396.186 mo
385.707 396.186 384.983 396.162 384.645 396.112 cv
384.403 396.08 li
383.507 395.963 382.154 395.786 382.154 394.106 cv
382.154 392.395 382.648 388.162 383.246 387.099 cv
384.008 385.745 384.795 384.345 387.742 384.345 cv
390.542 384.345 391.618 386.303 392.303 388.22 cv
393.069 390.366 393.046 392.975 393.035 394.089 cv
393.034 394.367 li
393.034 395.405 392.341 396.131 391.35 396.131 cv
391.12 396.131 390.678 396.138 390.125 396.148 cv
389.205 396.164 387.946 396.186 386.859 396.186 cv
cp
.807843 .737255 .698039 rgb
f
387.742 384.505 mo
390.227 384.505 391.35 386.029 392.152 388.273 cv
392.982 390.598 392.873 393.485 392.873 394.367 cv
392.873 395.249 392.312 395.97 391.35 395.97 cv
390.388 395.97 385.7 396.105 384.668 395.954 cv
383.759 395.82 382.314 395.79 382.314 394.106 cv
382.314 392.423 382.802 388.215 383.386 387.178 cv
384.227 385.681 384.989 384.505 387.742 384.505 cv
cp
1 1 1 rgb
f
392.977 383.774 mo
366.548 383.774 355.404 376.407 355.404 376.407 cv
355.404 376.407 362.887 396.627 392.977 396.627 cv
423.068 396.627 430.551 376.407 430.551 376.407 cv
430.551 376.407 419.406 383.774 392.977 383.774 cv
cp
427.571 385.855 mo
424.056 392.722 414.73 406.5 392.977 406.5 cv
371.225 406.5 361.899 392.722 358.384 385.855 cv
355.275 379.782 354.528 376.361 354.802 375.886 cv
355.199 375.2 357.444 375.534 363.261 375.084 cv
369.942 374.568 377.303 372.993 381.162 373.467 cv
384.96 373.934 389.279 376.888 392.977 376.888 cv
396.676 376.888 400.994 373.934 404.793 373.467 cv
408.652 372.993 416.013 374.568 422.694 375.084 cv
428.51 375.534 430.756 375.2 431.153 375.886 cv
431.427 376.361 430.68 379.782 427.571 385.855 cv
cp
.721569 .219608 .0745098 rgb
f
gsave
63.1231 433.172 mo
47.3463 433.172 33.1229 426.512 23.1125 415.853 cv
67.0028 415.853 li
67.1046 415.853 li
69.8749 415.853 li
103.134 415.853 li
93.1232 426.512 78.8998 433.172 63.1231 433.172 cv
23.0953 415.835 mo
13.8864 406.02 8.24776 392.817 8.24776 378.297 cv
8.24776 347.99 32.8163 323.421 63.1231 323.421 cv
93.4298 323.421 117.998 347.99 117.998 378.297 cv
117.998 389.767 114.48 400.415 108.462 409.22 cv
103.943 401.195 95.9912 397.085 87.4606 393.705 cv
87.4607 393.705 li
87.4511 393.701 li
87.2339 393.615 87.017 393.529 86.799 393.444 cv
86.7994 393.443 li
86.767 393.431 li
84.7145 392.629 82.6334 391.864 80.5622 391.092 cv
77.8547 390.072 li
77.7078 390.016 77.5601 389.96 77.4134 389.904 cv
77.413 389.904 li
77.4082 389.901 li
75.3885 387.923 li
75.2515 387.976 li
74.1738 386.674 73.8863 385.379 73.6423 383.583 cv
78.7121 382.006 83.0596 378.644 86.0754 374.171 cv
86.0755 374.171 li
86.0758 374.171 li
86.5429 373.478 86.9789 372.762 87.3793 372.018 cv
87.3799 372.017 li
87.3797 372.017 li
88.2502 370.4 88.9698 368.68 89.4889 366.862 cv
89.6087 366.442 89.6971 366.009 89.7964 365.58 cv
90.2475 363.637 90.513 361.616 90.513 359.524 cv
90.513 358.899 90.4677 358.287 90.4258 357.674 cv
90.4633 357.988 90.4795 358.169 90.4795 358.169 cv
90.4795 358.169 91.9652 345.757 88.1312 339.948 cv
84.3283 334.186 74.2774 332.73 67.1034 332.73 cv
59.9293 332.73 49.8784 334.186 46.0756 339.948 cv
42.2416 345.757 43.7273 358.169 43.7273 358.169 cv
43.7273 358.169 43.7434 357.989 43.7807 357.677 cv
43.7389 358.289 43.6937 358.9 43.6937 359.524 cv
43.6937 361.616 43.9593 363.637 44.4104 365.58 cv
44.4103 365.58 li
44.5097 366.009 44.5981 366.442 44.718 366.862 cv
44.7182 366.862 li
45.2375 368.681 45.9575 370.401 46.8284 372.018 cv
46.827 372.017 li
46.8413 372.041 li
47.236 372.772 47.6645 373.477 48.1237 374.159 cv
48.1314 374.171 li
48.1335 374.173 li
51.1501 378.644 55.4978 382.006 60.5668 383.583 cv
60.3226 385.379 60.0353 386.674 58.9575 387.976 cv
58.8203 387.923 li
56.8026 389.899 li
56.796 389.904 li
56.7957 389.904 li
56.6739 389.95 li
51.7659 391.792 li
50.8783 392.122 49.9913 392.454 49.1073 392.79 cv
48.9912 392.833 li
48.9915 392.834 li
48.7717 392.917 48.5527 393.002 48.3333 393.087 cv
48.3273 393.089 li
37.1138 397.399 26.5889 402.62 23.0953 415.835 cv
77.41 389.909 mo
77.4109 389.905 li
77.4114 389.904 li
77.4112 389.904 li
77.4129 389.904 li
77.41 389.909 li
56.7988 389.909 mo
56.796 389.904 li
56.7977 389.904 li
56.7988 389.909 li
clp
8.24776 323.421 mo
117.998 323.421 li
117.998 433.172 li
8.24776 433.172 li
cp
.713725 .921569 .929412 rgb
f
grestore
111.118 415.853 mo
103.134 415.853 li
105.075 413.786 106.857 411.569 108.462 409.22 cv
109.566 411.182 110.466 413.377 111.118 415.853 cv
23.1125 415.853 mo
23.0904 415.853 li
23.0921 415.846 23.0936 415.841 23.0953 415.835 cv
23.1012 415.841 23.1067 415.847 23.1125 415.853 cv
.576471 .827451 .843137 rgb
f
103.134 415.853 mo
69.8749 415.853 li
67.1046 415.853 li
67.0028 415.853 li
23.1125 415.853 li
23.1067 415.847 23.1012 415.841 23.0953 415.835 cv
26.5889 402.62 37.1138 397.399 48.3273 393.089 cv
48.3333 393.087 li
48.5527 393.002 48.7717 392.917 48.9915 392.834 cv
48.9912 392.833 li
49.1073 392.79 li
49.9913 392.454 50.8783 392.122 51.7659 391.792 cv
56.6739 389.95 li
56.7957 389.904 li
56.796 389.904 li
56.7988 389.909 li
56.7977 389.904 li
56.796 389.904 li
56.8026 389.899 li
58.8203 387.923 li
58.9575 387.976 li
60.0353 386.674 60.3226 385.379 60.5668 383.583 cv
55.4978 382.006 51.1501 378.644 48.1335 374.173 cv
48.1314 374.171 li
48.1237 374.159 li
47.6645 373.477 47.236 372.772 46.8413 372.041 cv
46.827 372.017 li
46.8284 372.018 li
45.9575 370.401 45.2375 368.681 44.7182 366.862 cv
44.718 366.862 li
44.5981 366.442 44.5097 366.009 44.4103 365.58 cv
44.4104 365.58 li
43.9593 363.637 43.6937 361.616 43.6937 359.524 cv
43.6937 358.9 43.7389 358.289 43.7807 357.677 cv
43.7434 357.989 43.7273 358.169 43.7273 358.169 cv
43.7273 358.169 42.2416 345.757 46.0756 339.948 cv
49.8784 334.186 59.9293 332.73 67.1034 332.73 cv
74.2774 332.73 84.3283 334.186 88.1312 339.948 cv
91.9652 345.757 90.4795 358.169 90.4795 358.169 cv
90.4795 358.169 90.4633 357.988 90.4258 357.674 cv
90.4677 358.287 90.513 358.899 90.513 359.524 cv
90.513 361.616 90.2475 363.637 89.7964 365.58 cv
89.6971 366.009 89.6087 366.442 89.4889 366.862 cv
88.9698 368.68 88.2502 370.4 87.3797 372.017 cv
87.3799 372.017 li
87.3793 372.018 li
86.9789 372.762 86.5429 373.478 86.0758 374.171 cv
86.0755 374.171 li
86.0754 374.171 li
83.0596 378.644 78.7121 382.006 73.6423 383.583 cv
73.8863 385.379 74.1738 386.674 75.2515 387.976 cv
75.3885 387.923 li
77.4082 389.901 li
77.413 389.904 li
77.4134 389.904 li
77.5601 389.96 77.7078 390.016 77.8547 390.072 cv
80.5622 391.092 li
82.6334 391.864 84.7145 392.629 86.767 393.431 cv
86.7994 393.443 li
86.799 393.444 li
87.017 393.529 87.2339 393.615 87.4511 393.701 cv
87.4607 393.705 li
87.4606 393.705 li
95.9912 397.085 103.943 401.195 108.462 409.22 cv
106.857 411.569 105.075 413.786 103.134 415.853 cv
77.4112 389.904 mo
77.4114 389.904 li
77.4109 389.905 li
77.41 389.909 li
77.4129 389.904 li
77.4112 389.904 li
.505882 .768627 .784314 rgb
f
72.684 385.174 mo
62.375 401.904 li
52.066 385.174 li
38.1003 390.555 22.724 394.578 18.361 411.123 cv
62.375 411.123 li
106.389 411.123 li
102.026 394.578 86.6498 390.555 72.684 385.174 cv
cp
.427451 .823529 .901961 rgb
f
68.5742 376.304 mo
62.375 376.304 li
56.1757 376.304 li
55.5337 380.681 55.8598 382.461 52.0659 385.175 cv
52.0683 385.174 li
52.0683 385.174 54.194 396.622 62.375 396.622 cv
70.5562 396.622 72.6816 385.174 72.6816 385.174 cv
72.684 385.175 li
68.89 382.461 69.2161 380.681 68.5742 376.304 cv
cp
.894118 .713726 .615686 rgb
f
85.7835 354.794 mo
85.7835 368.64 75.3047 379.864 62.3749 379.864 cv
49.4472 379.864 38.9641 368.64 38.9641 354.794 cv
38.9641 340.949 49.4472 329.726 62.3749 329.726 cv
75.3047 329.726 85.7835 340.949 85.7835 354.794 cv
cp
.937255 .780392 .690196 rgb
f
62.375 410.754 mo
52.0728 385.185 li
52.0665 385.175 li
52.0505 385.181 li
44.2617 388.104 li
48.2616 393.539 li
53.0259 394.551 li
49.927 397.241 li
62.375 410.754 li
cp
.427451 .823529 .901961 rgb
f
62.3749 410.754 mo
49.927 397.241 li
53.0259 394.551 li
48.2616 393.539 li
44.265 388.108 li
44.0433 388.193 43.8191 388.274 43.5978 388.359 cv
43.6737 388.537 li
47.6735 393.972 li
47.78 394.116 47.9351 394.216 48.1099 394.253 cv
51.4403 394.96 li
49.4485 396.689 li
49.2999 396.819 49.2091 397.003 49.1985 397.2 cv
49.1873 397.397 49.2564 397.59 49.3903 397.735 cv
61.7228 411.123 li
62.375 411.123 li
62.3749 410.754 li
cp
.0156863 .709804 .788235 rgb
f
62.375 384.775 mo
58.5353 384.923 li
54.0907 383.194 li
52.0685 385.174 li
62.375 410.754 li
72.6818 385.174 li
70.6588 383.194 li
66.2128 384.923 li
62.375 384.775 li
cp
1 1 1 rgb
f
66.2109 384.953 mo
68.3431 389.821 li
68.4516 389.911 li
68.5893 389.879 li
71.8766 387.166 li
71.2499 388.721 li
68.7621 390.699 li
68.5831 390.841 68.3475 390.891 68.1263 390.833 cv
67.905 390.776 67.7239 390.617 67.6374 390.405 cv
65.5072 385.191 li
66.2109 384.953 li
cp
.831373 .831373 .831373 rgb
f
58.5368 384.953 mo
56.4047 389.821 li
56.2963 389.911 li
56.1585 389.879 li
52.8711 387.166 li
53.4978 388.721 li
55.9856 390.699 li
56.1646 390.841 56.4002 390.891 56.6214 390.833 cv
56.8427 390.776 57.0238 390.617 57.1102 390.405 cv
59.2403 385.191 li
58.5368 384.953 li
cp
f
65.8453 393.269 mo
65.218 390.733 64.2527 388.831 63.7412 387.93 cv
65.183 387.235 66.2108 385.644 66.2108 384.953 cv
66.2108 384.506 64.2924 384.282 62.3739 384.282 cv
60.4552 384.282 58.5369 384.506 58.5369 384.953 cv
58.5369 385.644 59.5662 387.236 61.0088 387.93 cv
60.4969 388.832 59.532 390.734 58.9047 393.269 cv
58.2175 396.045 58.2432 400.5 58.2432 400.5 cv
62.375 410.754 li
66.5067 400.5 li
66.5067 400.5 66.5323 396.045 65.8453 393.269 cv
cp
.654902 .188235 .239216 rgb
f
65.1454 411.123 mo
75.3652 400.029 li
71.55 396.717 li
77.4154 395.472 li
82.0698 388.714 li
72.7224 385.191 li
62.2732 411.123 li
65.1454 411.123 li
cp
.427451 .823529 .901961 rgb
f
82.0644 388.721 mo
77.4154 395.472 li
71.55 396.717 li
75.3652 400.029 li
65.1454 411.123 li
66.1375 411.123 li
75.9017 400.524 li
76.0356 400.379 76.105 400.186 76.0938 399.989 cv
76.0831 399.792 75.9924 399.608 75.8437 399.478 cv
73.1356 397.127 li
77.5673 396.186 li
77.7501 396.147 77.911 396.04 78.0167 395.886 cv
82.6711 389.127 li
82.7312 388.975 li
82.511 388.888 82.2854 388.808 82.0644 388.721 cv
cp
.0156863 .709804 .788235 rgb
f
83.4017 335.218 mo
79.5988 329.456 69.5479 328 62.3739 328 cv
55.1997 328 45.1488 329.456 41.346 335.218 cv
37.512 341.027 38.9979 353.44 38.9979 353.44 cv
38.9979 353.44 40.0897 340.933 46.3418 338.936 cv
47.4373 338.586 57.2579 340.097 62.3717 340.098 cv
62.372 340.098 li
62.3739 340.098 li
62.3759 340.098 li
62.3761 340.098 li
67.4897 340.097 77.3104 338.586 78.406 338.936 cv
84.6579 340.933 85.7499 353.44 85.7499 353.44 cv
85.7499 353.44 87.2356 341.027 83.4017 335.218 cv
cp
.372549 .239216 .152941 rgb
f
75.2699 374.55 mo
75.2699 375.035 74.7847 375.444 74.1296 375.513 cv
66.3327 376.336 58.415 376.336 50.6182 375.513 cv
49.9644 375.444 49.4777 375.034 49.4777 374.55 cv
49.4777 371.146 49.4777 367.741 49.4777 364.336 cv
49.4777 363.851 49.963 363.442 50.6182 363.373 cv
58.415 362.55 66.3327 362.55 74.1296 363.373 cv
74.7834 363.442 75.2699 363.852 75.2699 364.336 cv
75.2699 367.741 75.2699 371.146 75.2699 374.55 cv
cp
.470588 .6 .678431 rgb
f
75.2699 365.469 mo
84.7593 362.132 li
84.8791 361.713 84.9675 361.279 85.067 360.851 cv
75.2699 364.336 li
75.2699 365.469 li
cp
f
75.2699 373.668 mo
81.346 369.442 li
81.8134 368.748 82.2496 368.031 82.6503 367.288 cv
75.2699 372.309 li
75.2699 373.668 li
cp
f
49.4777 365.469 mo
39.9884 362.132 li
39.8685 361.713 39.7802 361.279 39.6807 360.851 cv
49.4777 364.336 li
49.4777 365.469 li
cp
f
49.4777 373.668 mo
43.4017 369.442 li
42.9343 368.748 42.498 368.031 42.0974 367.288 cv
49.4777 372.309 li
49.4777 373.668 li
cp
f
58.7088 353.776 mo
58.7359 353.494 58.6426 353.213 58.4513 353.002 cv
58.2617 352.794 57.9904 352.674 57.7074 352.674 cv
45.3579 352.674 li
45.0785 352.674 44.8101 352.791 44.619 352.997 cv
44.4293 353.201 44.3331 353.478 44.3543 353.755 cv
44.8553 360.334 li
44.8946 360.854 45.3352 361.263 45.8582 361.263 cv
57.0779 361.263 li
57.5995 361.263 58.0299 360.872 58.0794 360.353 cv
58.7088 353.776 li
cp
66.4674 360.353 mo
66.5169 360.872 66.9473 361.263 67.4688 361.263 cv
78.6886 361.263 li
79.2117 361.263 79.6521 360.854 79.6915 360.334 cv
80.1926 353.755 li
80.2137 353.478 80.1174 353.201 79.9277 352.997 cv
79.7368 352.791 79.4684 352.674 79.1888 352.674 cv
66.8394 352.674 li
66.5564 352.674 66.285 352.794 66.0954 353.002 cv
65.9042 353.213 65.8109 353.494 65.8379 353.776 cv
66.4674 360.353 li
cp
83.55 351.872 mo
83.55 353.251 li
83.55 353.461 83.3948 353.636 83.1872 353.661 cv
82.1403 353.789 81.6318 354.469 81.5541 355.183 cv
81.1812 360.447 li
81.082 361.75 79.9956 362.757 78.6886 362.757 cv
67.4685 362.757 li
66.1803 362.757 65.1029 361.777 64.9802 360.495 cv
64.7003 357.57 li
64.6639 357.418 64.6189 357.305 64.6103 357.239 cv
64.4694 356.144 64.1426 354.557 62.2732 354.541 cv
60.4042 354.557 60.0774 356.144 59.9365 357.239 cv
59.9277 357.305 59.8829 357.418 59.8464 357.57 cv
59.5665 360.495 li
59.4438 361.777 58.3665 362.757 57.0782 362.757 cv
45.8582 362.757 li
44.5511 362.757 43.4648 361.75 43.3655 360.447 cv
42.9927 355.183 li
42.915 354.469 42.4064 353.789 41.3595 353.661 cv
41.1519 353.636 40.9967 353.461 40.9967 353.251 cv
40.9967 351.872 li
40.9967 351.654 41.1657 351.474 41.3834 351.46 cv
42.3088 351.4 43.9839 351.188 45.1746 351.188 cv
45.1699 351.2 li
45.3575 351.18 li
57.7073 351.18 li
58.4117 351.18 59.0834 351.477 59.5573 351.999 cv
60.06 352.552 61.5417 352.783 62.2732 352.783 cv
63.005 352.783 64.4868 352.552 64.9895 351.999 cv
65.4634 351.477 66.135 351.18 66.8395 351.18 cv
79.1891 351.18 li
79.377 351.2 li
79.3721 351.188 li
80.5628 351.188 82.238 351.4 83.1635 351.46 cv
83.381 351.474 83.55 351.654 83.55 351.872 cv
cp
.654902 .188235 .239216 rgb
f
267.17 412.187 mo
265.334 412.187 265.721 409.243 265.577 407.388 cv
265.397 405.074 265.368 402.177 264.711 399.068 cv
263.691 394.244 261.566 393.201 259.595 393.201 cv
257.623 393.201 255.498 394.244 254.478 399.068 cv
253.821 402.177 253.793 405.074 253.613 407.388 cv
253.468 409.243 253.855 412.187 252.02 412.187 cv
249.2 412.187 246.017 405.754 244.148 399.903 cv
242.474 394.662 236.852 380.001 235.788 374.881 cv
234.474 368.553 236.221 364.567 237.916 362.337 cv
239.979 359.626 243.184 357.989 246.7 357.709 cv
247.702 357.629 248.613 357.597 249.473 357.597 cv
252.845 357.597 255.426 358.086 259.595 358.086 cv
263.763 358.086 266.344 357.597 269.717 357.597 cv
270.576 357.597 271.488 357.629 272.49 357.709 cv
276.005 357.989 279.21 359.626 281.273 362.337 cv
282.969 364.567 284.715 368.553 283.401 374.881 cv
282.337 380.001 276.716 394.662 275.041 399.903 cv
273.173 405.754 269.989 412.187 267.17 412.187 cv
.505882 .768627 .784314 rgb
f
276.199 357.263 mo
274.137 354.552 270.932 352.915 267.416 352.635 cv
262.484 352.243 259.753 353.012 254.521 353.012 cv
249.29 353.012 246.558 352.243 241.626 352.635 cv
238.11 352.915 234.905 354.552 232.843 357.263 cv
231.147 359.493 229.401 363.479 230.715 369.807 cv
231.778 374.927 237.4 389.588 239.074 394.83 cv
240.943 400.68 244.126 407.113 246.946 407.113 cv
248.782 407.113 248.395 404.17 248.539 402.315 cv
248.719 400 248.747 397.104 249.405 393.994 cv
250.424 389.171 252.55 388.127 254.521 388.127 cv
256.492 388.127 258.618 389.171 259.637 393.994 cv
260.295 397.104 260.323 400 260.503 402.315 cv
260.647 404.17 260.261 407.113 262.096 407.113 cv
264.916 407.113 268.099 400.68 269.968 394.83 cv
271.642 389.588 277.264 374.927 278.327 369.807 cv
279.641 363.479 277.895 359.493 276.199 357.263 cv
cp
.831373 .831373 .831373 rgb
f
267.356 353.557 mo
262.179 353.219 257.547 354.923 254.521 354.923 cv
251.496 354.923 246.863 353.219 241.686 353.557 cv
235.453 353.964 229.493 359.383 231.619 369.619 cv
233.009 376.313 235.597 378.806 236.639 381 cv
237.568 382.957 237.179 385.861 239.954 394.549 cv
242.464 402.407 245.608 407.045 247.187 406.552 cv
248.594 406.112 247.365 400.356 248.75 393.803 cv
249.858 388.56 252.958 386.624 254.521 386.624 cv
256.085 386.624 259.184 388.56 260.293 393.803 cv
261.678 400.356 260.448 406.112 261.855 406.552 cv
263.435 407.045 266.578 402.407 269.088 394.549 cv
271.863 385.861 271.475 382.957 272.403 381 cv
273.445 378.806 276.033 376.313 277.423 369.619 cv
279.55 359.383 273.589 353.964 267.356 353.557 cv
cp
1 1 1 rgb
f
265.954 363.143 mo
265.284 363.067 264.641 363.029 263.99 363.029 cv
262.486 363.029 261.176 363.232 259.79 363.447 cv
258.22 363.691 256.597 363.942 254.521 363.942 cv
252.446 363.942 250.822 363.691 249.253 363.447 cv
247.866 363.232 246.557 363.029 245.053 363.029 cv
244.402 363.029 243.759 363.067 243.089 363.143 cv
238.336 363.689 236.433 365.989 236.522 371.085 cv
236.572 373.983 237.81 376.848 238.805 379.149 cv
239.093 379.818 239.358 380.43 239.562 380.971 cv
239.827 381.674 239.986 382.824 240.205 384.417 cv
240.58 387.149 241.148 391.279 242.692 395.998 cv
244.224 400.682 246.589 407.67 246.849 406.02 cv
247.233 403.577 246.335 401.32 247.368 394.341 cv
248.246 388.408 250.693 384.458 254.521 384.458 cv
258.35 384.458 260.797 388.408 261.674 394.341 cv
262.707 401.32 261.809 403.577 262.194 406.02 cv
262.454 407.67 264.818 400.682 266.35 395.998 cv
267.894 391.279 268.462 387.149 268.837 384.417 cv
269.056 382.824 269.215 381.674 269.48 380.971 cv
269.685 380.43 269.949 379.818 270.237 379.149 cv
271.232 376.848 272.47 373.983 272.521 371.085 cv
272.609 365.989 270.706 363.689 265.954 363.143 cv
cp
.427451 .823529 .901961 rgb
f
254.521 371.396 mo
248.174 371.396 238.596 369.126 241.818 378.907 cv
243.188 383.067 242.52 385.001 243.174 391.785 cv
243.856 398.859 246.223 405.804 246.622 405.804 cv
246.892 405.804 244.752 396.171 246.829 388.573 cv
249.115 380.211 252.446 379.475 254.521 379.475 cv
256.596 379.475 259.926 380.211 262.213 388.573 cv
264.29 396.171 262.15 405.804 262.42 405.804 cv
262.819 405.804 265.186 398.859 265.868 391.785 cv
266.522 385.001 265.854 383.067 267.224 378.907 cv
270.446 369.126 260.868 371.396 254.521 371.396 cv
cp
.470588 .6 .678431 rgb
f
198.849 375.344 mo
198.448 375.344 198.047 375.191 197.741 374.885 cv
174.211 351.355 li
152.097 373.469 li
151.814 373.752 151.444 373.893 151.074 373.893 cv
150.704 373.893 150.334 373.752 150.051 373.469 cv
149.486 372.905 149.486 371.989 150.051 371.424 cv
172.165 349.31 li
170.226 347.37 li
165.741 342.885 li
153.881 329.509 li
153.664 329.265 153.398 329.071 153.099 328.94 cv
150.434 327.769 li
149.926 327.547 149.594 327.051 149.58 326.497 cv
149.501 323.234 li
149.285 323.106 li
149.068 322.889 149.068 322.538 149.285 322.321 cv
149.394 322.213 149.536 322.159 149.678 322.159 cv
149.82 322.159 149.962 322.213 150.07 322.321 cv
150.287 322.538 150.287 322.889 150.07 323.106 cv
149.906 323.215 li
150.228 326.43 li
150.248 326.626 150.372 326.796 150.552 326.875 cv
153.924 328.355 li
154.114 328.439 154.289 328.551 154.444 328.688 cv
167.957 340.67 li
172.441 345.154 li
174.381 347.094 li
175.455 346.02 li
179.595 341.88 li
183.447 339.467 li
188.727 334.186 li
186.533 331.679 186.625 327.869 189.015 325.479 cv
190.262 324.233 191.895 323.61 193.528 323.61 cv
195.162 323.61 196.795 324.233 198.041 325.479 cv
200.534 327.972 200.534 332.013 198.041 334.505 cv
196.797 335.75 195.167 336.371 193.537 336.371 cv
192.037 336.371 190.536 335.845 189.334 334.794 cv
184.054 340.074 li
181.641 343.926 li
177.5 348.066 li
176.427 349.14 li
199.957 372.67 li
200.569 373.281 200.569 374.273 199.957 374.885 cv
199.651 375.191 199.25 375.344 198.849 375.344 cv
.505882 .768627 .784314 rgb
f
148.097 369.469 mo
146.051 367.424 li
171.455 342.02 li
173.5 344.066 li
148.097 369.469 li
cp
.427451 .823529 .901961 rgb
f
173.5 344.066 mo
171.455 342.02 li
175.595 337.88 li
177.641 339.926 li
173.5 344.066 li
cp
.737255 .878431 .960784 rgb
f
177.641 339.926 mo
175.595 337.88 li
179.447 335.467 li
180.054 336.074 li
177.641 339.926 li
cp
.470588 .6 .678431 rgb
f
180.054 336.074 mo
179.447 335.467 li
185.487 329.426 li
186.095 330.033 li
180.054 336.074 li
cp
f
148.097 369.469 mo
147.532 370.034 146.616 370.034 146.051 369.469 cv
145.486 368.905 145.486 367.989 146.051 367.424 cv
146.616 366.859 147.532 366.859 148.097 367.424 cv
148.662 367.989 148.662 368.905 148.097 369.469 cv
cp
.427451 .823529 .901961 rgb
f
194.041 330.505 mo
191.549 332.998 187.508 332.998 185.015 330.505 cv
182.523 328.013 182.523 323.972 185.015 321.479 cv
187.508 318.987 191.549 318.987 194.041 321.479 cv
196.534 323.972 196.534 328.013 194.041 330.505 cv
cp
.470588 .6 .678431 rgb
f
193.445 329.909 mo
191.282 332.072 187.775 332.072 185.612 329.909 cv
183.449 327.746 183.449 324.239 185.612 322.076 cv
187.775 319.913 191.282 319.913 193.445 322.076 cv
195.608 324.239 195.608 327.746 193.445 329.909 cv
cp
.831373 .831373 .831373 rgb
f
193.445 322.076 mo
191.282 319.913 187.775 319.913 185.612 322.076 cv
184.763 322.925 184.253 323.981 184.07 325.081 cv
184.253 326.182 184.763 327.238 185.612 328.087 cv
187.775 330.25 191.282 330.25 193.445 328.087 cv
194.294 327.238 194.804 326.182 194.987 325.081 cv
194.804 323.981 194.294 322.925 193.445 322.076 cv
cp
1 1 1 rgb
f
168.441 341.154 mo
166.226 343.37 li
161.741 338.885 li
163.957 336.67 li
168.441 341.154 li
cp
.737255 .878431 .960784 rgb
f
166.226 343.37 mo
193.741 370.885 li
194.353 371.497 195.345 371.497 195.957 370.885 cv
196.569 370.273 196.569 369.281 195.957 368.67 cv
168.441 341.154 li
166.226 343.37 li
cp
.427451 .823529 .901961 rgb
f
146.07 319.106 mo
146.287 318.889 146.287 318.538 146.07 318.321 cv
145.853 318.104 145.502 318.104 145.285 318.321 cv
145.068 318.538 145.068 318.889 145.285 319.106 cv
145.501 319.234 li
145.58 322.497 li
145.594 323.051 145.926 323.547 146.434 323.769 cv
149.099 324.94 li
149.398 325.071 149.664 325.265 149.881 325.509 cv
161.741 338.885 li
163.957 336.67 li
150.444 324.688 li
150.289 324.551 150.114 324.439 149.924 324.355 cv
146.552 322.875 li
146.372 322.796 146.248 322.626 146.228 322.43 cv
145.906 319.215 li
146.07 319.106 li
cp
.470588 .6 .678431 rgb
f
316.459 357.793 mo
310.337 351.671 li
322.63 339.378 li
324.712 337.155 326.299 335.314 327.576 333.652 cv
327.878 333.258 328.162 332.875 328.431 332.499 cv
328.505 332.396 328.579 332.292 328.651 332.189 cv
328.933 331.787 329.2 331.391 329.448 331.003 cv
329.519 330.895 li
329.79 330.467 330.041 330.045 330.279 329.625 cv
330.425 329.36 li
330.608 329.029 330.783 328.698 330.951 328.366 cv
332.082 326.125 332.906 323.813 333.969 320.777 cv
333.469 320.65 li
333.121 320.561 332.91 320.207 332.999 319.858 cv
333.87 316.443 li
333.945 316.149 334.21 315.953 334.5 315.953 cv
334.553 315.953 334.607 315.96 334.661 315.973 cv
340.336 317.421 li
341.212 318.658 li
341.093 319.127 li
341.586 319.253 li
341.49 319.631 li
344.875 320.843 li
344.987 320.688 345.167 320.594 345.359 320.594 cv
345.408 320.594 345.457 320.599 345.506 320.612 cv
345.826 320.694 346.019 321.019 345.937 321.339 cv
345.869 321.61 345.625 321.79 345.359 321.79 cv
345.31 321.79 345.26 321.784 345.21 321.771 cv
344.966 321.708 344.797 321.503 344.767 321.267 cv
341.215 320.709 li
341.394 320.007 li
341.119 321.087 li
340.625 320.961 li
340.505 321.43 li
339.144 322.097 li
338.4 322.51 337.861 323.215 337.657 324.041 cv
337.38 326.375 337.128 328.779 336.599 331.242 cv
336.603 331.245 li
336.565 331.401 li
336.461 331.876 336.346 332.353 336.218 332.833 cv
336.181 332.98 li
336.034 333.521 335.868 334.064 335.684 334.61 cv
335.589 334.874 li
335.432 335.325 335.26 335.778 335.073 336.232 cv
335.019 336.363 334.963 336.494 334.907 336.625 cv
334.713 337.076 334.502 337.528 334.274 337.982 cv
334.174 338.197 li
334.17 338.195 li
332.943 340.587 331.228 343.024 328.752 345.5 cv
316.459 357.793 li
.505882 .768627 .784314 rgb
f
330.077 317.258 mo
335.753 318.706 li
336.945 314.029 li
331.27 312.582 li
330.922 312.493 330.568 312.703 330.479 313.052 cv
329.608 316.467 li
329.519 316.815 329.729 317.169 330.077 317.258 cv
cp
.737255 .878431 .960784 rgb
f
335.753 318.706 mo
337.114 318.038 li
337.821 315.267 li
336.945 314.029 li
335.753 318.706 li
cp
.470588 .6 .678431 rgb
f
337.233 317.57 mo
337.727 317.696 li
338.195 315.862 li
337.701 315.736 li
337.233 317.57 li
cp
.737255 .878431 .960784 rgb
f
337.824 317.318 mo
341.436 317.885 li
341.541 317.471 li
338.099 316.239 li
337.824 317.318 li
cp
.494118 .458824 .431373 rgb
f
341.387 317.652 mo
341.305 317.972 341.499 318.298 341.819 318.379 cv
342.139 318.461 342.464 318.268 342.546 317.948 cv
342.628 317.628 342.434 317.302 342.115 317.221 cv
341.794 317.139 341.469 317.332 341.387 317.652 cv
cp
f
330.577 317.386 mo
334.813 318.466 li
335.753 318.706 li
335.008 319.119 334.47 319.823 334.266 320.65 cv
333.474 327.31 332.939 334.53 325.361 342.109 cv
313.067 354.402 li
306.945 348.28 li
319.238 335.987 li
326.857 327.854 328.002 324.743 330.577 317.386 cv
cp
.427451 .823529 .901961 rgb
f
319.238 335.987 mo
325.361 342.109 li
313.067 354.402 li
306.945 348.28 li
319.238 335.987 li
cp
.470588 .6 .678431 rgb
f
330.783 334.806 mo
324.064 330.423 li
325.649 328.378 326.749 326.617 327.651 324.8 cv
333.212 327.853 li
332.725 330.122 331.995 332.442 330.783 334.806 cv
cp
.737255 .878431 .960784 rgb
f
450 300 mo
0 300 li
0 150 li
450 150 li
450 300 li
.00392157 .352941 .470588 rgb
f
380.049 274.956 mo
349.742 274.956 325.174 250.388 325.174 220.081 cv
325.174 189.774 349.742 165.206 380.049 165.206 cv
399.581 165.206 416.73 175.411 426.454 190.779 cv
425.146 190.744 423.516 190.731 421.753 190.731 cv
420.323 190.731 418.805 190.74 417.301 190.752 cv
417.252 190.879 li
416.614 192.467 414.509 194.634 410.641 195.845 cv
411.74 195.873 412.874 195.89 413.994 195.89 cv
416.539 195.89 419.008 195.801 420.808 195.54 cv
423.952 195.086 426.356 194.073 427.851 193.112 cv
432.354 201.076 434.924 210.279 434.924 220.081 cv
434.924 248.649 413.094 272.118 385.205 274.717 cv
385.292 273.646 385.392 271.798 385.501 269.368 cv
385.916 269.2 386.322 269.022 386.708 268.82 cv
389.108 267.562 390.328 265.86 390.328 263.765 cv
390.328 262.032 389.68 260.542 388.353 259.298 cv
388.197 259.352 386.532 260.045 385.857 260.387 cv
385.863 260.213 385.869 260.036 385.875 259.86 cv
388.497 258.66 391.018 257.899 391.007 254.536 cv
391.003 253.012 390.449 251.808 389.314 250.868 cv
388.1 251.45 386.86 251.791 386.142 252.021 cv
386.15 251.785 386.158 251.551 386.165 251.313 cv
386.297 251.272 386.422 251.231 386.558 251.189 cv
389.956 250.16 392.345 248.801 392.398 245.296 cv
392.432 242.949 391.442 241.322 389.173 240.012 cv
389.173 240.012 388.188 240.441 387.739 240.619 cv
387.519 240.705 386.97 240.917 386.483 241.105 cv
386.489 240.905 386.495 240.707 386.501 240.508 cv
387.366 240.168 388.314 239.792 389.352 239.348 cv
392.723 237.69 394.162 235.639 394.162 232.514 cv
394.162 230.169 393.147 228.374 391.062 227.014 cv
389.689 227.262 388.388 227.461 386.867 227.779 cv
386.873 227.55 386.88 227.323 386.886 227.095 cv
388.276 226.812 389.71 226.574 391.077 226.336 cv
396.773 225.338 402.073 223.914 402.073 219.331 cv
402.073 216.156 400.513 213.929 397.217 213.552 cv
396.791 213.477 396.371 213.443 395.962 213.443 cv
392.704 213.443 390.125 215.584 390.19 216.214 cv
390.233 216.635 391.065 216.795 392.036 216.795 cv
392.697 216.795 393.421 216.721 394.006 216.605 cv
395.452 216.315 396.253 215.469 396.253 215.469 cv
396.253 215.469 396.764 216.424 396.064 217.094 cv
395.995 217.073 394.949 216.76 394.074 216.76 cv
393.979 216.76 393.886 216.763 393.796 216.771 cv
392.965 216.846 392.187 217.55 391.484 217.55 cv
391.448 217.55 391.412 217.548 391.377 217.545 cv
390.752 217.477 390.225 217.08 390.02 217.08 cv
390.014 217.08 390.007 217.08 390.001 217.081 cv
389.813 217.11 389.585 217.365 390.001 217.556 cv
390.392 217.733 390.828 217.966 391.397 217.966 cv
391.44 217.966 391.483 217.965 391.527 217.962 cv
392.483 217.905 393.292 217.248 393.978 217.248 cv
394.386 217.248 394.953 217.394 395.327 217.506 cv
394.019 217.937 391.635 218.021 391.809 218.335 cv
391.936 218.565 392.552 218.75 393.533 218.75 cv
394.113 218.75 394.821 218.685 395.632 218.528 cv
397.277 218.209 398.198 217.192 398.203 217.186 cv
398.739 217.529 399.207 218.193 399.207 219.474 cv
399.207 222.261 393.987 223.143 388.931 223.998 cv
388.291 224.104 387.629 224.222 386.961 224.349 cv
387.162 216.923 387.333 210.139 387.445 205.191 cv
387.599 205.178 387.74 205.154 387.891 205.138 cv
387.887 205.211 li
388.33 206.592 389.881 208.11 391.141 208.577 cv
391.141 208.577 li
391.141 208.577 li
390.802 207.25 390.394 205.766 390.125 204.795 cv
390.508 204.716 390.872 204.624 391.232 204.53 cv
391.28 204.686 391.333 204.847 391.39 205.013 cv
392.439 206.26 394.641 207.118 396.281 207.118 cv
396.413 207.118 396.542 207.113 396.667 207.101 cv
395.771 205.875 394.753 204.539 394.011 203.574 cv
394.35 203.425 394.684 203.273 394.997 203.111 cv
395.302 203.506 395.684 203.979 396.129 204.482 cv
397.467 205.309 399.402 205.743 401.045 205.743 cv
401.777 205.743 402.451 205.657 402.99 205.482 cv
400.94 204.058 398.556 202.47 397.314 201.647 cv
397.599 201.432 397.87 201.217 398.124 200.996 cv
398.698 201.407 399.771 202.15 401.128 202.961 cv
402.28 203.319 403.604 203.483 404.889 203.483 cv
406.783 203.483 408.592 203.128 409.644 202.515 cv
405.535 201.037 400.593 199.364 399.929 199.14 cv
400.111 198.917 400.289 198.695 400.444 198.481 cv
401.25 198.805 402.979 199.472 405.136 200.145 cv
405.502 200.176 405.874 200.191 406.25 200.191 cv
409.769 200.191 413.57 198.894 415.03 197.342 cv
409.496 196.644 402.91 195.936 401.939 195.832 cv
402.032 195.6 402.078 195.457 402.078 195.457 cv
402.078 195.457 405.454 195.61 409.162 195.812 cv
413.987 194.621 416.06 192.045 416.578 190.756 cv
413.53 190.757 409.437 190.83 407.314 190.83 cv
406.501 190.83 405.977 190.82 405.911 190.79 cv
405.521 190.615 402.62 189.277 399.616 189.277 cv
399.159 189.277 398.7 189.308 398.246 189.378 cv
392.878 190.218 392.129 194.227 394.906 196.903 cv
394.906 196.903 393.953 201.741 387.498 202.751 cv
387.57 199.328 387.602 197.226 387.576 197.087 cv
387.49 196.606 387.11 195.814 386.58 195.194 cv
388.113 194.605 389.202 193.163 389.202 191.467 cv
389.202 190.443 388.802 189.512 388.153 188.803 cv
387.743 188.69 387.321 188.634 386.898 188.634 cv
385.478 188.634 384.059 189.266 383.112 190.465 cv
382.178 191.647 381.921 193.119 382.273 194.436 cv
382.638 194.758 383.064 195.018 383.531 195.198 cv
383.004 195.817 382.626 196.607 382.541 197.087 cv
382.516 197.227 382.547 199.33 382.619 202.758 cv
376.118 201.765 375.158 196.903 375.158 196.903 cv
377.934 194.227 377.188 190.218 371.823 189.378 cv
371.369 189.308 370.909 189.277 370.452 189.277 cv
367.446 189.277 364.545 190.615 364.154 190.79 cv
364.088 190.82 363.564 190.83 362.751 190.83 cv
360.629 190.83 356.537 190.757 353.489 190.756 cv
354.006 192.045 356.077 194.621 360.903 195.812 cv
364.613 195.61 367.988 195.457 367.988 195.457 cv
367.988 195.457 368.034 195.6 368.127 195.832 cv
367.159 195.936 360.572 196.644 355.035 197.342 cv
356.494 198.894 360.297 200.191 363.816 200.191 cv
364.192 200.191 364.564 200.176 364.93 200.145 cv
367.086 199.472 368.815 198.805 369.622 198.482 cv
369.777 198.695 369.955 198.917 370.136 199.14 cv
369.475 199.363 364.532 201.036 360.423 202.515 cv
361.475 203.128 363.283 203.483 365.176 203.483 cv
366.461 203.483 367.785 203.319 368.937 202.961 cv
370.295 202.15 371.369 201.407 371.942 200.996 cv
372.196 201.217 372.467 201.432 372.752 201.647 cv
371.51 202.47 369.126 204.058 367.073 205.482 cv
367.612 205.657 368.287 205.743 369.019 205.743 cv
370.663 205.743 372.597 205.309 373.935 204.482 cv
374.381 203.979 374.764 203.505 375.068 203.111 cv
375.381 203.273 375.715 203.424 376.055 203.573 cv
375.312 204.539 374.295 205.875 373.397 207.101 cv
373.522 207.113 373.651 207.118 373.783 207.118 cv
375.424 207.118 377.625 206.26 378.676 205.013 cv
378.733 204.847 378.786 204.686 378.834 204.529 cv
379.194 204.624 379.557 204.716 379.94 204.795 cv
379.669 205.765 379.262 207.25 378.925 208.577 cv
380.184 208.11 381.738 206.592 382.179 205.211 cv
382.175 205.138 li
382.342 205.156 382.502 205.179 382.672 205.194 cv
382.784 210.14 382.954 216.923 383.155 224.347 cv
382.549 224.234 381.906 224.117 381.184 223.998 cv
376.13 223.143 370.908 222.261 370.908 219.474 cv
370.908 218.195 371.376 217.53 371.911 217.187 cv
371.922 217.199 372.842 218.21 374.481 218.528 cv
375.293 218.685 376.002 218.75 376.582 218.75 cv
377.564 218.75 378.178 218.565 378.305 218.335 cv
378.479 218.021 376.096 217.937 374.787 217.506 cv
375.161 217.394 375.729 217.248 376.138 217.248 cv
376.825 217.248 377.634 217.905 378.587 217.962 cv
378.632 217.965 378.675 217.966 378.718 217.966 cv
379.288 217.966 379.723 217.734 380.114 217.556 cv
380.532 217.365 380.301 217.11 380.114 217.081 cv
380.108 217.08 380.102 217.08 380.095 217.08 cv
379.89 217.08 379.362 217.477 378.737 217.545 cv
378.701 217.548 378.666 217.55 378.63 217.55 cv
377.927 217.55 377.15 216.846 376.316 216.771 cv
376.228 216.763 376.135 216.76 376.041 216.76 cv
375.165 216.76 374.11 217.077 374.05 217.095 cv
373.351 216.425 373.864 215.469 373.864 215.469 cv
373.864 215.469 374.663 216.315 376.109 216.605 cv
376.693 216.721 377.418 216.795 378.078 216.795 cv
379.049 216.795 379.881 216.635 379.924 216.214 cv
379.99 215.584 377.412 213.443 374.153 213.443 cv
373.744 213.443 373.324 213.477 372.898 213.552 cv
372.897 213.552 li
369.891 213.96 367.897 216.137 367.897 219.249 cv
367.897 223.799 373.269 225.317 378.911 226.315 cv
380.033 225.624 381.424 225.053 383.161 224.553 cv
383.167 224.783 383.173 225.013 383.18 225.244 cv
381.691 225.685 380.292 226.231 379.159 226.949 cv
377.002 228.312 375.955 230.131 375.955 232.514 cv
375.955 235.688 377.437 237.754 380.922 239.424 cv
380.922 239.424 381.964 238.827 382.685 238.514 cv
382.964 238.395 383.258 238.278 383.546 238.168 cv
383.551 238.372 383.557 238.575 383.563 238.779 cv
380.158 240.245 377.66 241.585 377.718 245.296 cv
377.751 247.51 378.682 248.99 380.726 250.079 cv
381.659 249.401 382.777 248.934 383.862 248.553 cv
383.869 248.79 383.876 249.028 383.884 249.263 cv
382.865 249.628 381.813 250.081 380.959 250.737 cv
379.719 251.701 379.112 252.938 379.112 254.536 cv
379.105 256.396 379.858 257.664 381.644 258.672 cv
381.644 258.672 382.369 258.089 383.04 257.707 cv
383.378 257.517 383.867 257.245 384.142 257.091 cv
384.15 257.303 384.157 257.518 384.164 257.727 cv
384.008 257.803 383.857 257.871 383.697 257.957 cv
381.347 259.206 379.787 261.112 379.787 263.765 cv
379.787 265.812 380.949 267.483 383.245 268.733 cv
383.719 268.44 384.159 268.136 384.545 267.824 cv
384.557 268.098 384.569 268.371 384.58 268.632 cv
383.505 269.423 382.28 270.072 381.125 270.581 cv
382.274 270.373 383.474 270.076 384.627 269.683 cv
384.731 271.979 384.827 273.724 384.91 274.744 cv
383.308 274.884 381.688 274.956 380.049 274.956 cv
386.85 269.494 mo
386.59 269.628 386.317 269.753 386.035 269.875 cv
386.05 269.882 li
387.071 270.197 388.089 270.417 388.989 270.581 cv
388.312 270.281 387.578 269.921 386.85 269.494 cv
387.936 206.206 mo
387.948 207.019 388.04 207.913 388.309 208.72 cv
388.975 210.709 390.876 211.857 391.557 211.857 cv
391.649 211.857 391.718 211.836 391.76 211.793 cv
391.856 211.694 391.619 210.58 391.281 209.232 cv
391.13 209.174 li
391.027 209.135 390.924 209.09 390.819 209.041 cv
389.806 208.555 388.557 207.422 387.936 206.206 cv
382.128 206.206 mo
381.507 207.422 380.262 208.555 379.247 209.041 cv
379.143 209.09 379.039 209.135 378.936 209.174 cv
378.785 209.232 li
378.449 210.58 378.207 211.694 378.305 211.793 cv
378.347 211.836 378.417 211.857 378.509 211.857 cv
379.192 211.857 381.091 210.709 381.755 208.72 cv
382.025 207.913 382.119 207.019 382.128 206.206 cv
391.781 205.936 mo
392.161 206.873 392.671 207.855 393.344 208.638 cv
394.602 210.099 396.458 210.612 397.63 210.612 cv
398.218 210.612 398.634 210.483 398.715 210.279 cv
398.784 210.111 398.008 208.958 397.01 207.583 cv
396.81 207.601 li
396.673 207.613 396.536 207.621 396.391 207.621 cv
394.999 207.621 393.048 207 391.781 205.936 cv
373.055 207.583 mo
372.059 208.958 371.281 210.111 371.347 210.279 cv
371.429 210.483 371.846 210.612 372.435 210.612 cv
373.608 210.612 375.465 210.099 376.722 208.638 cv
377.395 207.855 377.904 206.873 378.284 205.936 cv
377.018 207 375.066 207.621 373.676 207.621 cv
373.532 207.621 373.393 207.613 373.256 207.601 cv
373.055 207.583 li
397.191 205.484 mo
398.09 206.422 399.164 207.382 400.319 208.081 cv
401.846 209.006 403.463 209.323 404.73 209.323 cv
406.111 209.323 407.076 208.946 407.054 208.57 cv
407.04 208.367 405.563 207.276 403.736 206.002 cv
403.499 206.078 li
402.936 206.26 402.225 206.357 401.442 206.357 cv
399.969 206.357 398.426 206.03 397.191 205.484 cv
366.328 206.002 mo
364.501 207.276 363.024 208.367 363.011 208.57 cv
362.99 208.946 363.955 209.323 365.336 209.323 cv
366.604 209.323 368.221 209.006 369.748 208.081 cv
370.902 207.382 371.974 206.422 372.874 205.484 cv
371.64 206.03 370.097 206.357 368.624 206.357 cv
367.84 206.357 367.129 206.26 366.567 206.078 cv
366.328 206.002 li
402.427 203.669 mo
403.956 204.522 405.712 205.363 407.435 205.887 cv
408.775 206.294 410.047 206.452 411.169 206.452 cv
413.967 206.453 415.839 205.469 415.55 204.905 cv
415.435 204.681 413.113 203.783 410.304 202.765 cv
410.063 202.904 li
408.971 203.54 407.125 203.92 405.132 203.92 cv
405.13 203.92 li
404.184 203.92 403.271 203.834 402.427 203.669 cv
359.762 202.765 mo
356.953 203.783 354.631 204.681 354.516 204.905 cv
354.228 205.469 356.099 206.452 358.897 206.452 cv
360.019 206.452 361.291 206.294 362.632 205.887 cv
364.354 205.363 366.109 204.522 367.639 203.669 cv
366.795 203.834 365.879 203.92 364.936 203.92 cv
362.94 203.92 361.096 203.54 360.003 202.904 cv
359.762 202.765 li
415.803 197.454 mo
415.639 197.626 li
414.103 199.263 410.225 200.546 406.755 200.584 cv
409.04 201.243 411.632 201.838 414.017 202.023 cv
414.477 202.058 414.924 202.075 415.356 202.075 cv
420.777 202.075 423.975 199.463 423.185 198.674 cv
422.939 198.428 419.683 197.947 415.803 197.454 cv
354.262 197.454 mo
350.383 197.947 347.127 198.428 346.881 198.674 cv
346.092 199.463 349.291 202.074 354.711 202.075 cv
355.144 202.075 355.59 202.058 356.05 202.023 cv
358.434 201.838 361.026 201.243 363.312 200.584 cv
359.84 200.546 355.964 199.263 354.425 197.626 cv
354.262 197.454 li
348.312 190.731 mo
344.179 190.731 340.776 190.802 340.534 191.059 cv
339.903 191.73 343.215 194.667 349.258 195.54 cv
351.057 195.801 353.527 195.89 356.072 195.89 cv
357.192 195.89 358.326 195.873 359.424 195.845 cv
355.557 194.634 353.453 192.467 352.814 190.879 cv
352.763 190.752 li
351.259 190.74 349.742 190.731 348.312 190.731 cv
384.899 187.282 mo
382.609 187.282 380.755 189.081 380.755 191.299 cv
380.755 192.241 381.09 193.107 381.652 193.791 cv
381.465 192.484 381.82 191.16 382.667 190.084 cv
383.653 188.838 385.137 188.119 386.737 188.119 cv
386.997 188.119 387.255 188.141 387.506 188.18 cv
387.506 188.18 li
387.506 188.18 li
386.795 187.619 385.887 187.282 384.899 187.282 cv
384.545 267.824 mo
383.372 266.734 382.49 265.378 382.457 263.77 cv
382.43 262.4 383.182 261.433 384.27 260.712 cv
384.365 263.356 384.458 265.752 384.545 267.824 cv
385.569 267.818 mo
385.656 265.755 385.749 263.372 385.844 260.744 cv
387.139 261.547 387.682 262.644 387.659 263.77 cv
387.621 265.356 386.772 266.701 385.569 267.818 cv
385.978 256.924 mo
386.032 255.366 386.086 253.75 386.14 252.088 cv
387.315 252.586 388.334 253.253 388.337 254.538 cv
388.342 255.859 387.372 256.342 385.978 256.924 cv
384.136 256.895 mo
382.607 256.344 381.775 255.738 381.781 254.538 cv
381.784 253.355 382.636 252.661 383.975 252.087 cv
384.029 253.739 384.082 255.345 384.136 256.895 cv
383.859 248.484 mo
381.708 247.787 380.415 247.014 380.387 245.259 cv
380.359 243.482 381.484 242.612 383.649 241.66 cv
383.719 243.971 383.789 246.255 383.859 248.484 cv
386.256 248.481 mo
386.327 246.235 386.398 243.933 386.468 241.605 cv
388.075 242.233 389.758 243.42 389.73 245.259 cv
389.703 246.911 388.561 247.738 386.256 248.481 cv
383.531 237.666 mo
383.43 237.618 383.324 237.567 383.215 237.519 cv
380.164 236.136 378.622 235.126 378.622 232.514 cv
378.622 230.253 380.579 228.928 383.256 228.031 cv
383.344 231.196 383.436 234.436 383.531 237.666 cv
386.586 237.635 mo
386.68 234.418 386.772 231.191 386.86 228.038 cv
389.224 228.836 391.491 230.05 391.491 232.514 cv
391.491 235.483 389.105 236.689 386.586 237.635 cv
393.859 214.902 mo
393.537 214.902 393.245 214.812 393.21 214.695 cv
393.153 214.525 393.548 214.195 393.988 214.055 cv
394.109 214.017 394.237 214 394.362 214 cv
394.691 214 394.99 214.115 395.03 214.24 cv
395.087 214.412 394.74 214.699 394.303 214.837 cv
394.164 214.882 394.009 214.902 393.859 214.902 cv
376.256 214.902 mo
376.106 214.902 375.951 214.882 375.812 214.837 cv
375.373 214.699 375.031 214.412 375.085 214.24 cv
375.126 214.115 375.424 214 375.753 214 cv
375.878 214 376.006 214.017 376.127 214.055 cv
376.566 214.195 376.962 214.525 376.907 214.695 cv
376.871 214.812 376.578 214.902 376.256 214.902 cv
.027451 .380392 .482353 rgb
f
276.234 236.83 mo
256.053 236.83 239.692 220.47 239.692 200.288 cv
239.692 180.107 256.053 163.746 276.234 163.746 cv
296.416 163.746 312.776 180.107 312.776 200.288 cv
312.776 220.47 296.416 236.83 276.234 236.83 cv
264.917 178.789 mo
262.972 178.789 261.395 180.366 261.395 182.312 cv
261.395 221.682 li
261.395 223.627 262.972 225.204 264.917 225.204 cv
291.658 225.204 li
293.603 225.204 295.18 223.627 295.18 221.682 cv
295.18 182.312 li
295.18 180.366 293.603 178.789 291.658 178.789 cv
264.917 178.789 li
f
110.999 225.373 mo
91.7596 225.373 76.1629 209.776 76.1629 190.537 cv
76.1629 171.297 91.7596 155.701 110.999 155.701 cv
130.238 155.701 145.835 171.297 145.835 190.537 cv
145.835 209.776 130.238 225.373 110.999 225.373 cv
124.799 165.726 mo
122.003 165.726 122.56 171.344 121.838 174.763 cv
121.481 176.452 120.656 176.848 120.656 179.541 cv
120.656 182.233 121.398 182.705 121.676 183.442 cv
121.921 184.093 121.85 184.538 120.909 185.478 cv
120.118 186.269 118.024 187.351 118.024 189.484 cv
118.024 214.975 li
118.024 215.908 118.78 216.664 119.713 216.664 cv
124.799 216.664 li
129.884 216.664 li
130.817 216.664 131.574 215.908 131.574 214.975 cv
131.574 189.484 li
131.574 187.351 129.479 186.269 128.688 185.478 cv
127.748 184.538 127.677 184.093 127.922 183.442 cv
128.2 182.705 128.941 182.233 128.941 179.541 cv
128.941 176.848 128.116 176.452 127.76 174.763 cv
127.038 171.344 127.595 165.726 124.799 165.726 cv
104.325 165.726 mo
101.528 165.726 102.086 171.344 101.364 174.763 cv
101.007 176.452 100.182 176.848 100.182 179.541 cv
100.182 182.233 100.924 182.705 101.201 183.442 cv
101.447 184.093 101.376 184.538 100.435 185.478 cv
99.6443 186.269 97.5496 187.351 97.5496 189.484 cv
97.5496 214.975 li
97.5496 215.908 98.3061 216.664 99.2392 216.664 cv
104.325 216.664 li
109.41 216.664 li
110.343 216.664 111.1 215.908 111.1 214.975 cv
111.1 189.484 li
111.1 187.351 109.005 186.269 108.214 185.478 cv
107.274 184.538 107.203 184.093 107.448 183.442 cv
107.726 182.705 108.468 182.233 108.468 179.541 cv
108.468 176.848 107.642 176.452 107.286 174.763 cv
106.564 171.344 107.121 165.726 104.325 165.726 cv
129.884 216.16 mo
119.713 216.16 li
119.059 216.16 118.528 215.628 118.528 214.975 cv
118.528 189.484 li
118.528 188.054 119.657 187.155 120.564 186.432 cv
120.827 186.223 121.076 186.025 121.266 185.834 cv
122.271 184.83 122.493 184.181 122.147 183.264 cv
122.068 183.054 121.965 182.875 121.857 182.685 cv
121.546 182.143 121.16 181.468 121.16 179.541 cv
121.16 177.924 121.467 177.211 121.792 176.456 cv
121.989 175.999 122.192 175.526 122.331 174.867 cv
122.537 173.892 122.642 172.742 122.744 171.63 cv
122.986 168.975 123.237 166.23 124.799 166.23 cv
126.361 166.23 126.611 168.975 126.854 171.63 cv
126.956 172.742 127.061 173.892 127.266 174.867 cv
127.406 175.526 127.609 175.999 127.806 176.456 cv
128.131 177.211 128.437 177.924 128.437 179.541 cv
128.437 181.468 128.051 182.143 127.741 182.685 cv
127.632 182.875 127.53 183.054 127.451 183.264 cv
127.105 184.181 127.327 184.83 128.331 185.834 cv
128.522 186.025 128.771 186.223 129.034 186.433 cv
129.941 187.155 131.07 188.054 131.07 189.484 cv
131.07 214.975 li
131.07 215.628 130.538 216.16 129.884 216.16 cv
119.032 198.778 mo
119.032 214.975 li
119.032 215.351 119.338 215.656 119.713 215.656 cv
129.884 215.656 li
130.26 215.656 130.565 215.351 130.565 214.975 cv
130.565 198.778 li
119.032 198.778 li
119.901 196.431 mo
119.901 197.382 li
123.049 197.382 li
123.049 196.431 li
119.901 196.431 li
119.901 193.816 mo
119.901 194.767 li
121.87 194.767 li
121.87 193.816 li
119.901 193.816 li
119.901 191.201 mo
119.901 192.152 li
123.049 192.152 li
123.049 191.201 li
119.901 191.201 li
109.41 216.16 mo
99.2395 216.16 li
98.5854 216.16 98.0536 215.628 98.0536 214.975 cv
98.0536 189.484 li
98.0536 188.054 99.1827 187.155 100.09 186.432 cv
100.353 186.223 100.602 186.025 100.792 185.834 cv
101.797 184.83 102.019 184.181 101.673 183.264 cv
101.594 183.054 101.491 182.875 101.383 182.685 cv
101.072 182.143 100.686 181.468 100.686 179.541 cv
100.686 177.924 100.993 177.211 101.318 176.456 cv
101.515 175.999 101.718 175.526 101.857 174.867 cv
102.063 173.892 102.168 172.742 102.27 171.63 cv
102.512 168.975 102.763 166.23 104.325 166.23 cv
105.887 166.23 106.138 168.975 106.38 171.63 cv
106.482 172.742 106.586 173.892 106.792 174.867 cv
106.932 175.526 107.135 175.999 107.332 176.456 cv
107.657 177.211 107.963 177.924 107.963 179.541 cv
107.963 181.468 107.577 182.143 107.267 182.685 cv
107.158 182.875 107.056 183.054 106.977 183.264 cv
106.631 184.181 106.853 184.83 107.858 185.834 cv
108.048 186.025 108.297 186.223 108.56 186.433 cv
109.467 187.155 110.596 188.054 110.596 189.484 cv
110.596 214.975 li
110.596 215.628 110.064 216.16 109.41 216.16 cv
98.5579 189.51 mo
98.5579 214.975 li
98.5579 215.351 98.8636 215.656 99.2395 215.656 cv
109.41 215.656 li
109.786 215.656 110.091 215.351 110.091 214.975 cv
110.091 189.51 li
98.5579 189.51 li
f
49.4095 294.727 mo
38.9068 294.727 29.2497 291.11 21.6148 285.053 cv
21.2885 281.46 18.3986 278.607 14.7891 278.339 cv
8.45354 270.616 4.65019 260.735 4.65019 249.967 cv
4.65019 225.247 24.6896 205.208 49.4095 205.208 cv
74.1293 205.208 94.1687 225.247 94.1687 249.967 cv
94.1687 274.687 74.1293 294.727 49.4095 294.727 cv
48.8269 217.696 mo
47.7911 217.696 46.9484 218.539 46.9484 219.574 cv
46.9484 221.905 li
46.9484 222.94 47.7911 223.783 48.8269 223.783 cv
48.9452 223.783 li
48.9452 233.896 li
26.5178 272.113 li
26.015 273.046 26.0396 274.174 26.5827 275.084 cv
27.1258 275.994 28.1073 276.551 29.167 276.551 cv
53.091 276.551 li
77.015 276.551 li
78.0747 276.551 79.0562 275.994 79.5994 275.084 cv
80.1425 274.174 80.1672 273.046 79.6643 272.113 cv
57.2369 233.896 li
57.2369 231.061 li
77.6373 231.705 li
75.471 220.74 li
57.2369 226.334 li
57.2369 225.155 li
57.2369 223.783 li
57.3551 223.783 li
58.391 223.783 59.2337 222.94 59.2337 221.905 cv
59.2337 219.574 li
59.2337 218.539 58.391 217.696 57.3551 217.696 cv
48.8269 217.696 li
77.015 275.18 mo
29.167 275.18 li
28.5934 275.18 28.0544 274.874 27.7604 274.381 cv
27.4787 273.91 27.4546 273.321 27.6922 272.828 cv
50.317 234.334 li
50.317 229.226 li
55.8654 229.226 li
55.8654 234.334 li
78.4897 272.828 li
78.7277 273.32 78.7033 273.909 78.4218 274.381 cv
78.1276 274.874 77.5886 275.18 77.015 275.18 cv
45.0657 244.62 mo
28.3096 273.126 li
28.1716 273.412 28.1871 273.758 28.3492 274.03 cv
28.5206 274.316 28.8333 274.494 29.1669 274.494 cv
77.0153 274.494 li
77.3489 274.494 77.6615 274.316 77.8329 274.029 cv
77.995 273.758 78.0105 273.412 77.8987 273.175 cv
61.1159 244.62 li
45.0657 244.62 li
55.8654 227.224 mo
50.317 227.224 li
50.317 225.155 li
50.3231 225.155 li
50.3231 223.783 li
55.8654 223.783 li
55.8654 225.155 li
55.8654 227.224 li
57.3551 222.412 mo
57.2369 222.412 li
53.091 222.412 li
48.9452 222.412 li
48.8268 222.412 li
48.5469 222.412 48.3201 222.185 48.3201 221.905 cv
48.3201 219.574 li
48.3201 219.295 48.5469 219.068 48.8268 219.068 cv
53.091 219.068 li
57.3551 219.068 li
57.6351 219.068 57.8621 219.295 57.8621 219.574 cv
57.8621 221.905 li
57.8621 222.185 57.6351 222.412 57.3551 222.412 cv
f
191.124 273.96 mo
166.858 273.96 147.187 254.289 147.187 230.023 cv
147.187 205.758 166.858 186.086 191.124 186.086 cv
215.389 186.086 235.061 205.758 235.061 230.023 cv
235.061 254.289 215.389 273.96 191.124 273.96 cv
208.266 204.227 mo
203.224 204.227 199.136 207.394 199.136 211.3 cv
199.136 233.569 li
199.136 255.838 li
199.136 259.744 203.224 262.91 208.266 262.91 cv
213.31 262.91 217.397 259.744 217.397 255.838 cv
217.397 233.569 li
217.397 211.3 li
217.397 207.394 213.31 204.227 208.266 204.227 cv
182.636 204.228 mo
177.591 204.228 173.505 207.393 173.505 211.3 cv
173.505 233.569 li
173.505 255.838 li
173.505 259.744 177.591 262.91 182.636 262.91 cv
187.68 262.91 191.765 259.744 191.765 255.838 cv
191.765 233.569 li
191.765 211.3 li
191.765 207.393 187.68 204.228 182.636 204.228 cv
f
131.574 281.724 mo
126.644 281.724 122.644 277.727 122.644 272.795 cv
122.644 267.863 126.644 263.865 131.574 263.865 cv
136.506 263.865 140.504 267.863 140.504 272.795 cv
140.504 277.727 136.506 281.724 131.574 281.724 cv
.301961 .478431 .537255 rgb
f
431.833 179.713 mo
426.901 179.713 422.903 175.715 422.903 170.783 cv
422.903 165.852 426.901 161.853 431.833 161.853 cv
436.764 161.853 440.762 165.852 440.762 170.783 cv
440.762 175.715 436.764 179.713 431.833 179.713 cv
.258824 .635294 .729412 rgb
f
14.2317 293.146 mo
10.1371 293.146 6.81775 289.826 6.81775 285.732 cv
6.81775 281.638 10.1371 278.318 14.2317 278.318 cv
14.4191 278.318 14.6052 278.325 14.7891 278.339 cv
16.8184 280.812 19.1074 283.064 21.6148 285.053 cv
21.6351 285.277 21.6454 285.503 21.6454 285.732 cv
21.6454 289.826 18.326 293.146 14.2317 293.146 cv
f
21.6148 285.053 mo
19.1074 283.064 16.8184 280.812 14.7891 278.339 cv
18.3986 278.607 21.2885 281.46 21.6148 285.053 cv
.266667 .647059 .733333 rgb
f
207.108 177.934 mo
202.176 177.934 198.178 173.936 198.178 169.005 cv
198.178 164.073 202.176 160.075 207.108 160.075 cv
212.04 160.075 216.038 164.073 216.038 169.005 cv
216.038 173.936 212.04 177.934 207.108 177.934 cv
.258824 .635294 .729412 rgb
f
40.6037 186.704 mo
34.0412 186.704 28.7189 181.383 28.7189 174.819 cv
28.7189 168.255 34.0412 162.934 40.6037 162.934 cv
47.1681 162.934 52.4884 168.255 52.4884 174.819 cv
52.4884 181.383 47.1681 186.704 40.6037 186.704 cv
.501961 .678431 .737255 rgb
f
308.264 284.68 mo
301.7 284.68 296.38 279.358 296.38 272.796 cv
296.38 266.231 301.7 260.909 308.264 260.909 cv
314.829 260.909 320.149 266.231 320.149 272.796 cv
320.149 279.358 314.829 284.68 308.264 284.68 cv
f
293.552 244.938 mo
293.552 247.715 291.3 249.967 288.522 249.967 cv
285.743 249.967 283.491 247.715 283.491 244.938 cv
283.491 242.159 285.743 239.907 288.522 239.907 cv
291.3 239.907 293.552 242.159 293.552 244.938 cv
cp
.427451 .823529 .901961 rgb
f
118.106 283.235 mo
118.106 286.014 115.854 288.266 113.075 288.266 cv
110.298 288.266 108.046 286.014 108.046 283.235 cv
108.046 280.457 110.298 278.205 113.075 278.205 cv
115.854 278.205 118.106 280.457 118.106 283.235 cv
cp
.00392157 .352941 .470588 rgb
f
319.516 174.819 mo
315.163 174.819 311.634 171.289 311.634 166.934 cv
311.634 162.581 315.163 159.051 319.516 159.051 cv
323.872 159.051 327.401 162.581 327.401 166.934 cv
327.401 171.289 323.872 174.819 319.516 174.819 cv
.501961 .678431 .737255 rgb
f
352.999 170.783 mo
351.331 170.783 349.977 169.43 349.977 167.762 cv
349.977 166.092 351.331 164.74 352.999 164.74 cv
354.669 164.74 356.02 166.092 356.02 167.762 cv
356.02 169.43 354.669 170.783 352.999 170.783 cv
.258824 .635294 .729412 rgb
f
437.136 276.469 mo
437.136 278.139 435.785 279.49 434.115 279.49 cv
432.447 279.49 431.093 278.139 431.093 276.469 cv
431.093 274.801 432.447 273.447 434.115 273.447 cv
435.785 273.447 437.136 274.801 437.136 276.469 cv
cp
1 1 1 rgb
f
117.126 240.778 mo
117.126 244.665 113.979 247.812 110.091 247.812 cv
106.208 247.812 103.057 244.665 103.057 240.778 cv
103.057 236.894 106.208 233.743 110.091 233.743 cv
113.979 233.743 117.126 236.894 117.126 240.778 cv
cp
f
16.8269 196.992 mo
16.8269 198.662 15.4734 200.014 13.8054 200.014 cv
12.1355 200.014 10.784 198.662 10.784 196.992 cv
10.784 195.323 12.1355 193.971 13.8054 193.971 cv
15.4734 193.971 16.8269 195.323 16.8269 196.992 cv
cp
.427451 .823529 .901961 rgb
f
246.29 264.564 mo
243.513 264.564 241.261 262.312 241.261 259.535 cv
241.261 256.757 243.513 254.505 246.29 254.505 cv
249.067 254.505 251.319 256.757 251.319 259.535 cv
251.319 262.312 249.067 264.564 246.29 264.564 cv
.301961 .478431 .537255 rgb
f
172.769 180.979 mo
169.992 180.979 167.74 178.727 167.74 175.95 cv
167.74 173.172 169.992 170.92 172.769 170.92 cv
175.547 170.92 177.798 173.172 177.798 175.95 cv
177.798 178.727 175.547 180.979 172.769 180.979 cv
f
194.826 283.664 mo
196.296 283.664 197.277 283.216 197.277 281.549 cv
197.277 280.065 196.338 279.532 194.854 279.532 cv
193.607 279.532 li
193.607 283.664 li
194.826 283.664 li
cp
194.868 278.579 mo
197.165 278.579 198.566 279.518 198.566 281.535 cv
198.566 283.734 196.983 284.631 194.868 284.631 cv
193.607 284.631 li
193.607 288.217 li
192.402 288.217 li
192.402 278.579 li
194.868 278.579 li
cp
1 1 1 rgb
f
201.699 283.65 mo
201.699 288.217 li
200.494 288.217 li
200.494 278.579 li
201.699 278.579 li
201.699 282.642 li
205.887 282.642 li
205.887 278.579 li
207.106 278.579 li
207.106 288.217 li
205.887 288.217 li
205.887 283.65 li
201.699 283.65 li
cp
f
212.522 279.588 mo
210.939 284.757 li
214.09 284.757 li
212.522 279.588 li
cp
210.645 285.751 mo
209.888 288.217 li
208.656 288.217 li
211.779 278.579 li
213.32 278.579 li
216.43 288.217 li
215.141 288.217 li
214.399 285.751 li
210.645 285.751 li
cp
f
220.6 283.132 mo
221.987 283.132 222.785 282.613 222.785 281.283 cv
222.785 280.065 222.084 279.532 220.446 279.532 cv
219.185 279.532 li
219.185 283.132 li
220.6 283.132 li
cp
219.185 284.07 mo
219.185 288.217 li
217.98 288.217 li
217.98 278.579 li
220.459 278.579 li
222.841 278.579 224.074 279.504 224.074 281.283 cv
224.074 282.655 223.345 283.454 221.972 283.86 cv
224.578 288.217 li
223.135 288.217 li
220.782 284.07 li
219.185 284.07 li
cp
f
233.762 288.217 mo
233.397 283.804 li
233.258 282.277 233.145 280.624 233.132 279.813 cv
230.96 287.11 li
229.826 287.11 li
227.557 279.798 li
227.543 280.891 227.459 282.445 227.332 283.874 cv
226.996 288.217 li
225.848 288.217 li
226.66 278.579 li
228.313 278.579 li
230.428 285.709 li
232.445 278.579 li
234.098 278.579 li
234.938 288.217 li
233.762 288.217 li
cp
f
240.018 279.588 mo
238.435 284.757 li
241.586 284.757 li
240.018 279.588 li
cp
238.141 285.751 mo
237.384 288.217 li
236.151 288.217 li
239.274 278.579 li
240.815 278.579 li
243.926 288.217 li
242.637 288.217 li
241.895 285.751 li
238.141 285.751 li
cp
f
251.022 279.35 mo
250.364 280.134 li
249.748 279.644 249.173 279.42 248.473 279.42 cv
246.96 279.42 245.714 280.442 245.714 283.398 cv
245.714 286.214 246.918 287.348 248.459 287.348 cv
249.384 287.348 249.972 286.956 250.518 286.536 cv
251.135 287.32 li
250.602 287.866 249.691 288.385 248.417 288.385 cv
246.105 288.385 244.425 286.634 244.425 283.398 cv
244.425 280.12 246.218 278.411 248.403 278.411 cv
249.594 278.411 250.266 278.747 251.022 279.35 cv
cp
f
255.852 288.217 mo
254.618 288.217 li
254.618 284.505 li
251.522 278.579 li
252.867 278.579 li
255.277 283.44 li
257.672 278.579 li
258.947 278.579 li
255.852 284.49 li
255.852 288.217 li
cp
f
208.266 262.91 mo
203.224 262.91 199.136 259.744 199.136 255.838 cv
199.136 233.569 li
199.136 211.3 li
199.136 207.394 203.224 204.227 208.266 204.227 cv
213.31 204.227 217.397 207.394 217.397 211.3 cv
217.397 233.569 li
217.397 255.838 li
217.397 259.744 213.31 262.91 208.266 262.91 cv
.0196078 .321569 .411765 rgb
f
182.636 262.91 mo
177.591 262.91 173.505 259.744 173.505 255.838 cv
173.505 233.569 li
173.505 211.3 li
173.505 207.393 177.591 204.228 182.636 204.228 cv
187.68 204.228 191.765 207.393 191.765 211.3 cv
191.765 233.569 li
191.765 255.838 li
191.765 259.744 187.68 262.91 182.636 262.91 cv
f
202.783 198.744 mo
197.741 198.744 193.654 201.911 193.654 205.818 cv
193.654 228.087 li
193.654 250.355 li
193.654 254.261 197.741 257.427 202.783 257.427 cv
207.827 257.427 211.914 254.261 211.914 250.355 cv
211.914 228.087 li
211.914 205.818 li
211.914 201.911 207.827 198.744 202.783 198.744 cv
cp
.756863 .152941 .176471 rgb
f
202.783 199.261 mo
198.065 199.261 194.24 202.371 194.24 206.209 cv
194.24 228.087 li
211.326 228.087 li
211.326 206.209 li
211.326 202.371 207.502 199.261 202.783 199.261 cv
cp
.427451 .823529 .901961 rgb
f
202.783 256.91 mo
198.065 256.91 194.24 253.799 194.24 249.962 cv
194.24 228.087 li
211.326 228.087 li
211.326 249.962 li
211.326 253.799 207.502 256.91 202.783 256.91 cv
cp
.756863 .152941 .176471 rgb
f
208.71 207.323 mo
208.144 207.323 207.684 208.156 207.684 209.182 cv
207.684 228.087 li
209.734 228.087 li
209.734 209.182 li
209.734 208.156 209.275 207.323 208.71 207.323 cv
cp
1 1 1 rgb
f
206.644 253.469 mo
206.076 253.469 207.684 252.744 207.684 245.768 cv
207.684 228.087 li
209.734 228.087 li
209.734 246.311 li
209.734 251.453 207.209 253.469 206.644 253.469 cv
cp
f
177.153 257.427 mo
182.197 257.427 186.283 254.261 186.283 250.355 cv
186.283 228.087 li
186.283 205.818 li
186.283 201.91 182.197 198.745 177.153 198.745 cv
172.108 198.745 168.022 201.91 168.022 205.818 cv
168.022 228.087 li
168.022 250.355 li
168.022 254.261 172.108 257.427 177.153 257.427 cv
cp
.470588 .6 .678431 rgb
f
177.153 256.912 mo
181.871 256.912 185.697 253.799 185.697 249.962 cv
185.697 228.087 li
168.609 228.087 li
168.609 249.962 li
168.609 253.799 172.434 256.912 177.153 256.912 cv
cp
.427451 .823529 .901961 rgb
f
177.153 199.262 mo
181.871 199.262 185.697 202.371 185.697 206.209 cv
185.697 228.087 li
168.609 228.087 li
168.609 206.209 li
168.609 202.371 172.434 199.262 177.153 199.262 cv
cp
.470588 .6 .678431 rgb
f
171.226 248.85 mo
171.792 248.85 172.25 248.017 172.25 246.99 cv
172.25 228.087 li
170.201 228.087 li
170.201 246.99 li
170.201 248.017 170.661 248.85 171.226 248.85 cv
cp
1 1 1 rgb
f
173.293 202.705 mo
173.859 202.705 172.25 203.428 172.25 210.404 cv
172.25 228.087 li
170.201 228.087 li
170.201 209.863 li
170.201 204.721 172.727 202.705 173.293 202.705 cv
cp
f
415.356 202.075 mo
414.924 202.075 414.477 202.058 414.017 202.023 cv
411.632 201.838 409.04 201.243 406.755 200.584 cv
410.225 200.546 414.103 199.263 415.639 197.626 cv
415.803 197.454 li
419.683 197.947 422.939 198.428 423.185 198.674 cv
423.975 199.463 420.777 202.075 415.356 202.075 cv
.0196078 .321569 .411765 rgb
f
411.169 206.452 mo
410.047 206.452 408.775 206.294 407.435 205.887 cv
405.712 205.363 403.956 204.522 402.427 203.669 cv
403.271 203.834 404.184 203.92 405.13 203.92 cv
405.132 203.92 li
407.125 203.92 408.971 203.54 410.063 202.904 cv
410.304 202.765 li
413.113 203.783 415.435 204.681 415.55 204.905 cv
415.839 205.469 413.967 206.453 411.169 206.452 cv
f
404.73 209.323 mo
403.463 209.323 401.846 209.006 400.319 208.081 cv
399.164 207.382 398.09 206.422 397.191 205.484 cv
398.426 206.03 399.969 206.357 401.442 206.357 cv
402.225 206.357 402.936 206.26 403.499 206.078 cv
403.736 206.002 li
405.563 207.276 407.04 208.367 407.054 208.57 cv
407.076 208.946 406.111 209.323 404.73 209.323 cv
f
397.63 210.612 mo
396.458 210.612 394.602 210.099 393.344 208.638 cv
392.671 207.855 392.161 206.873 391.781 205.936 cv
393.048 207 394.999 207.621 396.391 207.621 cv
396.536 207.621 396.673 207.613 396.81 207.601 cv
397.01 207.583 li
398.008 208.958 398.784 210.111 398.715 210.279 cv
398.634 210.483 398.218 210.612 397.63 210.612 cv
f
391.557 211.857 mo
390.876 211.857 388.975 210.709 388.309 208.72 cv
388.04 207.913 387.948 207.019 387.936 206.206 cv
388.557 207.422 389.806 208.555 390.819 209.041 cv
390.924 209.09 391.027 209.135 391.13 209.174 cv
391.281 209.232 li
391.619 210.58 391.856 211.694 391.76 211.793 cv
391.718 211.836 391.649 211.857 391.557 211.857 cv
f
427.851 193.112 mo
427.404 192.321 426.939 191.544 426.454 190.779 cv
428.214 190.825 429.392 190.911 429.531 191.059 cv
429.834 191.381 429.229 192.225 427.851 193.112 cv
.00392157 .298039 .403922 rgb
f
413.994 195.89 mo
412.874 195.89 411.74 195.873 410.641 195.845 cv
414.509 194.634 416.614 192.467 417.252 190.879 cv
417.301 190.752 li
418.805 190.74 420.323 190.731 421.753 190.731 cv
423.516 190.731 425.146 190.744 426.454 190.779 cv
426.939 191.544 427.404 192.321 427.851 193.112 cv
426.356 194.073 423.952 195.086 420.808 195.54 cv
419.008 195.801 416.539 195.89 413.994 195.89 cv
.0196078 .321569 .411765 rgb
f
354.711 202.075 mo
349.291 202.074 346.092 199.463 346.881 198.674 cv
347.127 198.428 350.383 197.947 354.262 197.454 cv
354.425 197.626 li
355.964 199.263 359.84 200.546 363.312 200.584 cv
361.026 201.243 358.434 201.838 356.05 202.023 cv
355.59 202.058 355.144 202.075 354.711 202.075 cv
f
358.897 206.452 mo
356.099 206.452 354.228 205.469 354.516 204.905 cv
354.631 204.681 356.953 203.783 359.762 202.765 cv
360.003 202.904 li
361.096 203.54 362.94 203.92 364.936 203.92 cv
365.879 203.92 366.795 203.834 367.639 203.669 cv
366.109 204.522 364.354 205.363 362.632 205.887 cv
361.291 206.294 360.019 206.452 358.897 206.452 cv
f
365.336 209.323 mo
363.955 209.323 362.99 208.946 363.011 208.57 cv
363.024 208.367 364.501 207.276 366.328 206.002 cv
366.567 206.078 li
367.129 206.26 367.84 206.357 368.624 206.357 cv
370.097 206.357 371.64 206.03 372.874 205.484 cv
371.974 206.422 370.902 207.382 369.748 208.081 cv
368.221 209.006 366.604 209.323 365.336 209.323 cv
f
372.435 210.612 mo
371.846 210.612 371.429 210.483 371.347 210.279 cv
371.281 210.111 372.059 208.958 373.055 207.583 cv
373.256 207.601 li
373.393 207.613 373.532 207.621 373.676 207.621 cv
375.066 207.621 377.018 207 378.284 205.936 cv
377.904 206.873 377.395 207.855 376.722 208.638 cv
375.465 210.099 373.608 210.612 372.435 210.612 cv
f
378.509 211.857 mo
378.417 211.857 378.347 211.836 378.305 211.793 cv
378.207 211.694 378.449 210.58 378.785 209.232 cv
378.936 209.174 li
379.039 209.135 379.143 209.09 379.247 209.041 cv
380.262 208.555 381.507 207.422 382.128 206.206 cv
382.119 207.019 382.025 207.913 381.755 208.72 cv
381.091 210.709 379.192 211.857 378.509 211.857 cv
f
356.072 195.89 mo
353.527 195.89 351.057 195.801 349.258 195.54 cv
343.215 194.667 339.903 191.73 340.534 191.059 cv
340.776 190.802 344.179 190.731 348.312 190.731 cv
349.742 190.731 351.259 190.74 352.763 190.752 cv
352.814 190.879 li
353.453 192.467 355.557 194.634 359.424 195.845 cv
358.326 195.873 357.192 195.89 356.072 195.89 cv
f
385.056 275.768 mo
385.014 275.768 384.965 275.41 384.91 274.744 cv
385.008 274.735 385.107 274.726 385.205 274.717 cv
385.15 275.4 385.1 275.768 385.056 275.768 cv
.00392157 .298039 .403922 rgb
f
384.91 274.744 mo
384.827 273.724 384.731 271.979 384.627 269.683 cv
383.474 270.076 382.274 270.373 381.125 270.581 cv
382.28 270.072 383.505 269.423 384.58 268.632 cv
384.569 268.371 384.557 268.098 384.545 267.824 cv
384.159 268.136 383.719 268.44 383.245 268.733 cv
380.949 267.483 379.787 265.812 379.787 263.765 cv
379.787 261.112 381.347 259.206 383.697 257.957 cv
383.857 257.871 384.008 257.803 384.164 257.727 cv
384.157 257.518 384.15 257.303 384.142 257.091 cv
383.867 257.245 383.378 257.517 383.04 257.707 cv
382.369 258.089 381.644 258.672 381.644 258.672 cv
379.858 257.664 379.105 256.396 379.112 254.536 cv
379.112 252.938 379.719 251.701 380.959 250.737 cv
381.813 250.081 382.865 249.628 383.884 249.263 cv
383.876 249.028 383.869 248.79 383.862 248.553 cv
382.777 248.934 381.659 249.401 380.726 250.079 cv
378.682 248.99 377.751 247.51 377.718 245.296 cv
377.66 241.585 380.158 240.245 383.563 238.779 cv
383.557 238.575 383.551 238.372 383.546 238.168 cv
383.258 238.278 382.964 238.395 382.685 238.514 cv
381.964 238.827 380.922 239.424 380.922 239.424 cv
377.437 237.754 375.955 235.688 375.955 232.514 cv
375.955 230.131 377.002 228.312 379.159 226.949 cv
380.292 226.231 381.691 225.685 383.18 225.244 cv
383.173 225.013 383.167 224.783 383.161 224.553 cv
381.424 225.053 380.033 225.624 378.911 226.315 cv
373.269 225.317 367.897 223.799 367.897 219.249 cv
367.897 216.137 369.891 213.96 372.897 213.552 cv
372.898 213.552 li
373.324 213.477 373.744 213.443 374.153 213.443 cv
377.412 213.443 379.99 215.584 379.924 216.214 cv
379.881 216.635 379.049 216.795 378.078 216.795 cv
377.418 216.795 376.693 216.721 376.109 216.605 cv
374.663 216.315 373.864 215.469 373.864 215.469 cv
373.864 215.469 373.351 216.425 374.05 217.095 cv
374.11 217.077 375.165 216.76 376.041 216.76 cv
376.135 216.76 376.228 216.763 376.316 216.771 cv
377.15 216.846 377.927 217.55 378.63 217.55 cv
378.666 217.55 378.701 217.548 378.737 217.545 cv
379.362 217.477 379.89 217.08 380.095 217.08 cv
380.102 217.08 380.108 217.08 380.114 217.081 cv
380.301 217.11 380.532 217.365 380.114 217.556 cv
379.723 217.734 379.288 217.966 378.718 217.966 cv
378.675 217.966 378.632 217.965 378.587 217.962 cv
377.634 217.905 376.825 217.248 376.138 217.248 cv
375.729 217.248 375.161 217.394 374.787 217.506 cv
376.096 217.937 378.479 218.021 378.305 218.335 cv
378.178 218.565 377.564 218.75 376.582 218.75 cv
376.002 218.75 375.293 218.685 374.481 218.528 cv
372.842 218.21 371.922 217.199 371.911 217.187 cv
371.376 217.53 370.908 218.195 370.908 219.474 cv
370.908 222.261 376.13 223.143 381.184 223.998 cv
381.906 224.117 382.549 224.234 383.155 224.347 cv
382.954 216.923 382.784 210.14 382.672 205.194 cv
382.502 205.179 382.342 205.156 382.175 205.138 cv
382.179 205.211 li
381.738 206.592 380.184 208.11 378.925 208.577 cv
379.262 207.25 379.669 205.765 379.94 204.795 cv
379.557 204.716 379.194 204.624 378.834 204.529 cv
378.786 204.686 378.733 204.847 378.676 205.013 cv
377.625 206.26 375.424 207.118 373.783 207.118 cv
373.651 207.118 373.522 207.113 373.397 207.101 cv
374.295 205.875 375.312 204.539 376.055 203.573 cv
375.715 203.424 375.381 203.273 375.068 203.111 cv
374.764 203.505 374.381 203.979 373.935 204.482 cv
372.597 205.309 370.663 205.743 369.019 205.743 cv
368.287 205.743 367.612 205.657 367.073 205.482 cv
369.126 204.058 371.51 202.47 372.752 201.647 cv
372.467 201.432 372.196 201.217 371.942 200.996 cv
371.369 201.407 370.295 202.15 368.937 202.961 cv
367.785 203.319 366.461 203.483 365.176 203.483 cv
363.283 203.483 361.475 203.128 360.423 202.515 cv
364.532 201.036 369.475 199.363 370.136 199.14 cv
369.955 198.917 369.777 198.695 369.622 198.482 cv
368.815 198.805 367.086 199.472 364.93 200.145 cv
364.564 200.176 364.192 200.191 363.816 200.191 cv
360.297 200.191 356.494 198.894 355.035 197.342 cv
360.572 196.644 367.159 195.936 368.127 195.832 cv
368.034 195.6 367.988 195.457 367.988 195.457 cv
367.988 195.457 364.613 195.61 360.903 195.812 cv
356.077 194.621 354.006 192.045 353.489 190.756 cv
356.537 190.757 360.629 190.83 362.751 190.83 cv
363.564 190.83 364.088 190.82 364.154 190.79 cv
364.545 190.615 367.446 189.277 370.452 189.277 cv
370.909 189.277 371.369 189.308 371.823 189.378 cv
377.188 190.218 377.934 194.227 375.158 196.903 cv
375.158 196.903 376.118 201.765 382.619 202.758 cv
382.547 199.33 382.516 197.227 382.541 197.087 cv
382.626 196.607 383.004 195.817 383.531 195.198 cv
383.064 195.018 382.638 194.758 382.273 194.436 cv
381.921 193.119 382.178 191.647 383.112 190.465 cv
384.059 189.266 385.478 188.634 386.898 188.634 cv
387.321 188.634 387.743 188.69 388.153 188.803 cv
388.802 189.512 389.202 190.443 389.202 191.467 cv
389.202 193.163 388.113 194.605 386.58 195.194 cv
387.11 195.814 387.49 196.606 387.576 197.087 cv
387.602 197.226 387.57 199.328 387.498 202.751 cv
393.953 201.741 394.906 196.903 394.906 196.903 cv
392.129 194.227 392.878 190.218 398.246 189.378 cv
398.7 189.308 399.159 189.277 399.616 189.277 cv
402.62 189.277 405.521 190.615 405.911 190.79 cv
405.977 190.82 406.501 190.83 407.314 190.83 cv
409.437 190.83 413.53 190.757 416.578 190.756 cv
416.06 192.045 413.987 194.621 409.162 195.812 cv
405.454 195.61 402.078 195.457 402.078 195.457 cv
402.078 195.457 402.032 195.6 401.939 195.832 cv
402.91 195.936 409.496 196.644 415.03 197.342 cv
413.57 198.894 409.769 200.191 406.25 200.191 cv
405.874 200.191 405.502 200.176 405.136 200.145 cv
402.979 199.472 401.25 198.805 400.444 198.481 cv
400.289 198.695 400.111 198.917 399.929 199.14 cv
400.593 199.364 405.535 201.037 409.644 202.515 cv
408.592 203.128 406.783 203.483 404.889 203.483 cv
403.604 203.483 402.28 203.319 401.128 202.961 cv
399.771 202.15 398.698 201.407 398.124 200.996 cv
397.87 201.217 397.599 201.432 397.314 201.647 cv
398.556 202.47 400.94 204.058 402.99 205.482 cv
402.451 205.657 401.777 205.743 401.045 205.743 cv
399.402 205.743 397.467 205.309 396.129 204.482 cv
395.684 203.979 395.302 203.506 394.997 203.111 cv
394.684 203.273 394.35 203.425 394.011 203.574 cv
394.753 204.539 395.771 205.875 396.667 207.101 cv
396.542 207.113 396.413 207.118 396.281 207.118 cv
394.641 207.118 392.439 206.26 391.39 205.013 cv
391.333 204.847 391.28 204.686 391.232 204.53 cv
390.872 204.624 390.508 204.716 390.125 204.795 cv
390.394 205.766 390.802 207.25 391.141 208.577 cv
389.881 208.11 388.33 206.592 387.887 205.211 cv
387.891 205.138 li
387.74 205.154 387.599 205.178 387.445 205.191 cv
387.333 210.139 387.162 216.923 386.961 224.349 cv
387.629 224.222 388.291 224.104 388.931 223.998 cv
393.987 223.143 399.207 222.261 399.207 219.474 cv
399.207 218.193 398.739 217.529 398.203 217.186 cv
398.198 217.192 397.277 218.209 395.632 218.528 cv
394.821 218.685 394.113 218.75 393.533 218.75 cv
392.552 218.75 391.936 218.565 391.809 218.335 cv
391.635 218.021 394.019 217.937 395.327 217.506 cv
394.953 217.394 394.386 217.248 393.978 217.248 cv
393.292 217.248 392.483 217.905 391.527 217.962 cv
391.483 217.965 391.44 217.966 391.397 217.966 cv
390.828 217.966 390.392 217.733 390.001 217.556 cv
389.585 217.365 389.813 217.11 390.001 217.081 cv
390.007 217.08 390.014 217.08 390.02 217.08 cv
390.225 217.08 390.752 217.477 391.377 217.545 cv
391.412 217.548 391.448 217.55 391.484 217.55 cv
392.187 217.55 392.965 216.846 393.796 216.771 cv
393.886 216.763 393.979 216.76 394.074 216.76 cv
394.949 216.76 395.995 217.073 396.064 217.094 cv
396.764 216.424 396.253 215.469 396.253 215.469 cv
396.253 215.469 395.452 216.315 394.006 216.605 cv
393.421 216.721 392.697 216.795 392.036 216.795 cv
391.065 216.795 390.233 216.635 390.19 216.214 cv
390.125 215.584 392.704 213.443 395.962 213.443 cv
396.371 213.443 396.791 213.477 397.217 213.552 cv
400.513 213.929 402.073 216.156 402.073 219.331 cv
402.073 223.914 396.773 225.338 391.077 226.336 cv
389.71 226.574 388.276 226.812 386.886 227.095 cv
386.88 227.323 386.873 227.55 386.867 227.779 cv
388.388 227.461 389.689 227.262 391.062 227.014 cv
393.147 228.374 394.162 230.169 394.162 232.514 cv
394.162 235.639 392.723 237.69 389.352 239.348 cv
388.314 239.792 387.366 240.168 386.501 240.508 cv
386.495 240.707 386.489 240.905 386.483 241.105 cv
386.97 240.917 387.519 240.705 387.739 240.619 cv
388.188 240.441 389.173 240.012 389.173 240.012 cv
391.442 241.322 392.432 242.949 392.398 245.296 cv
392.345 248.801 389.956 250.16 386.558 251.189 cv
386.422 251.231 386.297 251.272 386.165 251.313 cv
386.158 251.551 386.15 251.785 386.142 252.021 cv
386.86 251.791 388.1 251.45 389.314 250.868 cv
390.449 251.808 391.003 253.012 391.007 254.536 cv
391.018 257.899 388.497 258.66 385.875 259.86 cv
385.869 260.036 385.863 260.213 385.857 260.387 cv
386.532 260.045 388.197 259.352 388.353 259.298 cv
389.68 260.542 390.328 262.032 390.328 263.765 cv
390.328 265.86 389.108 267.562 386.708 268.82 cv
386.322 269.022 385.916 269.2 385.501 269.368 cv
385.392 271.798 385.292 273.646 385.205 274.717 cv
385.107 274.726 385.008 274.735 384.91 274.744 cv
384.27 260.712 mo
383.182 261.433 382.43 262.4 382.457 263.77 cv
382.49 265.378 383.372 266.734 384.545 267.824 cv
384.458 265.752 384.365 263.356 384.27 260.712 cv
385.844 260.744 mo
385.749 263.372 385.656 265.755 385.569 267.818 cv
386.772 266.701 387.621 265.356 387.659 263.77 cv
387.682 262.644 387.139 261.547 385.844 260.744 cv
386.14 252.088 mo
386.086 253.75 386.032 255.366 385.978 256.924 cv
387.372 256.342 388.342 255.859 388.337 254.538 cv
388.334 253.253 387.315 252.586 386.14 252.088 cv
383.975 252.087 mo
382.636 252.661 381.784 253.355 381.781 254.538 cv
381.775 255.738 382.607 256.344 384.136 256.895 cv
384.082 255.345 384.029 253.739 383.975 252.087 cv
383.649 241.66 mo
381.484 242.612 380.359 243.482 380.387 245.259 cv
380.415 247.014 381.708 247.787 383.859 248.484 cv
383.789 246.255 383.719 243.971 383.649 241.66 cv
386.468 241.605 mo
386.398 243.933 386.327 246.235 386.256 248.481 cv
388.561 247.738 389.703 246.911 389.73 245.259 cv
389.758 243.42 388.075 242.233 386.468 241.605 cv
383.256 228.031 mo
380.579 228.928 378.622 230.253 378.622 232.514 cv
378.622 235.126 380.164 236.136 383.215 237.519 cv
383.324 237.567 383.43 237.618 383.531 237.666 cv
383.436 234.436 383.344 231.196 383.256 228.031 cv
386.86 228.038 mo
386.772 231.191 386.68 234.418 386.586 237.635 cv
389.105 236.689 391.491 235.483 391.491 232.514 cv
391.491 230.05 389.224 228.836 386.86 228.038 cv
394.362 214 mo
394.237 214 394.109 214.017 393.988 214.055 cv
393.548 214.195 393.153 214.525 393.21 214.695 cv
393.245 214.812 393.537 214.902 393.859 214.902 cv
394.009 214.902 394.164 214.882 394.303 214.837 cv
394.74 214.699 395.087 214.412 395.03 214.24 cv
394.99 214.115 394.691 214 394.362 214 cv
375.753 214 mo
375.424 214 375.126 214.115 375.085 214.24 cv
375.031 214.412 375.373 214.699 375.812 214.837 cv
375.951 214.882 376.106 214.902 376.256 214.902 cv
376.578 214.902 376.871 214.812 376.907 214.695 cv
376.962 214.525 376.566 214.195 376.127 214.055 cv
376.006 214.017 375.878 214 375.753 214 cv
.0196078 .321569 .411765 rgb
f
381.652 193.791 mo
381.09 193.107 380.755 192.241 380.755 191.299 cv
380.755 189.081 382.609 187.282 384.899 187.282 cv
385.887 187.282 386.795 187.619 387.506 188.18 cv
387.255 188.141 386.997 188.119 386.737 188.119 cv
385.137 188.119 383.653 188.838 382.667 190.084 cv
381.82 191.16 381.465 192.484 381.652 193.791 cv
f
388.989 270.581 mo
388.089 270.417 387.071 270.197 386.05 269.882 cv
386.035 269.875 li
386.317 269.753 386.59 269.628 386.85 269.494 cv
387.578 269.921 388.312 270.281 388.989 270.581 cv
f
418.175 193.664 mo
417.929 193.418 414.673 192.938 410.794 192.445 cv
410.63 192.617 li
409.094 194.254 405.216 195.537 401.745 195.575 cv
404.031 196.234 406.623 196.829 409.008 197.013 cv
415.232 197.493 419.029 194.517 418.175 193.664 cv
cp
.756863 .152941 .176471 rgb
f
396.795 190.809 mo
396.795 190.809 404.032 191.577 410.02 192.333 cv
408.405 194.05 403.922 195.455 400.126 195.136 cv
397.133 194.201 394.935 193.268 394.935 193.268 cv
396.795 190.809 li
cp
f
410.541 199.895 mo
410.425 199.671 408.104 198.773 405.294 197.756 cv
405.054 197.895 li
403.961 198.53 402.115 198.911 400.123 198.911 cv
400.121 198.911 li
399.175 198.911 398.262 198.824 397.417 198.66 cv
398.946 199.512 400.703 200.354 402.426 200.877 cv
407.106 202.3 410.946 200.686 410.541 199.895 cv
cp
f
394.84 194.104 mo
394.84 194.104 400.22 195.917 404.634 197.506 cv
402.868 198.534 398.967 198.838 396.119 197.951 cv
394.081 196.734 392.656 195.652 392.656 195.652 cv
394.84 194.104 li
cp
f
398.727 200.992 mo
398.489 201.069 li
397.927 201.25 397.215 201.348 396.432 201.348 cv
394.96 201.348 393.416 201.021 392.181 200.474 cv
393.081 201.412 394.154 202.373 395.309 203.072 cv
398.501 205.004 402.086 204.282 402.045 203.56 cv
402.03 203.358 400.553 202.266 398.727 200.992 cv
cp
f
391.452 196.075 mo
391.452 196.075 395.059 198.444 397.981 200.472 cv
396.232 201.041 393.054 200.668 391.119 199.472 cv
389.938 198.136 389.194 197.009 389.194 197.009 cv
391.452 196.075 li
cp
f
392.001 202.573 mo
391.8 202.592 li
391.664 202.603 391.526 202.611 391.382 202.611 cv
389.99 202.611 388.039 201.99 386.772 200.927 cv
387.151 201.863 387.661 202.845 388.335 203.628 cv
390.224 205.823 393.463 205.879 393.705 205.27 cv
393.775 205.102 392.999 203.949 392.001 202.573 cv
cp
f
387.97 197.232 mo
387.97 197.232 390.031 199.866 391.657 202.092 cv
389.995 202.245 387.515 201.352 386.38 200.003 cv
385.922 198.672 385.743 197.596 385.743 197.596 cv
387.97 197.232 li
cp
f
386.272 204.222 mo
386.12 204.165 li
386.017 204.125 385.914 204.08 385.809 204.032 cv
384.797 203.545 383.548 202.413 382.927 201.196 cv
382.939 202.01 383.03 202.903 383.3 203.71 cv
384.056 205.969 386.403 207.142 386.75 206.784 cv
386.847 206.684 386.61 205.57 386.272 204.222 cv
cp
f
384.821 198.737 mo
384.821 198.737 385.572 201.378 386.131 203.568 cv
384.872 203.1 383.32 201.582 382.877 200.202 cv
382.92 199.072 383.092 198.223 383.092 198.223 cv
384.821 198.737 li
cp
f
424.521 186.049 mo
424.195 185.704 418.143 185.696 412.291 185.742 cv
412.242 185.87 li
411.605 187.457 409.5 189.624 405.632 190.836 cv
409.227 190.926 413.207 190.906 415.798 190.53 cv
421.843 189.658 425.152 186.721 424.521 186.049 cv
cp
f
380.024 197.938 mo
388.731 197.938 389.897 191.893 389.897 191.893 cv
387.119 189.217 387.868 185.208 393.237 184.369 cv
396.67 183.833 400.452 185.579 400.902 185.781 cv
401.138 185.887 407.352 185.749 411.569 185.747 cv
411.05 187.035 408.978 189.612 404.153 190.803 cv
400.445 190.601 397.069 190.447 397.069 190.447 cv
397.069 190.447 394.048 200.288 380.024 200.288 cv
380.024 197.938 li
cp
f
341.871 193.664 mo
342.117 193.418 345.374 192.938 349.252 192.445 cv
349.415 192.617 li
350.954 194.254 354.83 195.537 358.303 195.575 cv
356.016 196.234 353.424 196.829 351.04 197.013 cv
344.816 197.493 341.019 194.517 341.871 193.664 cv
cp
f
363.251 190.809 mo
363.251 190.809 356.016 191.577 350.026 192.333 cv
351.64 194.05 356.125 195.455 359.92 195.136 cv
362.914 194.201 365.113 193.268 365.113 193.268 cv
363.251 190.809 li
cp
f
349.506 199.895 mo
349.621 199.671 351.943 198.773 354.753 197.756 cv
354.994 197.895 li
356.087 198.53 357.931 198.911 359.926 198.911 cv
360.869 198.911 361.785 198.824 362.63 198.66 cv
361.1 199.512 359.344 200.354 357.622 200.877 cv
352.939 202.3 349.103 200.686 349.506 199.895 cv
cp
f
365.206 194.104 mo
365.206 194.104 359.826 195.917 355.414 197.506 cv
357.18 198.534 361.078 198.838 363.927 197.951 cv
365.967 196.734 367.391 195.652 367.391 195.652 cv
365.206 194.104 li
cp
f
361.318 200.992 mo
361.558 201.069 li
362.119 201.25 362.831 201.348 363.615 201.348 cv
365.087 201.348 366.631 201.021 367.865 200.474 cv
366.964 201.412 365.892 202.373 364.738 203.072 cv
361.547 205.004 357.961 204.282 358.002 203.56 cv
358.015 203.358 359.492 202.266 361.318 200.992 cv
cp
f
368.595 196.075 mo
368.595 196.075 364.988 198.444 362.063 200.472 cv
363.814 201.041 366.992 200.668 368.926 199.472 cv
370.109 198.136 370.853 197.009 370.853 197.009 cv
368.595 196.075 li
cp
f
368.045 202.573 mo
368.246 202.592 li
368.383 202.603 368.523 202.611 368.666 202.611 cv
370.056 202.611 372.008 201.99 373.274 200.927 cv
372.895 201.863 372.386 202.845 371.712 203.628 cv
369.825 205.823 366.583 205.879 366.338 205.27 cv
366.271 205.102 367.049 203.949 368.045 202.573 cv
cp
f
372.076 197.232 mo
372.076 197.232 370.016 199.866 368.388 202.092 cv
370.051 202.245 372.53 201.352 373.667 200.003 cv
374.125 198.672 374.304 197.596 374.304 197.596 cv
372.076 197.232 li
cp
f
373.775 204.222 mo
373.926 204.165 li
374.03 204.125 374.133 204.08 374.238 204.032 cv
375.252 203.545 376.497 202.413 377.119 201.196 cv
377.109 202.01 377.016 202.903 376.746 203.71 cv
375.992 205.969 373.647 207.142 373.296 206.784 cv
373.197 206.684 373.439 205.57 373.775 204.222 cv
cp
f
375.225 198.737 mo
375.225 198.737 374.471 201.378 373.916 203.568 cv
375.174 203.1 376.728 201.582 377.17 200.202 cv
377.127 199.072 376.954 198.223 376.954 198.223 cv
375.225 198.737 li
cp
f
335.525 186.049 mo
335.851 185.704 341.904 185.696 347.754 185.742 cv
347.805 185.87 li
348.444 187.457 350.547 189.624 354.415 190.836 cv
350.819 190.926 346.839 190.906 344.249 190.53 cv
338.206 189.658 334.894 186.721 335.525 186.049 cv
cp
f
380.024 197.938 mo
371.316 197.938 370.148 191.893 370.148 191.893 cv
372.925 189.217 372.179 185.208 366.813 184.369 cv
363.377 183.833 359.595 185.579 359.144 185.781 cv
358.908 185.887 352.696 185.749 348.479 185.747 cv
348.997 187.035 351.067 189.612 355.893 190.803 cv
359.603 190.601 362.978 190.447 362.978 190.447 cv
362.978 190.447 365.999 200.288 380.024 200.288 cv
380.024 197.938 li
cp
f
382.567 192.078 mo
382.41 191.205 381.307 189.288 380.047 189.288 cv
378.787 189.288 377.687 191.205 377.531 192.078 cv
377.374 192.951 379.419 270.758 380.047 270.758 cv
380.677 270.758 382.725 192.951 382.567 192.078 cv
cp
f
377.658 185.075 mo
378.643 183.828 380.128 183.109 381.727 183.109 cv
381.988 183.109 382.245 183.132 382.496 183.17 cv
381.786 182.609 380.878 182.273 379.89 182.273 cv
377.599 182.273 375.745 184.071 375.745 186.289 cv
375.745 187.231 376.08 188.097 376.642 188.782 cv
376.456 187.475 376.81 186.151 377.658 185.075 cv
cp
f
377.263 189.426 mo
377.998 190.075 378.977 190.473 380.049 190.473 cv
382.336 190.473 384.192 188.675 384.192 186.457 cv
384.192 185.434 383.793 184.503 383.144 183.794 cv
381.354 183.299 379.33 183.9 378.103 185.456 cv
377.169 186.638 376.912 188.109 377.263 189.426 cv
cp
f
373.901 221.305 mo
375.115 220.559 376.623 219.948 378.565 219.42 cv
378.472 219.403 378.377 219.383 378.285 219.363 cv
377.64 219.242 376.95 219.117 376.174 218.989 cv
371.121 218.133 365.898 217.252 365.898 214.464 cv
365.898 212.441 367.069 211.951 367.824 211.849 cv
367.89 208.542 li
364.882 208.949 362.887 211.126 362.887 214.24 cv
362.887 218.789 368.259 220.307 373.901 221.305 cv
cp
1 .733333 .14902 rgb
f
383.979 265.572 mo
383.303 265.272 382.569 264.911 381.84 264.484 cv
381.581 264.618 381.307 264.743 381.025 264.866 cv
381.041 264.873 li
382.062 265.187 383.079 265.408 383.979 265.572 cv
cp
f
384.164 235.003 mo
386.433 236.313 387.423 237.94 387.389 240.287 cv
387.336 243.792 384.947 245.15 381.548 246.18 cv
378.798 247.035 376.776 247.697 376.771 249.528 cv
376.766 250.786 377.67 251.392 379.343 251.965 cv
379.343 251.965 378.521 252.422 378.031 252.697 cv
377.359 253.08 376.635 253.663 376.635 253.663 cv
374.848 252.654 374.095 251.386 374.102 249.526 cv
374.102 247.928 374.71 246.691 375.949 245.727 cv
377.365 244.64 379.338 244.079 380.768 243.626 cv
383.406 242.839 384.691 242.016 384.72 240.249 cv
384.753 238.148 382.55 236.898 380.78 236.36 cv
381.234 236.189 382.385 235.744 382.73 235.609 cv
383.179 235.432 384.164 235.003 384.164 235.003 cv
cp
f
375.912 234.414 mo
372.428 232.745 370.946 230.679 370.946 227.505 cv
370.946 225.122 371.992 223.303 374.149 221.94 cv
376.71 220.316 380.594 219.539 383.922 218.989 cv
388.977 218.133 394.197 217.252 394.197 214.464 cv
394.197 212.441 393.031 211.951 392.272 211.849 cv
392.208 208.542 li
395.504 208.92 397.064 211.147 397.064 214.322 cv
397.064 218.905 391.763 220.329 386.068 221.327 cv
380.422 222.309 373.612 223.278 373.612 227.505 cv
373.612 230.117 375.155 231.127 378.206 232.509 cv
378.664 232.714 379.1 232.948 379.1 232.948 cv
378.663 233.103 378.143 233.305 377.675 233.504 cv
376.954 233.818 375.912 234.414 375.912 234.414 cv
cp
f
383.344 254.289 mo
384.671 255.533 385.318 257.022 385.318 258.755 cv
385.318 260.85 384.098 262.552 381.699 263.811 cv
380.006 264.695 377.984 265.233 376.115 265.572 cv
379.104 264.255 382.572 262.01 382.65 258.76 cv
382.674 257.555 382.062 256.378 380.558 255.565 cv
380.424 255.493 383.143 254.358 383.344 254.289 cv
cp
f
378.575 233.76 mo
381.748 232.374 386.482 231.686 386.482 227.505 cv
386.482 224.876 383.904 223.664 381.379 222.868 cv
383.118 222.486 384.534 222.279 386.052 222.004 cv
388.137 223.364 389.153 225.16 389.153 227.505 cv
389.153 230.63 387.714 232.68 384.343 234.339 cv
378.465 236.848 375.331 237.286 375.377 240.249 cv
375.405 242.032 376.735 242.803 378.948 243.508 cv
377.834 243.895 376.677 244.371 375.717 245.07 cv
373.673 243.981 372.741 242.501 372.708 240.287 cv
372.65 236.568 375.159 235.23 378.575 233.76 cv
cp
f
378.688 252.947 mo
381.205 251.597 383.335 251.495 383.327 249.528 cv
383.324 248.211 382.255 247.542 381.043 247.04 cv
381.746 246.809 383.045 246.462 384.305 245.858 cv
385.439 246.799 385.993 248.002 385.997 249.526 cv
386.01 253.218 382.971 253.772 380.098 255.216 cv
378.573 255.972 377.414 257.059 377.448 258.76 cv
377.48 260.369 378.363 261.724 379.536 262.815 cv
379.15 263.126 378.709 263.431 378.236 263.724 cv
375.94 262.473 374.778 260.803 374.778 258.755 cv
374.778 256.103 376.338 254.196 378.688 252.947 cv
cp
f
388.978 209.046 mo
388.539 209.186 388.143 209.516 388.2 209.685 cv
388.252 209.856 388.854 209.969 389.293 209.828 cv
389.731 209.689 390.077 209.402 390.021 209.23 cv
389.965 209.059 389.418 208.905 388.978 209.046 cv
cp
393.195 212.176 mo
393.195 212.176 392.272 213.199 390.622 213.518 cv
388.44 213.942 387.002 213.692 386.799 213.325 cv
386.596 212.958 389.897 212.907 390.875 212.245 cv
391.86 211.58 391.243 210.46 391.243 210.46 cv
391.243 210.46 390.443 211.306 388.997 211.595 cv
387.551 211.883 385.253 211.911 385.18 211.205 cv
385.107 210.496 388.384 207.872 392.208 208.542 cv
393.195 212.176 li
cp
f
391.068 212.089 mo
391.068 212.089 389.73 211.676 388.787 211.762 cv
387.913 211.84 387.098 212.614 386.367 212.535 cv
385.722 212.465 385.181 212.044 384.992 212.072 cv
384.803 212.101 384.575 212.355 384.992 212.546 cv
385.412 212.737 385.884 212.992 386.518 212.953 cv
387.474 212.895 388.282 212.238 388.968 212.238 cv
389.627 212.238 390.703 212.62 390.703 212.62 cv
391.068 212.089 li
cp
f
370.076 209.23 mo
370.021 209.402 370.363 209.689 370.802 209.828 cv
371.242 209.969 371.845 209.856 371.898 209.685 cv
371.952 209.516 371.556 209.186 371.118 209.046 cv
370.677 208.905 370.132 209.059 370.076 209.23 cv
cp
367.888 208.542 mo
371.714 207.872 374.989 210.496 374.914 211.205 cv
374.842 211.911 372.544 211.883 371.099 211.595 cv
369.653 211.306 368.855 210.46 368.855 210.46 cv
368.855 210.46 368.236 211.58 369.219 212.245 cv
370.198 212.907 373.499 212.958 373.296 213.325 cv
373.094 213.692 371.658 213.942 369.471 213.518 cv
367.824 213.199 366.9 212.176 366.9 212.176 cv
367.888 208.542 li
cp
f
369.028 212.089 mo
369.028 212.089 370.37 211.676 371.307 211.762 cv
372.183 211.84 372.997 212.614 373.727 212.535 cv
374.373 212.465 374.914 212.044 375.105 212.072 cv
375.291 212.101 375.523 212.355 375.105 212.546 cv
374.684 212.737 374.214 212.992 373.578 212.953 cv
372.624 212.895 371.816 212.238 371.128 212.238 cv
370.468 212.238 369.392 212.62 369.392 212.62 cv
369.028 212.089 li
cp
f
291.658 225.204 mo
264.917 225.204 li
262.972 225.204 261.395 223.627 261.395 221.682 cv
261.395 182.312 li
261.395 180.366 262.972 178.789 264.917 178.789 cv
291.658 178.789 li
293.603 178.789 295.18 180.366 295.18 182.312 cv
295.18 221.682 li
295.18 223.627 293.603 225.204 291.658 225.204 cv
.0196078 .321569 .411765 rgb
f
290.644 217.145 mo
290.644 219.091 289.067 220.668 287.122 220.668 cv
260.381 220.668 li
258.435 220.668 256.858 219.091 256.858 217.145 cv
256.858 177.775 li
256.858 175.83 258.435 174.253 260.381 174.253 cv
287.122 174.253 li
289.067 174.253 290.644 175.83 290.644 177.775 cv
290.644 217.145 li
cp
.470588 .6 .678431 rgb
f
287.054 183.408 mo
287.054 185.959 284.986 188.027 282.434 188.027 cv
279.883 188.027 277.815 185.959 277.815 183.408 cv
277.815 180.857 279.883 178.789 282.434 178.789 cv
284.986 178.789 287.054 180.857 287.054 183.408 cv
cp
.643137 .764706 .815686 rgb
f
284.834 180.493 mo
281.043 186.918 li
280.035 186.323 li
283.826 179.898 li
284.834 180.493 li
cp
.486275 .627451 .682353 rgb
f
269.248 185.376 mo
268.161 187.684 265.409 188.674 263.101 187.587 cv
260.793 186.5 259.803 183.748 260.89 181.44 cv
261.977 179.132 264.729 178.142 267.037 179.229 cv
269.345 180.316 270.335 183.068 269.248 185.376 cv
cp
.643137 .764706 .815686 rgb
f
268.194 185.527 mo
261.445 182.349 li
261.944 181.289 li
268.693 184.467 li
268.194 185.527 li
cp
.486275 .627451 .682353 rgb
f
287.054 197.46 mo
287.054 200.011 284.986 202.079 282.434 202.079 cv
279.883 202.079 277.815 200.011 277.815 197.46 cv
277.815 194.909 279.883 192.841 282.434 192.841 cv
284.986 192.841 287.054 194.909 287.054 197.46 cv
cp
.643137 .764706 .815686 rgb
f
286.164 198.046 mo
278.705 198.046 li
278.705 196.875 li
286.164 196.875 li
286.164 198.046 li
cp
.486275 .627451 .682353 rgb
f
269.248 199.428 mo
268.161 201.736 265.409 202.726 263.101 201.639 cv
260.793 200.552 259.803 197.8 260.89 195.492 cv
261.977 193.184 264.729 192.194 267.037 193.281 cv
269.345 194.368 270.335 197.12 269.248 199.428 cv
cp
.643137 .764706 .815686 rgb
f
268.827 197.095 mo
261.604 198.959 li
261.311 197.825 li
268.534 195.961 li
268.827 197.095 li
cp
.486275 .627451 .682353 rgb
f
287.054 211.512 mo
287.054 214.064 284.986 216.132 282.434 216.132 cv
279.883 216.132 277.815 214.064 277.815 211.512 cv
277.815 208.961 279.883 206.893 282.434 206.893 cv
284.986 206.893 287.054 208.961 287.054 211.512 cv
cp
.643137 .764706 .815686 rgb
f
285.94 212.913 mo
278.668 211.253 li
278.929 210.111 li
286.201 211.772 li
285.94 212.913 li
cp
.486275 .627451 .682353 rgb
f
269.248 213.48 mo
268.161 215.788 265.409 216.778 263.101 215.691 cv
260.793 214.605 259.803 211.852 260.89 209.544 cv
261.977 207.236 264.729 206.247 267.037 207.333 cv
269.345 208.42 270.335 211.172 269.248 213.48 cv
cp
.643137 .764706 .815686 rgb
f
265.655 207.783 mo
265.655 215.242 li
264.484 215.242 li
264.484 207.783 li
265.655 207.783 li
cp
.486275 .627451 .682353 rgb
f
274.499 215.242 mo
273.003 215.242 li
273.003 179.678 li
274.499 179.678 li
274.499 215.242 li
cp
.164706 .521569 .54902 rgb
f
109.41 216.664 mo
104.325 216.664 li
99.2392 216.664 li
98.3061 216.664 97.5496 215.908 97.5496 214.975 cv
97.5496 189.484 li
97.5496 187.351 99.6443 186.269 100.435 185.478 cv
101.376 184.538 101.447 184.093 101.201 183.442 cv
100.924 182.705 100.182 182.233 100.182 179.541 cv
100.182 176.848 101.007 176.452 101.364 174.763 cv
102.086 171.344 101.528 165.726 104.325 165.726 cv
107.121 165.726 106.564 171.344 107.286 174.763 cv
107.642 176.452 108.468 176.848 108.468 179.541 cv
108.468 182.233 107.726 182.705 107.448 183.442 cv
107.203 184.093 107.274 184.538 108.214 185.478 cv
109.005 186.269 111.1 187.351 111.1 189.484 cv
111.1 214.975 li
111.1 215.908 110.343 216.664 109.41 216.664 cv
104.325 166.23 mo
102.763 166.23 102.512 168.975 102.27 171.63 cv
102.168 172.742 102.063 173.892 101.857 174.867 cv
101.718 175.526 101.515 175.999 101.318 176.456 cv
100.993 177.211 100.686 177.924 100.686 179.541 cv
100.686 181.468 101.072 182.143 101.383 182.685 cv
101.491 182.875 101.594 183.054 101.673 183.264 cv
102.019 184.181 101.797 184.83 100.792 185.834 cv
100.602 186.025 100.353 186.223 100.09 186.432 cv
99.1827 187.155 98.0536 188.054 98.0536 189.484 cv
98.0536 214.975 li
98.0536 215.628 98.5854 216.16 99.2395 216.16 cv
109.41 216.16 li
110.064 216.16 110.596 215.628 110.596 214.975 cv
110.596 189.484 li
110.596 188.054 109.467 187.155 108.56 186.433 cv
108.297 186.223 108.048 186.025 107.858 185.834 cv
106.853 184.83 106.631 184.181 106.977 183.264 cv
107.056 183.054 107.158 182.875 107.267 182.685 cv
107.577 182.143 107.963 181.468 107.963 179.541 cv
107.963 177.924 107.657 177.211 107.332 176.456 cv
107.135 175.999 106.932 175.526 106.792 174.867 cv
106.586 173.892 106.482 172.742 106.38 171.63 cv
106.138 168.975 105.887 166.23 104.325 166.23 cv
.0196078 .321569 .411765 rgb
f
109.41 215.656 mo
99.2395 215.656 li
98.8636 215.656 98.5579 215.351 98.5579 214.975 cv
98.5579 189.51 li
110.091 189.51 li
110.091 214.975 li
110.091 215.351 109.786 215.656 109.41 215.656 cv
f
129.884 216.664 mo
124.799 216.664 li
119.713 216.664 li
118.78 216.664 118.024 215.908 118.024 214.975 cv
118.024 189.484 li
118.024 187.351 120.118 186.269 120.909 185.478 cv
121.85 184.538 121.921 184.093 121.676 183.442 cv
121.398 182.705 120.656 182.233 120.656 179.541 cv
120.656 176.848 121.481 176.452 121.838 174.763 cv
122.56 171.344 122.003 165.726 124.799 165.726 cv
127.595 165.726 127.038 171.344 127.76 174.763 cv
128.116 176.452 128.941 176.848 128.941 179.541 cv
128.941 182.233 128.2 182.705 127.922 183.442 cv
127.677 184.093 127.748 184.538 128.688 185.478 cv
129.479 186.269 131.574 187.351 131.574 189.484 cv
131.574 214.975 li
131.574 215.908 130.817 216.664 129.884 216.664 cv
124.799 166.23 mo
123.237 166.23 122.986 168.975 122.744 171.63 cv
122.642 172.742 122.537 173.892 122.331 174.867 cv
122.192 175.526 121.989 175.999 121.792 176.456 cv
121.467 177.211 121.16 177.924 121.16 179.541 cv
121.16 181.468 121.546 182.143 121.857 182.685 cv
121.965 182.875 122.068 183.054 122.147 183.264 cv
122.493 184.181 122.271 184.83 121.266 185.834 cv
121.076 186.025 120.827 186.223 120.564 186.432 cv
119.657 187.155 118.528 188.054 118.528 189.484 cv
118.528 214.975 li
118.528 215.628 119.059 216.16 119.713 216.16 cv
129.884 216.16 li
130.538 216.16 131.07 215.628 131.07 214.975 cv
131.07 189.484 li
131.07 188.054 129.941 187.155 129.034 186.433 cv
128.771 186.223 128.522 186.025 128.331 185.834 cv
127.327 184.83 127.105 184.181 127.451 183.264 cv
127.53 183.054 127.632 182.875 127.741 182.685 cv
128.051 182.143 128.437 181.468 128.437 179.541 cv
128.437 177.924 128.131 177.211 127.806 176.456 cv
127.609 175.999 127.406 175.526 127.266 174.867 cv
127.061 173.892 126.956 172.742 126.854 171.63 cv
126.611 168.975 126.361 166.23 124.799 166.23 cv
f
129.884 215.656 mo
119.713 215.656 li
119.338 215.656 119.032 215.351 119.032 214.975 cv
119.032 198.778 li
130.565 198.778 li
130.565 214.975 li
130.565 215.351 130.26 215.656 129.884 215.656 cv
f
123.049 197.382 mo
119.901 197.382 li
119.901 196.431 li
123.049 196.431 li
123.049 197.382 li
f
121.87 194.767 mo
119.901 194.767 li
119.901 193.816 li
121.87 193.816 li
121.87 194.767 li
f
123.049 192.152 mo
119.901 192.152 li
119.901 191.201 li
123.049 191.201 li
123.049 192.152 li
f
105.597 212.347 mo
106.25 212.347 106.782 211.815 106.782 211.162 cv
106.782 185.671 li
106.782 184.24 105.654 183.342 104.746 182.619 cv
104.483 182.41 104.235 182.212 104.044 182.021 cv
103.04 181.017 102.818 180.368 103.163 179.451 cv
103.243 179.241 103.345 179.062 103.453 178.872 cv
103.764 178.33 104.15 177.655 104.15 175.727 cv
104.15 174.111 103.843 173.398 103.518 172.643 cv
103.321 172.186 103.118 171.713 102.979 171.054 cv
102.773 170.079 102.668 168.929 102.566 167.817 cv
102.324 165.162 102.073 162.417 100.511 162.417 cv
98.9495 162.417 98.6988 165.162 98.4566 167.817 cv
98.3546 168.929 98.2497 170.079 98.0439 171.053 cv
97.9045 171.713 97.7017 172.186 97.5047 172.643 cv
97.1797 173.398 96.8729 174.111 96.8729 175.727 cv
96.8729 177.655 97.2589 178.33 97.5697 178.872 cv
97.678 179.062 97.7805 179.241 97.8597 179.451 cv
98.2054 180.368 97.9834 181.017 96.9788 182.021 cv
96.7882 182.212 96.5395 182.41 96.2766 182.619 cv
95.3695 183.341 94.2404 184.24 94.2404 185.671 cv
94.2404 211.162 li
94.2404 211.815 94.7721 212.347 95.4261 212.347 cv
105.597 212.347 li
cp
107.287 185.671 mo
107.287 211.161 li
107.287 212.095 106.53 212.851 105.597 212.851 cv
100.511 212.851 li
95.4259 212.851 li
94.4928 212.851 93.7363 212.095 93.7363 211.161 cv
93.7363 185.671 li
93.7363 183.537 95.8311 182.456 96.6221 181.665 cv
97.5623 180.725 97.6333 180.279 97.3881 179.629 cv
97.1103 178.891 96.3688 178.42 96.3688 175.727 cv
96.3688 173.035 97.1941 172.639 97.5507 170.95 cv
98.2724 167.53 97.7152 161.912 100.511 161.912 cv
103.308 161.912 102.751 167.53 103.472 170.95 cv
103.829 172.639 104.654 173.035 104.654 175.727 cv
104.654 178.42 103.913 178.891 103.635 179.629 cv
103.39 180.279 103.461 180.725 104.401 181.665 cv
105.192 182.456 107.287 183.537 107.287 185.671 cv
cp
.470588 .6 .678431 rgb
f
94.7446 185.697 mo
94.7446 211.162 li
94.7446 211.537 95.0504 211.843 95.4261 211.843 cv
105.597 211.843 li
105.973 211.843 106.278 211.537 106.278 211.162 cv
106.278 185.697 li
94.7446 185.697 li
cp
1 .733333 .14902 rgb
f
98.7614 208.306 mo
95.6134 208.306 li
95.6134 209.257 li
98.7614 209.257 li
98.7614 208.306 li
cp
.470588 .6 .678431 rgb
f
97.5832 205.691 mo
95.6134 205.691 li
95.6134 206.642 li
97.5832 206.642 li
97.5832 205.691 li
cp
f
98.7614 203.077 mo
95.6134 203.077 li
95.6134 204.027 li
98.7614 204.027 li
98.7614 203.077 li
cp
f
97.5832 200.462 mo
95.6134 200.462 li
95.6134 201.413 li
97.5832 201.413 li
97.5832 200.462 li
cp
f
98.7614 197.847 mo
95.6134 197.847 li
95.6134 198.798 li
98.7614 198.798 li
98.7614 197.847 li
cp
f
97.5832 195.232 mo
95.6134 195.232 li
95.6134 196.183 li
97.5832 196.183 li
97.5832 195.232 li
cp
f
98.7614 192.618 mo
95.6134 192.618 li
95.6134 193.568 li
98.7614 193.568 li
98.7614 192.618 li
cp
f
97.5832 190.003 mo
95.6134 190.003 li
95.6134 190.954 li
97.5832 190.954 li
97.5832 190.003 li
cp
f
98.7614 187.388 mo
95.6134 187.388 li
95.6134 188.339 li
98.7614 188.339 li
98.7614 187.388 li
cp
f
126.071 212.347 mo
126.724 212.347 127.256 211.815 127.256 211.162 cv
127.256 185.671 li
127.256 184.24 126.128 183.342 125.221 182.619 cv
124.957 182.41 124.709 182.212 124.518 182.021 cv
123.514 181.017 123.292 180.368 123.637 179.451 cv
123.717 179.241 123.819 179.062 123.927 178.872 cv
124.238 178.33 124.624 177.655 124.624 175.727 cv
124.624 174.111 124.317 173.398 123.992 172.643 cv
123.795 172.186 123.592 171.713 123.453 171.054 cv
123.247 170.079 123.142 168.929 123.04 167.817 cv
122.798 165.162 122.548 162.417 120.985 162.417 cv
119.424 162.417 119.173 165.162 118.931 167.817 cv
118.829 168.929 118.724 170.079 118.518 171.053 cv
118.379 171.713 118.176 172.186 117.979 172.643 cv
117.654 173.398 117.347 174.111 117.347 175.727 cv
117.347 177.655 117.733 178.33 118.044 178.872 cv
118.152 179.062 118.254 179.241 118.334 179.451 cv
118.679 180.368 118.457 181.017 117.453 182.021 cv
117.262 182.212 117.013 182.41 116.751 182.619 cv
115.843 183.341 114.714 184.24 114.714 185.671 cv
114.714 211.162 li
114.714 211.815 115.246 212.347 115.9 212.347 cv
126.071 212.347 li
cp
127.761 185.671 mo
127.761 211.161 li
127.761 212.095 127.004 212.851 126.071 212.851 cv
120.985 212.851 li
115.9 212.851 li
114.967 212.851 114.21 212.095 114.21 211.161 cv
114.21 185.671 li
114.21 183.537 116.305 182.456 117.096 181.665 cv
118.036 180.725 118.107 180.279 117.862 179.629 cv
117.584 178.891 116.843 178.42 116.843 175.727 cv
116.843 173.035 117.668 172.639 118.025 170.95 cv
118.746 167.53 118.189 161.912 120.985 161.912 cv
123.782 161.912 123.225 167.53 123.946 170.95 cv
124.303 172.639 125.128 173.035 125.128 175.727 cv
125.128 178.42 124.387 178.891 124.109 179.629 cv
123.864 180.279 123.935 180.725 124.875 181.665 cv
125.666 182.456 127.761 183.537 127.761 185.671 cv
cp
f
115.219 194.965 mo
115.219 211.162 li
115.219 211.537 115.524 211.843 115.9 211.843 cv
126.071 211.843 li
126.447 211.843 126.752 211.537 126.752 211.162 cv
126.752 194.965 li
115.219 194.965 li
cp
.427451 .823529 .901961 rgb
f
119.235 208.306 mo
116.087 208.306 li
116.087 209.257 li
119.235 209.257 li
119.235 208.306 li
cp
.470588 .6 .678431 rgb
f
118.057 205.691 mo
116.087 205.691 li
116.087 206.642 li
118.057 206.642 li
118.057 205.691 li
cp
f
119.235 203.077 mo
116.087 203.077 li
116.087 204.027 li
119.235 204.027 li
119.235 203.077 li
cp
f
118.057 200.462 mo
116.087 200.462 li
116.087 201.413 li
118.057 201.413 li
118.057 200.462 li
cp
f
119.235 197.847 mo
116.087 197.847 li
116.087 198.798 li
119.235 198.798 li
119.235 197.847 li
cp
f
118.057 195.232 mo
116.087 195.232 li
116.087 196.183 li
118.057 196.183 li
118.057 195.232 li
cp
f
119.235 192.618 mo
116.087 192.618 li
116.087 193.568 li
119.235 193.568 li
119.235 192.618 li
cp
f
118.057 190.003 mo
116.087 190.003 li
116.087 190.954 li
118.057 190.954 li
118.057 190.003 li
cp
f
119.235 187.388 mo
116.087 187.388 li
116.087 188.339 li
119.235 188.339 li
119.235 187.388 li
cp
f
77.0153 274.494 mo
29.1669 274.494 li
28.8333 274.494 28.5206 274.316 28.3492 274.03 cv
28.1871 273.758 28.1716 273.412 28.3096 273.126 cv
45.0657 244.62 li
61.1159 244.62 li
77.8987 273.175 li
78.0105 273.412 77.995 273.758 77.8329 274.029 cv
77.6615 274.316 77.3489 274.494 77.0153 274.494 cv
.0196078 .321569 .411765 rgb
f
77.015 276.551 mo
53.091 276.551 li
29.167 276.551 li
28.1073 276.551 27.1258 275.994 26.5827 275.084 cv
26.0396 274.174 26.015 273.046 26.5178 272.113 cv
48.9452 233.896 li
48.9452 223.783 li
48.8269 223.783 li
47.7911 223.783 46.9484 222.94 46.9484 221.905 cv
46.9484 219.574 li
46.9484 218.539 47.7911 217.696 48.8269 217.696 cv
57.3551 217.696 li
58.391 217.696 59.2337 218.539 59.2337 219.574 cv
59.2337 221.905 li
59.2337 222.94 58.391 223.783 57.3551 223.783 cv
57.2369 223.783 li
57.2369 225.155 li
57.2369 226.334 li
75.471 220.74 li
77.6373 231.705 li
57.2369 231.061 li
57.2369 233.896 li
79.6643 272.113 li
80.1672 273.046 80.1425 274.174 79.5994 275.084 cv
79.0562 275.994 78.0747 276.551 77.015 276.551 cv
50.317 229.226 mo
50.317 234.334 li
27.6922 272.828 li
27.4546 273.321 27.4787 273.91 27.7604 274.381 cv
28.0544 274.874 28.5934 275.18 29.167 275.18 cv
77.015 275.18 li
77.5886 275.18 78.1276 274.874 78.4218 274.381 cv
78.7033 273.909 78.7277 273.32 78.4897 272.828 cv
55.8654 234.334 li
55.8654 229.226 li
50.317 229.226 li
50.317 225.155 mo
50.317 227.224 li
55.8654 227.224 li
55.8654 225.155 li
55.8654 223.783 li
50.3231 223.783 li
50.3231 225.155 li
50.317 225.155 li
48.8268 219.068 mo
48.5469 219.068 48.3201 219.295 48.3201 219.574 cv
48.3201 221.905 li
48.3201 222.185 48.5469 222.412 48.8268 222.412 cv
48.9452 222.412 li
53.091 222.412 li
57.2369 222.412 li
57.3551 222.412 li
57.6351 222.412 57.8621 222.185 57.8621 221.905 cv
57.8621 219.574 li
57.8621 219.295 57.6351 219.068 57.3551 219.068 cv
53.091 219.068 li
48.8268 219.068 li
f
71.5539 266.831 mo
54.7711 238.276 li
38.721 238.276 li
21.965 266.781 li
21.827 267.067 21.8426 267.413 22.0045 267.685 cv
22.176 267.971 22.4888 268.149 22.8222 268.149 cv
70.6706 268.149 li
71.0042 268.149 71.3169 267.971 71.4883 267.684 cv
71.6504 267.413 71.6657 267.067 71.5539 266.831 cv
cp
.427451 .823529 .901961 rgb
f
70.6703 268.835 mo
71.2438 268.835 71.783 268.529 72.0771 268.036 cv
72.3586 267.565 72.383 266.976 72.1449 266.483 cv
49.5207 227.989 li
49.5207 217.439 li
43.9722 217.439 li
43.9722 227.989 li
21.3475 266.483 li
21.1099 266.976 21.134 267.565 21.4156 268.036 cv
21.7096 268.529 22.2486 268.835 22.8223 268.835 cv
70.6703 268.835 li
cp
73.2548 268.74 mo
72.7115 269.649 71.73 270.207 70.6703 270.207 cv
46.7463 270.207 li
22.8223 270.207 li
21.7628 270.207 20.7811 269.649 20.238 268.74 cv
19.6949 267.83 19.6703 266.701 20.1731 265.768 cv
42.6005 227.551 li
42.6005 216.067 li
46.7463 216.067 li
50.8921 216.067 li
50.8921 227.551 li
73.3197 265.768 li
73.8225 266.701 73.7977 267.83 73.2548 268.74 cv
cp
.831373 .831373 .831373 rgb
f
51.5174 215.56 mo
51.5174 215.84 51.2906 216.067 51.0104 216.067 cv
46.7463 216.067 li
42.482 216.067 li
42.2022 216.067 41.9754 215.84 41.9754 215.56 cv
41.9754 213.23 li
41.9754 212.95 42.2022 212.723 42.482 212.723 cv
46.7463 212.723 li
51.0104 212.723 li
51.2906 212.723 51.5174 212.95 51.5174 213.23 cv
51.5174 215.56 li
cp
51.0104 211.351 mo
42.4822 211.351 li
41.4464 211.351 40.6036 212.194 40.6036 213.23 cv
40.6036 215.56 li
40.6036 216.596 41.4464 217.439 42.4822 217.439 cv
51.0104 217.439 li
52.0462 217.439 52.889 216.596 52.889 215.56 cv
52.889 213.23 li
52.889 212.194 52.0462 211.351 51.0104 211.351 cv
cp
f
54.0034 243.137 mo
54.0034 243.752 53.5044 244.251 52.889 244.251 cv
52.2735 244.251 51.7745 243.752 51.7745 243.137 cv
51.7745 242.521 52.2735 242.022 52.889 242.022 cv
53.5044 242.022 54.0034 242.521 54.0034 243.137 cv
cp
.345098 .631373 .670588 rgb
f
63.1231 261.764 mo
63.1231 262.379 62.6242 262.878 62.0087 262.878 cv
61.3933 262.878 60.8943 262.379 60.8943 261.764 cv
60.8943 261.148 61.3933 260.649 62.0087 260.649 cv
62.6242 260.649 63.1231 261.148 63.1231 261.764 cv
cp
f
51.0363 263.692 mo
51.0363 264.308 50.5373 264.807 49.9218 264.807 cv
49.3064 264.807 48.8074 264.308 48.8074 263.692 cv
48.8074 263.077 49.3064 262.578 49.9218 262.578 cv
50.5373 262.578 51.0363 263.077 51.0363 263.692 cv
cp
f
55.1509 254.391 mo
55.1509 255.007 54.652 255.506 54.0366 255.506 cv
53.421 255.506 52.9221 255.007 52.9221 254.391 cv
52.9221 253.776 53.421 253.277 54.0366 253.277 cv
54.652 253.277 55.1509 253.776 55.1509 254.391 cv
cp
f
37.3348 257.306 mo
37.3348 257.921 36.8358 258.42 36.2204 258.42 cv
35.6049 258.42 35.1061 257.921 35.1061 257.306 cv
35.1061 256.69 35.6049 256.192 36.2204 256.192 cv
36.8358 256.192 37.3348 256.69 37.3348 257.306 cv
cp
f
42.1353 250.253 mo
42.1353 250.868 41.6362 251.367 41.0208 251.367 cv
40.4054 251.367 39.9065 250.868 39.9065 250.253 cv
39.9065 249.637 40.4054 249.138 41.0208 249.138 cv
41.6362 249.138 42.1353 249.637 42.1353 250.253 cv
cp
f
39.5636 243.822 mo
39.5636 244.438 39.0647 244.937 38.4491 244.937 cv
37.8337 244.937 37.3348 244.438 37.3348 243.822 cv
37.3348 243.207 37.8337 242.708 38.4491 242.708 cv
39.0647 242.708 39.5636 243.207 39.5636 243.822 cv
cp
f
29.234 264.699 mo
29.234 265.315 28.7352 265.814 28.1197 265.814 cv
27.5043 265.814 27.0053 265.315 27.0053 264.699 cv
27.0053 264.084 27.5043 263.585 28.1197 263.585 cv
28.7352 263.585 29.234 264.084 29.234 264.699 cv
cp
f
43.2496 259.535 mo
43.2496 260.15 42.7507 260.649 42.1353 260.649 cv
41.5197 260.649 41.0208 260.15 41.0208 259.535 cv
41.0208 258.919 41.5197 258.42 42.1353 258.42 cv
42.7507 258.42 43.2496 258.919 43.2496 259.535 cv
cp
f
50.8921 218.81 mo
49.5207 218.81 li
49.5207 217.439 li
50.8921 217.439 li
50.8921 218.81 li
cp
.282353 .4 .623529 rgb
f
43.9784 218.81 mo
42.607 218.81 li
42.607 217.439 li
43.9784 217.439 li
43.9784 218.81 li
cp
f
50.8921 219.989 mo
69.1263 214.395 li
71.2925 225.361 li
50.8921 224.716 li
50.8921 219.989 li
cp
.721569 .219608 .0745098 rgb
f
50.8921 222.881 mo
42.607 222.881 li
42.607 220.879 li
50.8921 220.879 li
50.8921 222.881 li
cp
f
450 150 mo
0 150 li
0 0 li
450 0 li
450 150 li
.427451 .823529 .901961 rgb
f
60.5705 136.354 mo
30.2637 136.354 5.69527 111.786 5.69527 81.4788 cv
5.69527 51.1721 30.2637 26.6036 60.5705 26.6036 cv
90.8772 26.6036 115.446 51.1721 115.446 81.4788 cv
115.446 111.786 90.8772 136.354 60.5705 136.354 cv
37.422 112.426 mo
34.8971 112.426 32.8503 114.473 32.8503 116.998 cv
32.8503 121.336 li
95.0983 121.336 li
95.0983 116.998 li
95.0983 114.473 93.0516 112.426 90.5267 112.426 cv
91.276 112.426 li
91.276 112.426 li
91.276 112.426 88.4375 101.321 87.7939 98.7825 cv
97.7166 89.1197 97.3764 69.7028 77.6583 59.7991 cv
70.5008 56.0236 li
70.0009 56.9678 li
70.0008 56.9678 li
76.3321 45.0088 li
72.7963 43.137 li
75.5036 38.0234 li
69.0628 34.6135 li
66.3555 39.7271 li
62.82 37.8554 li
45.9014 69.8131 li
45.1381 69.409 li
43.5255 72.4547 li
50.8162 76.3146 li
46.9584 74.2722 li
44.2448 79.3977 li
52.4179 83.7247 li
55.1313 78.5991 li
58.5639 80.4165 li
60.1765 77.3707 li
59.4133 76.9665 li
63.3719 69.4891 li
63.3719 69.4892 li
62.9013 70.3781 li
69.8973 73.9516 li
82.406 80.9113 77.116 95.499 65.981 95.499 cv
60.9091 95.499 li
60.9091 92.131 li
33.3854 92.131 li
33.3854 95.499 li
56.7592 95.499 li
56.7592 102.299 li
54.3913 102.299 li
54.3913 102.065 54.3913 101.893 54.3913 101.893 cv
54.3913 100.434 50.292 99.2516 45.2352 99.2516 cv
40.1784 99.2516 36.0789 100.434 36.0789 101.893 cv
36.0789 101.893 36.0789 103.669 36.0789 103.901 cv
36.0789 105.36 40.1784 106.542 45.2352 106.542 cv
50.292 106.542 54.3913 105.36 54.3913 103.901 cv
54.3913 104.023 li
56.7592 104.023 li
56.7592 104.535 li
56.7592 104.535 66.1544 104.535 73.3315 104.535 cv
73.6805 104.535 74.0164 104.505 74.3588 104.489 cv
74.3588 112.426 li
37.422 112.426 li
.388235 .776471 .847059 rgb
f
157.044 70.8678 mo
138.335 70.8678 123.169 55.7013 123.169 36.9925 cv
123.169 18.2837 138.335 3.11722 157.044 3.11722 cv
175.753 3.11722 190.919 18.2837 190.919 36.9925 cv
190.919 55.7013 175.753 70.8678 157.044 70.8678 cv
138.213 33.949 mo
137.683 33.949 137.252 34.3794 137.252 34.9102 cv
137.252 35.9575 li
137.252 36.4882 137.683 36.9185 138.213 36.9185 cv
138.302 36.9185 li
138.302 45.6336 143.283 53.1803 150.55 56.8822 cv
150.55 60.1056 li
160.699 60.1056 li
170.847 60.1056 li
170.847 56.8822 li
178.115 53.1803 183.095 45.6336 183.095 36.9185 cv
183.184 36.9185 li
183.184 36.9185 li
183.317 36.9185 183.443 36.8917 183.558 36.843 cv
183.903 36.6972 184.145 36.3555 184.145 35.9575 cv
184.145 34.9102 li
184.145 34.3794 183.715 33.949 183.184 33.949 cv
138.213 33.949 li
157.044 33.9292 mo
157.044 33.9292 li
153.679 29.508 li
149.294 22.2743 li
149.199 22.073 149.076 21.8813 148.943 21.6939 cv
149.102 21.4796 149.075 21.1206 148.845 20.8183 cv
148.664 20.5807 148.412 20.4461 148.192 20.4461 cv
148.091 20.4461 147.997 20.4742 147.919 20.5333 cv
147.795 20.6275 li
147.197 20.2703 146.515 20.0858 145.828 20.0858 cv
145.025 20.0858 144.216 20.3386 143.526 20.8632 cv
142.248 21.8361 141.761 23.456 142.162 24.9154 cv
142.038 25.0097 li
141.79 25.1983 141.803 25.6317 142.066 25.9777 cv
142.244 26.2119 142.488 26.3375 142.705 26.3375 cv
142.767 26.3375 142.828 26.3269 142.884 26.3053 cv
143.029 26.4834 143.181 26.6535 143.35 26.7989 cv
149.154 32.9522 li
149.895 33.926 li
157.044 33.9292 li
f
311.392 79.5761 mo
292.683 79.5761 277.517 64.4097 277.517 45.7009 cv
277.517 26.9921 292.683 11.8256 311.392 11.8256 cv
330.101 11.8256 345.268 26.9921 345.268 45.7009 cv
345.268 64.4097 330.101 79.5761 311.392 79.5761 cv
297.574 65.7272 mo
295.968 65.7272 294.666 67.0289 294.666 68.6346 cv
294.666 69.9279 li
333.738 69.9279 li
333.738 68.6346 li
333.738 67.0289 332.436 65.7272 330.831 65.7272 cv
330.812 65.7272 li
330.812 35.9125 li
330.97 35.8058 331.13 35.7014 331.268 35.5708 cv
331.168 35.3812 331.113 35.178 331.108 34.9779 cv
332.834 34.9779 li
333.893 34.9779 334.751 34.1196 334.751 33.0608 cv
334.751 32.0021 333.893 31.1437 332.834 31.1437 cv
331.109 31.1437 li
331.113 30.9436 331.168 30.7404 331.268 30.5508 cv
331.13 30.4202 330.97 30.3158 330.812 30.2091 cv
330.812 28.2087 li
330.812 27.15 329.954 26.2917 328.895 26.2917 cv
327.836 26.2917 326.978 27.15 326.978 28.2087 cv
326.978 30.2091 li
326.82 30.3158 326.66 30.4202 326.522 30.5508 cv
326.622 30.7404 326.677 30.9436 326.682 31.1437 cv
309.729 31.1437 li
309.729 25.5967 li
309.729 24.5242 li
310.011 24.2404 310.186 23.8501 310.186 23.4196 cv
310.186 23.043 li
310.186 22.1778 309.482 21.4738 308.616 21.4738 cv
304.588 21.4738 li
303.723 21.4738 303.019 22.1778 303.019 23.043 cv
303.019 23.4196 li
303.019 23.8501 303.194 24.2404 303.476 24.5242 cv
303.476 25.5967 li
303.476 31.1437 li
300.125 31.1437 li
299.066 31.1437 298.208 32.0021 298.208 33.0608 cv
298.208 34.1196 299.066 34.9779 300.125 34.9779 cv
303.476 34.9779 li
303.476 35.3325 li
299.565 36.6561 296.903 40.3135 296.903 44.5073 cv
296.903 49.8558 301.254 54.2069 306.602 54.2069 cv
311.951 54.2069 316.302 49.8558 316.302 44.5073 cv
316.302 40.3135 313.639 36.6561 309.729 35.3325 cv
309.729 34.9779 li
326.682 34.9779 li
326.677 35.178 326.622 35.3812 326.522 35.5708 cv
326.66 35.7014 326.82 35.8057 326.978 35.9125 cv
326.978 65.7272 li
312.833 65.7272 li
312.833 63.2652 li
300.265 63.2652 li
300.265 65.7272 li
297.574 65.7272 li
306.602 56.8279 mo
305.441 57.5811 304.661 59.1044 304.661 60.3439 cv
304.661 61.5179 305.506 62.3737 306.602 62.3737 cv
307.699 62.3737 308.604 61.535 308.411 60.3882 cv
308.18 59.0164 306.522 58.8021 306.602 56.8279 cv
307.099 16.4169 mo
306.569 16.4169 306.139 16.8469 306.139 17.3775 cv
306.176 17.5603 li
305.76 17.5806 305.427 17.9174 305.427 18.338 cv
305.427 18.6793 305.648 18.9623 305.952 19.0704 cv
305.844 19.1883 305.774 19.343 305.774 19.5162 cv
305.774 19.8823 306.071 20.1789 306.437 20.1789 cv
306.791 20.1789 307.076 19.8982 307.093 19.5477 cv
307.241 19.659 307.416 19.7372 307.615 19.7372 cv
308.103 19.7372 308.498 19.3415 308.498 18.8533 cv
308.498 18.6583 308.423 18.4877 308.316 18.3416 cv
308.489 18.2753 308.612 18.1106 308.612 17.9145 cv
308.612 17.6604 308.406 17.4542 308.152 17.4542 cv
308.04 17.477 li
308.06 17.3775 li
308.06 16.8469 307.63 16.4169 307.099 16.4169 cv
f
228.93 129.654 mo
205.168 129.654 185.905 110.391 185.905 86.6292 cv
185.905 62.8676 205.168 43.6049 228.93 43.6049 cv
252.691 43.6049 271.954 62.8676 271.954 86.6292 cv
271.954 110.391 252.691 129.654 228.93 129.654 cv
217.022 107.598 mo
232.238 107.598 li
247.454 107.598 li
248.245 107.598 248.886 108.239 248.886 109.029 cv
248.886 110.665 250.212 111.991 251.847 111.991 cv
258.759 111.991 li
260.394 111.991 261.72 110.665 261.72 109.029 cv
261.72 107.598 li
261.72 82.9976 li
261.72 79.6449 259.002 76.9272 255.65 76.9272 cv
252.49 76.9272 li
252.49 71.8637 li
252.588 71.8637 li
253.256 71.8637 253.8 71.3201 253.8 70.652 cv
253.8 68.7961 li
253.8 68.1278 253.256 67.5842 252.588 67.5842 cv
242.176 67.5842 li
241.508 67.5842 240.964 68.1278 240.964 68.7961 cv
240.964 70.652 li
240.964 71.3201 241.508 71.8637 242.176 71.8637 cv
242.275 71.8637 li
242.275 76.9272 li
236.443 76.9272 li
236.443 71.8637 li
236.542 71.8637 li
237.21 71.8637 237.754 71.3201 237.754 70.652 cv
237.754 68.7961 li
237.754 68.1278 237.21 67.5842 236.542 67.5842 cv
226.13 67.5842 li
225.462 67.5842 224.918 68.1278 224.918 68.7961 cv
224.918 70.652 li
224.918 71.3201 225.462 71.8637 226.13 71.8637 cv
226.229 71.8637 li
226.229 76.9272 li
220.397 76.9272 li
220.397 72.5819 li
220.397 71.8637 li
220.496 71.8637 li
221.164 71.8637 221.708 71.3201 221.708 70.652 cv
221.708 68.7961 li
221.708 68.1278 221.164 67.5842 220.496 67.5842 cv
210.084 67.5842 li
209.416 67.5842 208.872 68.1278 208.872 68.7961 cv
208.872 70.652 li
208.872 71.3201 209.416 71.8637 210.084 71.8637 cv
210.183 71.8637 li
210.183 76.9272 li
208.827 76.9272 li
205.474 76.9272 202.756 79.6449 202.756 82.9976 cv
202.756 107.598 li
202.756 109.029 li
202.756 110.665 204.082 111.991 205.718 111.991 cv
212.629 111.991 li
214.265 111.991 215.591 110.665 215.591 109.029 cv
215.591 108.239 216.231 107.598 217.022 107.598 cv
258.759 110.713 mo
251.847 110.713 li
250.919 110.713 250.164 109.958 250.164 109.03 cv
250.164 107.536 248.948 106.32 247.454 106.32 cv
217.022 106.32 li
215.528 106.32 214.313 107.536 214.313 109.03 cv
214.313 109.958 213.557 110.713 212.629 110.713 cv
205.718 110.713 li
204.789 110.713 204.034 109.958 204.034 109.03 cv
204.034 82.9974 li
204.034 80.3548 206.184 78.2051 208.826 78.2051 cv
210.183 78.2051 li
210.183 93.3652 li
210.183 96.1858 212.469 98.4725 215.29 98.4725 cv
218.111 98.4725 220.397 96.1858 220.397 93.3652 cv
220.397 78.2051 li
226.229 78.2051 li
226.229 93.3651 li
226.229 96.1858 228.516 98.4725 231.336 98.4725 cv
234.157 98.4725 236.443 96.1858 236.443 93.3651 cv
236.443 78.2051 li
242.275 78.2051 li
242.275 93.3651 li
242.275 96.1858 244.562 98.4725 247.382 98.4725 cv
250.203 98.4725 252.49 96.1858 252.49 93.3651 cv
252.49 78.2051 li
255.65 78.2051 li
258.292 78.2051 260.442 80.3548 260.442 82.9974 cv
260.442 109.03 li
260.442 109.958 259.687 110.713 258.759 110.713 cv
247.382 97.7542 mo
244.962 97.7542 242.993 95.7853 242.993 93.3651 cv
242.993 78.2051 li
251.771 78.2051 li
251.771 93.3651 li
251.771 95.7853 249.803 97.7542 247.382 97.7542 cv
231.336 97.7542 mo
228.916 97.7542 226.947 95.7853 226.947 93.3651 cv
226.947 78.2051 li
235.725 78.2051 li
235.725 93.3651 li
235.725 95.7853 233.756 97.7542 231.336 97.7542 cv
215.29 97.7542 mo
212.87 97.7542 210.901 95.7853 210.901 93.3651 cv
210.901 78.2051 li
219.679 78.2051 li
219.679 93.3651 li
219.679 95.7853 217.71 97.7542 215.29 97.7542 cv
251.771 76.9272 mo
242.993 76.9272 li
242.993 71.8637 li
251.771 71.8637 li
251.771 76.9272 li
235.725 76.9272 mo
232.238 76.9272 li
226.947 76.9272 li
226.947 71.8637 li
235.725 71.8637 li
235.725 76.9272 li
219.679 76.9272 mo
210.901 76.9272 li
210.901 71.8637 li
219.679 71.8637 li
219.679 72.5819 li
219.679 76.9272 li
252.588 71.1456 mo
252.49 71.1456 li
242.275 71.1456 li
242.176 71.1456 li
241.904 71.1456 241.683 70.9246 241.683 70.6519 cv
241.683 68.7959 li
241.683 68.5233 241.904 68.3023 242.176 68.3023 cv
252.588 68.3023 li
252.861 68.3023 253.082 68.5233 253.082 68.7959 cv
253.082 70.6519 li
253.082 70.9246 252.861 71.1456 252.588 71.1456 cv
236.542 71.1456 mo
236.443 71.1456 li
226.229 71.1456 li
226.13 71.1456 li
225.857 71.1456 225.636 70.9246 225.636 70.6519 cv
225.636 68.7959 li
225.636 68.5233 225.857 68.3023 226.13 68.3023 cv
236.542 68.3023 li
236.815 68.3023 237.036 68.5233 237.036 68.7959 cv
237.036 70.6519 li
237.036 70.9246 236.815 71.1456 236.542 71.1456 cv
220.496 71.1456 mo
220.397 71.1456 li
210.183 71.1456 li
210.084 71.1456 li
209.811 71.1456 209.59 70.9246 209.59 70.6519 cv
209.59 68.7959 li
209.59 68.5233 209.811 68.3023 210.084 68.3023 cv
220.496 68.3023 li
220.769 68.3023 220.99 68.5233 220.99 68.7959 cv
220.99 70.6519 li
220.99 70.9246 220.769 71.1456 220.496 71.1456 cv
f
395.797 133.657 mo
370.863 133.657 350.65 113.445 350.65 88.5107 cv
350.65 63.577 370.863 43.3642 395.797 43.3642 cv
420.73 43.3642 440.943 63.577 440.943 88.5107 cv
440.943 113.445 420.73 133.657 395.797 133.657 cv
379.865 119.34 mo
379.865 121.673 li
422.472 121.673 li
422.472 119.34 li
415.785 119.34 li
409.974 118.271 408.088 115.891 407.077 112.442 cv
428.184 112.442 li
430.1 112.442 431.653 110.889 431.653 108.973 cv
431.653 67.8348 li
431.653 65.9188 430.1 64.3655 428.184 64.3655 cv
374.154 64.3655 li
372.238 64.3655 370.684 65.9188 370.684 67.8348 cv
370.684 108.973 li
370.684 110.889 372.238 112.442 374.154 112.442 cv
395.26 112.442 li
394.249 115.891 392.363 118.271 386.552 119.34 cv
379.865 119.34 li
f
191.222 138.987 mo
191.081 140.051 li
186.039 140.051 li
186.039 130.414 li
187.244 130.414 li
187.244 138.987 li
191.222 138.987 li
cp
.00392157 .352941 .470588 rgb
f
195.462 131.422 mo
193.879 136.591 li
197.031 136.591 li
195.462 131.422 li
cp
193.585 137.586 mo
192.829 140.051 li
191.596 140.051 li
194.72 130.414 li
196.26 130.414 li
199.37 140.051 li
198.081 140.051 li
197.339 137.586 li
193.585 137.586 li
cp
f
203.568 139.071 mo
205.011 139.071 206.02 138.734 206.02 137.32 cv
206.02 135.947 205.011 135.471 203.82 135.471 cv
202.125 135.471 li
202.125 139.071 li
203.568 139.071 li
cp
202.125 134.532 mo
203.694 134.532 li
204.801 134.532 205.627 133.972 205.627 132.921 cv
205.627 131.717 204.759 131.38 203.288 131.38 cv
202.125 131.38 li
202.125 134.532 li
cp
207.308 137.32 mo
207.308 139.323 205.781 140.051 203.568 140.051 cv
200.921 140.051 li
200.921 130.414 li
203.162 130.414 li
205.501 130.414 206.874 131.17 206.874 132.837 cv
206.874 134.042 206.034 134.756 205.081 134.953 cv
206.216 135.135 207.308 135.681 207.308 137.32 cv
cp
f
210.063 135.261 mo
210.063 138.062 211.184 139.211 212.809 139.211 cv
214.489 139.211 215.554 138.062 215.554 135.247 cv
215.554 132.431 214.503 131.254 212.809 131.254 cv
211.156 131.254 210.063 132.431 210.063 135.261 cv
cp
216.843 135.247 mo
216.843 138.426 215.218 140.219 212.809 140.219 cv
210.413 140.219 208.774 138.482 208.774 135.261 cv
208.774 132.081 210.427 130.246 212.809 130.246 cv
215.204 130.246 216.843 131.997 216.843 135.247 cv
cp
f
221.711 134.966 mo
223.098 134.966 223.897 134.448 223.897 133.118 cv
223.897 131.899 223.196 131.367 221.558 131.367 cv
220.297 131.367 li
220.297 134.966 li
221.711 134.966 li
cp
220.297 135.905 mo
220.297 140.051 li
219.092 140.051 li
219.092 130.414 li
221.571 130.414 li
223.953 130.414 225.186 131.338 225.186 133.118 cv
225.186 134.49 224.457 135.289 223.084 135.695 cv
225.69 140.051 li
224.247 140.051 li
221.894 135.905 li
220.297 135.905 li
cp
f
230.042 131.422 mo
228.459 136.591 li
231.61 136.591 li
230.042 131.422 li
cp
228.165 137.586 mo
227.408 140.051 li
226.176 140.051 li
229.3 130.414 li
230.84 130.414 li
233.95 140.051 li
232.661 140.051 li
231.919 137.586 li
228.165 137.586 li
cp
f
237.547 131.451 mo
237.547 140.051 li
236.342 140.051 li
236.342 131.451 li
233.568 131.451 li
233.568 130.414 li
240.39 130.414 li
240.25 131.451 li
237.547 131.451 li
cp
f
242.207 135.261 mo
242.207 138.062 243.327 139.211 244.952 139.211 cv
246.633 139.211 247.698 138.062 247.698 135.247 cv
247.698 132.431 246.647 131.254 244.952 131.254 cv
243.3 131.254 242.207 132.431 242.207 135.261 cv
cp
248.986 135.247 mo
248.986 138.426 247.361 140.219 244.952 140.219 cv
242.557 140.219 240.918 138.482 240.918 135.261 cv
240.918 132.081 242.571 130.246 244.952 130.246 cv
247.348 130.246 248.986 131.997 248.986 135.247 cv
cp
f
253.855 134.966 mo
255.242 134.966 256.041 134.448 256.041 133.118 cv
256.041 131.899 255.341 131.367 253.702 131.367 cv
252.441 131.367 li
252.441 134.966 li
253.855 134.966 li
cp
252.441 135.905 mo
252.441 140.051 li
251.236 140.051 li
251.236 130.414 li
253.716 130.414 li
256.097 130.414 257.33 131.338 257.33 133.118 cv
257.33 134.49 256.602 135.289 255.229 135.695 cv
257.834 140.051 li
256.392 140.051 li
254.038 135.905 li
252.441 135.905 li
cp
f
262.214 140.051 mo
260.981 140.051 li
260.981 136.339 li
257.886 130.414 li
259.23 130.414 li
261.64 135.275 li
264.035 130.414 li
265.31 130.414 li
262.214 136.325 li
262.214 140.051 li
cp
f
334.534 137.277 mo
329.602 137.277 325.604 133.279 325.604 128.348 cv
325.604 123.416 329.602 119.418 334.534 119.418 cv
339.463 119.418 343.463 123.416 343.463 128.348 cv
343.463 133.279 339.463 137.277 334.534 137.277 cv
.172549 .541176 .643137 rgb
f
292.709 113.884 mo
286.861 113.884 282.12 109.143 282.12 103.295 cv
282.12 97.4473 286.861 92.7064 292.709 92.7064 cv
298.554 92.7064 303.297 97.4473 303.297 103.295 cv
303.297 109.143 298.554 113.884 292.709 113.884 cv
.4 .694118 .768627 rgb
f
231.041 21.2648 mo
231.041 16.3337 235.039 12.3352 239.97 12.3352 cv
244.902 12.3352 248.9 16.3337 248.9 21.2648 cv
248.9 26.1965 244.902 30.1945 239.97 30.1945 cv
235.039 30.1945 231.041 26.1965 231.041 21.2648 cv
cp
.819608 .913725 1 rgb
f
401.951 18.8189 mo
401.951 13.8873 405.95 9.8892 410.881 9.8892 cv
415.813 9.8892 419.811 13.8873 419.811 18.8189 cv
419.811 23.7501 415.813 27.7486 410.881 27.7486 cv
405.95 27.7486 401.951 23.7501 401.951 18.8189 cv
cp
1 1 1 rgb
f
163.4 98.4609 mo
159.725 98.4609 156.746 95.4814 156.746 91.8068 cv
156.746 88.1318 159.725 85.1523 163.4 85.1523 cv
167.074 85.1523 170.054 88.1318 170.054 91.8068 cv
170.054 95.4814 167.074 98.4609 163.4 98.4609 cv
.172549 .541176 .643137 rgb
f
122.02 122.308 mo
122.02 115.744 127.341 110.423 133.905 110.423 cv
140.47 110.423 145.79 115.744 145.79 122.308 cv
145.79 128.872 140.47 134.194 133.905 134.194 cv
127.341 134.194 122.02 128.872 122.02 122.308 cv
cp
1 1 1 rgb
f
18.7653 139.943 mo
15.9879 139.943 13.7359 137.691 13.7359 134.913 cv
13.7359 132.135 15.9879 129.883 18.7653 129.883 cv
21.5445 129.883 23.7966 132.135 23.7966 134.913 cv
23.7966 137.691 21.5445 139.943 18.7653 139.943 cv
.4 .694118 .768627 rgb
f
102.181 24.5886 mo
99.4037 24.5886 97.1517 22.3366 97.1517 19.5583 cv
97.1517 16.7805 99.4037 14.5285 102.181 14.5285 cv
104.96 14.5285 107.212 16.7805 107.212 19.5583 cv
107.212 22.3366 104.96 24.5886 102.181 24.5886 cv
.172549 .541176 .643137 rgb
f
290.249 130.531 mo
290.249 127.752 292.501 125.501 295.281 125.501 cv
298.058 125.501 300.31 127.752 300.31 130.531 cv
300.31 133.309 298.058 135.561 295.281 135.561 cv
292.501 135.561 290.249 133.309 290.249 130.531 cv
cp
1 1 1 rgb
f
9.66992 11.3544 mo
9.66992 9.68495 11.0214 8.33335 12.6914 8.33335 cv
14.3593 8.33335 15.7128 9.68495 15.7128 11.3544 cv
15.7128 13.0234 14.3593 14.375 12.6914 14.375 cv
11.0214 14.375 9.66992 13.0234 9.66992 11.3544 cv
cp
f
376.5 29.9703 mo
376.5 28.3013 377.852 26.9493 379.52 26.9493 cv
381.19 26.9493 382.541 28.3013 382.541 29.9703 cv
382.541 31.6392 381.19 32.9908 379.52 32.9908 cv
377.852 32.9908 376.5 31.6392 376.5 29.9703 cv
cp
.00392157 .352941 .470588 rgb
f
433.581 137.712 mo
433.581 134.934 435.833 132.682 438.61 132.682 cv
441.389 132.682 443.641 134.934 443.641 137.712 cv
443.641 140.49 441.389 142.742 438.61 142.742 cv
435.833 142.742 433.581 140.49 433.581 137.712 cv
cp
.819608 .913725 1 rgb
f
52.4179 83.7247 mo
44.2448 79.3977 li
46.9584 74.2722 li
50.8162 76.3146 li
55.1312 78.5991 li
52.4179 83.7247 li
.278431 .65098 .717647 rgb
f
95.0983 121.336 mo
32.8503 121.336 li
32.8503 116.998 li
32.8503 114.473 34.8971 112.426 37.422 112.426 cv
74.3588 112.426 li
74.3588 104.489 li
74.0164 104.505 73.6805 104.535 73.3315 104.535 cv
66.1544 104.535 56.7592 104.535 56.7592 104.535 cv
56.7592 104.023 li
54.3913 104.023 li
54.3913 103.901 li
54.3913 105.36 50.292 106.542 45.2352 106.542 cv
40.1784 106.542 36.0789 105.36 36.0789 103.901 cv
36.0789 103.669 36.0789 101.893 36.0789 101.893 cv
36.0789 100.434 40.1784 99.2516 45.2352 99.2516 cv
50.292 99.2516 54.3913 100.434 54.3913 101.893 cv
54.3913 101.893 54.3913 102.065 54.3913 102.299 cv
56.7592 102.299 li
56.7592 95.499 li
33.3854 95.499 li
33.3854 92.131 li
60.9091 92.131 li
60.9091 95.499 li
65.981 95.499 li
77.116 95.499 82.406 80.9113 69.8973 73.9516 cv
62.9013 70.3781 li
63.3719 69.4892 li
63.3719 69.4891 li
59.4133 76.9665 li
60.1765 77.3707 li
58.5639 80.4165 li
55.1312 78.5991 li
55.1313 78.5991 li
50.8162 76.3146 li
43.5255 72.4547 li
45.1381 69.409 li
45.9014 69.8131 li
62.82 37.8554 li
66.3555 39.7271 li
69.0628 34.6135 li
75.5036 38.0234 li
72.7963 43.137 li
76.3321 45.0088 li
70.0008 56.9678 li
70.0009 56.9678 li
70.5008 56.0236 li
77.6583 59.7991 li
97.3764 69.7028 97.7166 89.1197 87.7939 98.7825 cv
88.4375 101.321 91.276 112.426 91.276 112.426 cv
90.5267 112.426 li
93.0516 112.426 95.0983 114.473 95.0983 116.998 cv
95.0983 121.336 li
f
55.1312 78.5991 mo
50.8162 76.3146 li
55.1313 78.5991 li
.2 .545098 .607843 rgb
f
71.3504 40.0272 mo
54.4316 71.9848 li
40.9196 64.8313 li
57.8382 32.8737 li
71.3504 40.0272 li
cp
.811765 .992157 1 rgb
f
55.1948 72.3889 mo
53.5823 75.4347 li
38.5437 67.4732 li
40.1563 64.4273 li
55.1948 72.3889 li
cp
0 .470588 .545098 rgb
f
70.5219 33.0417 mo
67.8147 38.1553 li
61.3737 34.7454 li
64.081 29.6318 li
70.5219 33.0417 li
cp
.00392157 .352941 .470588 rgb
f
50.1495 73.6174 mo
47.4361 78.743 li
39.263 74.4161 li
41.9766 69.2906 li
50.1495 73.6174 li
cp
f
90.1167 116.355 mo
27.8685 116.355 li
27.8685 112.016 li
27.8685 109.491 29.9154 107.445 32.4403 107.445 cv
85.545 107.445 li
88.0699 107.445 90.1167 109.491 90.1167 112.016 cv
90.1167 116.355 li
cp
f
72.6765 54.8175 mo
65.5191 51.0418 li
57.9196 65.3965 li
64.9157 68.9699 li
77.4242 75.9296 72.1344 90.5172 60.9993 90.5172 cv
51.7774 90.5172 li
51.7774 99.5529 li
51.7774 99.5529 61.1728 99.5529 68.3497 99.5529 cv
90.4424 99.5529 99.5697 68.3248 72.6765 54.8175 cv
cp
.164706 .521569 .54902 rgb
f
28.4037 87.1493 mo
55.9275 87.1493 li
55.9275 90.5172 li
28.4037 90.5172 li
28.4037 87.1493 li
cp
0 .470588 .545098 rgb
f
49.4095 97.3171 mo
51.7776 97.3171 li
51.7776 99.0418 li
49.4095 99.0418 li
49.4095 97.3171 li
cp
.592157 .521569 .431373 rgb
f
49.4095 98.919 mo
49.4095 100.378 45.3102 101.561 40.2534 101.561 cv
35.1965 101.561 31.0972 100.378 31.0972 98.919 cv
31.0972 98.6877 31.0972 96.9114 31.0972 96.9114 cv
31.0972 96.9114 35.9986 96.2776 40.2534 96.2776 cv
44.362 96.2776 49.4095 96.9114 49.4095 96.9114 cv
49.4095 96.9114 49.4095 98.6455 49.4095 98.919 cv
cp
0 .470588 .545098 rgb
f
49.4095 96.9114 mo
49.4095 98.3702 45.3102 99.5529 40.2534 99.5529 cv
35.1965 99.5529 31.0972 98.3702 31.0972 96.9114 cv
31.0972 95.4525 35.1965 94.2699 40.2534 94.2699 cv
45.3102 94.2699 49.4095 95.4525 49.4095 96.9114 cv
cp
1 1 1 rgb
f
66.5432 61.0396 mo
66.9597 60.3181 67.7446 59.9253 68.6126 59.8939 cv
68.7379 59.366 68.8113 58.8177 68.8113 58.2513 cv
68.8113 57.6848 68.7379 57.1366 68.6125 56.6085 cv
67.7446 56.5773 66.9597 56.1844 66.5432 55.4629 cv
66.1266 54.7417 66.1787 53.8658 66.5853 53.0987 cv
65.7887 52.3452 64.8211 51.7729 63.7427 51.4516 cv
63.2819 52.1898 62.548 52.6746 61.7135 52.6746 cv
60.8788 52.6746 60.1449 52.1898 59.6841 51.4516 cv
58.6057 51.7729 57.638 52.3452 56.8414 53.0987 cv
57.2481 53.8658 57.3001 54.7417 56.8837 55.4629 cv
56.4671 56.1844 55.6822 56.5773 54.8143 56.6085 cv
54.6889 57.1366 54.6155 57.6848 54.6155 58.2513 cv
54.6155 58.8177 54.6889 59.366 54.8143 59.8939 cv
55.6821 59.9253 56.4671 60.3181 56.8837 61.0396 cv
57.3001 61.761 57.2481 62.6369 56.8414 63.4041 cv
57.638 64.1573 58.6057 64.7296 59.6841 65.051 cv
60.1449 64.3129 60.8788 63.8281 61.7135 63.8281 cv
62.548 63.8281 63.2819 64.3129 63.7427 65.051 cv
64.8211 64.7296 65.7887 64.1573 66.5853 63.4041 cv
66.1787 62.6369 66.1266 61.761 66.5432 61.0396 cv
cp
.317647 .298039 .345098 rgb
f
64.7104 58.2513 mo
64.7104 59.9064 63.3686 61.2482 61.7135 61.2482 cv
60.0582 61.2482 58.7165 59.9064 58.7165 58.2513 cv
58.7165 56.5961 60.0582 55.2544 61.7135 55.2544 cv
63.3686 55.2544 64.7104 56.5961 64.7104 58.2513 cv
cp
.776471 .776471 .729412 rgb
f
82.6815 93.2815 mo
81.9417 89.462 79.7033 86.6292 76.0293 86.6292 cv
72.3554 86.6292 70.1169 89.462 69.3771 93.2815 cv
69.3771 107.445 li
76.0293 107.445 li
86.2944 107.445 li
86.2944 107.445 82.7048 93.4013 82.6815 93.2815 cv
cp
.811765 .992157 1 rgb
f
79.7041 92.7045 mo
79.7041 94.8607 77.9563 96.6085 75.8001 96.6085 cv
73.644 96.6085 71.8961 94.8607 71.8961 92.7045 cv
71.8961 90.5484 73.644 88.8005 75.8001 88.8005 cv
77.9563 88.8005 79.7041 90.5484 79.7041 92.7045 cv
cp
.00392157 .352941 .470588 rgb
f
333.738 69.9279 mo
294.666 69.9279 li
294.666 68.6346 li
294.666 67.0289 295.968 65.7272 297.574 65.7272 cv
300.265 65.7272 li
300.265 63.2652 li
312.833 63.2652 li
312.833 65.7272 li
326.978 65.7272 li
326.978 35.9125 li
326.82 35.8057 326.66 35.7014 326.522 35.5708 cv
326.622 35.3812 326.677 35.178 326.682 34.9779 cv
309.729 34.9779 li
309.729 35.3325 li
313.639 36.6561 316.302 40.3135 316.302 44.5073 cv
316.302 49.8558 311.951 54.2069 306.602 54.2069 cv
301.254 54.2069 296.903 49.8558 296.903 44.5073 cv
296.903 40.3135 299.565 36.6561 303.476 35.3325 cv
303.476 34.9779 li
300.125 34.9779 li
299.066 34.9779 298.208 34.1196 298.208 33.0608 cv
298.208 32.0021 299.066 31.1437 300.125 31.1437 cv
303.476 31.1437 li
303.476 25.5967 li
303.476 24.5242 li
303.194 24.2404 303.019 23.8501 303.019 23.4196 cv
303.019 23.043 li
303.019 22.1778 303.723 21.4738 304.588 21.4738 cv
308.616 21.4738 li
309.482 21.4738 310.186 22.1778 310.186 23.043 cv
310.186 23.4196 li
310.186 23.8501 310.011 24.2404 309.729 24.5242 cv
309.729 25.5967 li
309.729 31.1437 li
326.682 31.1437 li
326.677 30.9436 326.622 30.7404 326.522 30.5508 cv
326.66 30.4202 326.82 30.3158 326.978 30.2091 cv
326.978 28.2087 li
326.978 27.15 327.836 26.2917 328.895 26.2917 cv
329.954 26.2917 330.812 27.15 330.812 28.2087 cv
330.812 30.2091 li
330.97 30.3158 331.13 30.4202 331.268 30.5508 cv
331.168 30.7404 331.113 30.9436 331.109 31.1437 cv
332.834 31.1437 li
333.893 31.1437 334.751 32.0021 334.751 33.0608 cv
334.751 34.1196 333.893 34.9779 332.834 34.9779 cv
331.108 34.9779 li
331.113 35.178 331.168 35.3812 331.268 35.5708 cv
331.13 35.7014 330.97 35.8058 330.812 35.9125 cv
330.812 65.7272 li
330.831 65.7272 li
332.436 65.7272 333.738 67.0289 333.738 68.6346 cv
333.738 69.9279 li
.278431 .65098 .717647 rgb
f
306.602 62.3737 mo
305.506 62.3737 304.661 61.5179 304.661 60.3439 cv
304.661 59.1044 305.441 57.5811 306.602 56.8279 cv
306.522 58.8021 308.18 59.0164 308.411 60.3882 cv
308.604 61.535 307.699 62.3737 306.602 62.3737 cv
f
306.437 20.1789 mo
306.071 20.1789 305.774 19.8823 305.774 19.5162 cv
305.774 19.343 305.844 19.1883 305.952 19.0704 cv
305.648 18.9623 305.427 18.6793 305.427 18.338 cv
305.427 17.9174 305.76 17.5806 306.176 17.5603 cv
306.139 17.3775 li
306.139 16.8469 306.569 16.4169 307.099 16.4169 cv
307.63 16.4169 308.06 16.8469 308.06 17.3775 cv
308.04 17.477 li
308.152 17.4542 li
308.406 17.4542 308.612 17.6604 308.612 17.9145 cv
308.612 18.1106 308.489 18.2753 308.316 18.3416 cv
308.423 18.4877 308.498 18.6583 308.498 18.8533 cv
308.498 19.3415 308.103 19.7372 307.615 19.7372 cv
307.416 19.7372 307.241 19.659 307.093 19.5477 cv
307.076 19.8982 306.791 20.1789 306.437 20.1789 cv
f
303.336 50.9406 mo
297.987 50.9406 293.636 46.5895 293.636 41.241 cv
293.636 37.0471 296.299 33.3898 300.209 32.0662 cv
300.209 20.6097 li
306.463 20.6097 li
306.463 32.0662 li
310.373 33.3898 313.035 37.0471 313.035 41.241 cv
313.035 46.5895 308.684 50.9406 303.336 50.9406 cv
cp
.427451 .823529 .901961 rgb
f
305.367 32.8882 mo
305.367 21.7051 li
301.305 21.7051 li
301.305 32.8882 li
297.535 33.8023 294.732 37.1901 294.732 41.241 cv
294.732 45.9929 298.584 49.845 303.336 49.845 cv
308.088 49.845 311.94 45.9929 311.94 41.241 cv
311.94 37.1901 309.137 33.8023 305.367 32.8882 cv
cp
1 1 1 rgb
f
305.367 21.7051 mo
305.367 22.7933 li
305.795 22.7885 306.182 22.6131 306.463 22.3305 cv
306.463 20.6097 li
305.749 20.6097 li
305.824 20.8493 li
305.824 21.2258 li
305.824 21.4875 305.612 21.6994 305.35 21.6994 cv
305.367 21.7051 li
cp
.282353 .4 .623529 rgb
f
296.866 36.4448 mo
295.864 37.7942 295.28 39.4574 295.28 41.2411 cv
295.28 45.6834 298.893 49.2974 303.336 49.2974 cv
307.778 49.2974 311.392 45.6834 311.392 41.2411 cv
311.392 39.4574 310.808 37.7942 309.805 36.4448 cv
296.866 36.4448 li
cp
.721569 .219608 .0745098 rgb
f
301.305 21.7051 mo
301.305 22.7933 li
300.877 22.7885 300.49 22.6131 300.209 22.3305 cv
300.209 20.6097 li
300.923 20.6097 li
300.848 20.8493 li
300.848 21.2258 li
300.848 21.4875 301.06 21.6994 301.322 21.6994 cv
301.305 21.7051 li
cp
.282353 .4 .623529 rgb
f
301.322 21.7223 mo
300.457 21.7223 299.753 21.0184 299.753 20.1532 cv
299.753 19.7766 li
299.753 18.9115 300.457 18.2075 301.322 18.2075 cv
305.35 18.2075 li
306.215 18.2075 306.919 18.9115 306.919 19.7766 cv
306.919 20.1532 li
306.919 21.0184 306.215 21.7223 305.35 21.7223 cv
301.322 21.7223 li
cp
.427451 .823529 .901961 rgb
f
305.824 20.1532 mo
305.824 19.7766 li
305.824 19.5151 305.612 19.3031 305.35 19.3031 cv
301.322 19.3031 li
301.06 19.3031 300.848 19.5151 300.848 19.7766 cv
300.848 20.1532 li
300.848 20.4147 301.06 20.6268 301.322 20.6268 cv
305.35 20.6268 li
305.612 20.6268 305.824 20.4147 305.824 20.1532 cv
cp
1 1 1 rgb
f
307.284 39.5487 mo
307.284 39.8511 307.039 40.0964 306.736 40.0964 cv
306.434 40.0964 306.189 39.8511 306.189 39.5487 cv
306.189 39.2461 306.434 39.0009 306.736 39.0009 cv
307.039 39.0009 307.284 39.2461 307.284 39.5487 cv
cp
.960784 .537255 .34902 rgb
f
305.139 37.5404 mo
305.139 37.8428 304.894 38.088 304.591 38.088 cv
304.289 38.088 304.043 37.8428 304.043 37.5404 cv
304.043 37.2377 304.289 36.9925 304.591 36.9925 cv
304.894 36.9925 305.139 37.2377 305.139 37.5404 cv
cp
f
310.574 42.1019 mo
310.574 42.8849 309.939 43.5197 309.156 43.5197 cv
308.373 43.5197 307.738 42.8849 307.738 42.1019 cv
307.738 41.3189 308.373 40.6841 309.156 40.6841 cv
309.939 40.6841 310.574 41.3189 310.574 42.1019 cv
cp
f
305.595 44.427 mo
305.595 44.6791 305.391 44.8834 305.139 44.8834 cv
304.887 44.8834 304.683 44.6791 304.683 44.427 cv
304.683 44.175 304.887 43.9705 305.139 43.9705 cv
305.391 43.9705 305.595 44.175 305.595 44.427 cv
cp
f
305.79 41.2288 mo
305.79 41.711 305.399 42.1019 304.917 42.1019 cv
304.434 42.1019 304.043 41.711 304.043 41.2288 cv
304.043 40.7466 304.434 40.3557 304.917 40.3557 cv
305.399 40.3557 305.79 40.7466 305.79 41.2288 cv
cp
f
309.566 37.5404 mo
309.566 37.7672 309.383 37.951 309.156 37.951 cv
308.929 37.951 308.745 37.7672 308.745 37.5404 cv
308.745 37.3133 308.929 37.1295 309.156 37.1295 cv
309.383 37.1295 309.566 37.3133 309.566 37.5404 cv
cp
f
302.229 38.088 mo
302.229 38.4661 301.922 38.7727 301.544 38.7727 cv
301.166 38.7727 300.86 38.4661 300.86 38.088 cv
300.86 37.71 301.166 37.4033 301.544 37.4033 cv
301.922 37.4033 302.229 37.71 302.229 38.088 cv
cp
.960784 .686275 .517647 rgb
f
298.621 38.687 mo
298.621 38.941 298.415 39.1469 298.161 39.1469 cv
297.907 39.1469 297.701 38.941 297.701 38.687 cv
297.701 38.4331 297.907 38.2272 298.161 38.2272 cv
298.415 38.2272 298.621 38.4331 298.621 38.687 cv
cp
f
302.235 41.8302 mo
302.235 42.3343 301.826 42.7431 301.322 42.7431 cv
300.818 42.7431 300.409 42.3343 300.409 41.8302 cv
300.409 41.326 300.818 40.9173 301.322 40.9173 cv
301.826 40.9173 302.235 41.326 302.235 41.8302 cv
cp
f
299.068 43.9705 mo
299.068 44.4716 298.662 44.8778 298.161 44.8778 cv
297.66 44.8778 297.254 44.4716 297.254 43.9705 cv
297.254 43.4695 297.66 43.0633 298.161 43.0633 cv
298.662 43.0633 299.068 43.4695 299.068 43.9705 cv
cp
f
327.564 62.4608 mo
294.307 62.4608 li
292.702 62.4608 291.4 63.7625 291.4 65.3683 cv
291.4 66.6616 li
330.472 66.6616 li
330.472 65.3683 li
330.472 63.7625 329.17 62.4608 327.564 62.4608 cv
cp
0 .470588 .545098 rgb
f
325.629 23.0253 mo
325.629 23.0253 li
326.688 23.0253 327.546 23.8837 327.546 24.9424 cv
327.546 62.4608 li
323.711 62.4608 li
323.711 24.9424 li
323.711 23.8837 324.57 23.0253 325.629 23.0253 cv
cp
f
331.485 29.7944 mo
331.485 29.7944 li
331.485 30.8532 330.627 31.7115 329.568 31.7115 cv
296.859 31.7115 li
295.8 31.7115 294.942 30.8532 294.942 29.7944 cv
294.942 28.7357 295.8 27.8774 296.859 27.8774 cv
329.568 27.8774 li
330.627 27.8774 331.485 28.7357 331.485 29.7944 cv
cp
f
327.981 31.1528 mo
328.184 30.8013 328.567 30.6099 328.99 30.5946 cv
329.051 30.3375 329.086 30.0704 329.086 29.7944 cv
329.086 29.5185 329.051 29.2515 328.99 28.9944 cv
328.567 28.9791 328.184 28.7877 327.981 28.4362 cv
327.779 28.0848 327.804 27.6582 328.002 27.2845 cv
327.614 26.9174 327.142 26.6387 326.617 26.4822 cv
326.393 26.8417 326.035 27.0779 325.629 27.0779 cv
325.222 27.0779 324.865 26.8417 324.64 26.4822 cv
324.115 26.6387 323.643 26.9174 323.255 27.2845 cv
323.453 27.6582 323.479 28.0848 323.276 28.4362 cv
323.073 28.7877 322.691 28.9791 322.268 28.9944 cv
322.207 29.2515 322.171 29.5185 322.171 29.7944 cv
322.171 30.0704 322.207 30.3375 322.268 30.5946 cv
322.691 30.6099 323.073 30.8013 323.276 31.1528 cv
323.479 31.5042 323.453 31.9309 323.255 32.3045 cv
323.643 32.6715 324.115 32.9503 324.64 33.1069 cv
324.865 32.7472 325.222 32.5112 325.629 32.5112 cv
326.035 32.5112 326.393 32.7472 326.617 33.1069 cv
327.142 32.9503 327.614 32.6715 328.002 32.3045 cv
327.804 31.9309 327.779 31.5042 327.981 31.1528 cv
cp
.192157 .192157 .192157 rgb
f
327.089 29.7944 mo
327.089 30.6008 326.435 31.2543 325.629 31.2543 cv
324.822 31.2543 324.169 30.6008 324.169 29.7944 cv
324.169 28.9882 324.822 28.3346 325.629 28.3346 cv
326.435 28.3346 327.089 28.9882 327.089 29.7944 cv
cp
.478431 .478431 .439216 rgb
f
305.145 57.1219 mo
305.338 58.2687 304.432 59.1074 303.336 59.1074 cv
302.239 59.1074 301.395 58.2516 301.395 57.0776 cv
301.395 55.838 302.175 54.3148 303.336 53.5616 cv
303.256 55.5357 304.913 55.7501 305.145 57.1219 cv
cp
.721569 .219608 .0745098 rgb
f
309.566 59.9989 mo
296.999 59.9989 li
296.999 62.4608 li
309.566 62.4608 li
309.566 59.9989 li
cp
1 .733333 .14902 rgb
f
302.161 15.0717 mo
302.161 15.4129 302.382 15.696 302.686 15.8041 cv
302.577 15.9221 302.507 16.0768 302.507 16.2499 cv
302.507 16.6159 302.804 16.9126 303.17 16.9126 cv
303.525 16.9126 303.809 16.6319 303.827 16.2814 cv
303.974 16.3927 304.149 16.4708 304.348 16.4708 cv
304.837 16.4708 305.232 16.0751 305.232 15.587 cv
305.232 15.3921 305.156 15.2214 305.049 15.0752 cv
305.222 15.009 305.346 14.8443 305.346 14.6482 cv
305.346 14.394 305.14 14.1879 304.886 14.1879 cv
304.773 14.2106 li
304.793 14.1111 li
304.793 13.5805 304.363 13.1506 303.833 13.1506 cv
303.302 13.1506 302.872 13.5805 302.872 14.1111 cv
302.909 14.2941 li
302.494 14.3142 302.161 14.6511 302.161 15.0717 cv
cp
.960784 .686275 .517647 rgb
f
157.044 33.9292 mo
149.895 33.926 li
149.154 32.9522 li
143.35 26.7989 li
143.181 26.6535 143.029 26.4834 142.884 26.3053 cv
142.828 26.3269 142.767 26.3375 142.705 26.3375 cv
142.488 26.3375 142.244 26.2119 142.066 25.9777 cv
141.803 25.6317 141.79 25.1983 142.038 25.0097 cv
142.162 24.9154 li
141.761 23.456 142.248 21.8361 143.526 20.8632 cv
144.216 20.3386 145.025 20.0858 145.828 20.0858 cv
146.515 20.0858 147.197 20.2703 147.795 20.6275 cv
147.919 20.5333 li
147.997 20.4742 148.091 20.4461 148.192 20.4461 cv
148.412 20.4461 148.664 20.5807 148.845 20.8183 cv
149.075 21.1206 149.102 21.4796 148.943 21.6939 cv
149.076 21.8813 149.199 22.073 149.294 22.2743 cv
153.679 29.508 li
157.044 33.9292 li
.278431 .65098 .717647 rgb
f
170.847 60.1056 mo
160.699 60.1056 li
150.55 60.1056 li
150.55 56.8822 li
143.283 53.1803 138.302 45.6336 138.302 36.9185 cv
138.213 36.9185 li
137.683 36.9185 137.252 36.4882 137.252 35.9575 cv
137.252 34.9102 li
137.252 34.3794 137.683 33.949 138.213 33.949 cv
183.184 33.949 li
183.715 33.949 184.145 34.3794 184.145 34.9102 cv
184.145 35.9575 li
184.145 36.3555 183.903 36.6972 183.558 36.843 cv
183.443 36.8917 183.317 36.9185 183.184 36.9185 cv
183.184 36.9185 li
183.095 36.9185 li
183.095 45.6336 178.115 53.1803 170.847 56.8822 cv
170.847 60.1056 li
f
179.184 29.9493 mo
134.213 29.9493 li
133.683 29.9493 133.252 30.3795 133.252 30.9103 cv
133.252 31.9576 li
133.252 32.4883 133.683 32.9186 134.213 32.9186 cv
134.302 32.9186 li
134.302 41.6336 139.283 49.1803 146.55 52.8822 cv
146.55 56.1057 li
166.847 56.1057 li
166.847 52.8822 li
174.115 49.1803 179.095 41.6336 179.095 32.9186 cv
179.184 32.9186 li
179.715 32.9186 180.145 32.4883 180.145 31.9576 cv
180.145 30.9103 li
180.145 30.3795 179.715 29.9493 179.184 29.9493 cv
cp
.811765 .992157 1 rgb
f
153.044 29.9293 mo
149.679 25.5082 li
145.294 18.2744 li
145.182 18.0368 145.045 17.807 144.879 17.5894 cv
143.602 15.9107 141.205 15.5856 139.526 16.8633 cv
137.848 18.1409 137.522 20.5375 138.8 22.2163 cv
138.966 22.4338 139.151 22.6275 139.35 22.799 cv
145.154 28.9523 li
145.895 29.9259 li
153.044 29.9293 li
cp
0 .470588 .545098 rgb
f
144.845 16.8184 mo
144.582 16.4723 144.167 16.3447 143.919 16.5334 cv
138.038 21.0097 li
137.79 21.1984 137.803 21.6318 138.066 21.9778 cv
138.329 22.3239 138.744 22.4515 138.992 22.2628 cv
144.873 17.7866 li
145.121 17.5979 145.108 17.1645 144.845 16.8184 cv
cp
.486275 .627451 .682353 rgb
f
166.847 52.8822 mo
156.699 52.8822 li
156.699 56.1057 li
166.847 56.1057 li
166.847 52.8822 li
cp
.478431 .478431 .439216 rgb
f
156.699 56.1057 mo
156.699 52.8822 li
146.55 52.8822 li
146.55 56.1057 li
156.699 56.1057 li
cp
f
180.145 31.9576 mo
180.145 30.9103 li
180.145 30.3795 179.715 29.9492 179.184 29.9492 cv
134.213 29.9492 li
133.683 29.9492 133.252 30.3795 133.252 30.9103 cv
133.252 31.9576 li
133.252 32.4883 133.683 32.9186 134.213 32.9186 cv
134.302 32.9186 li
179.095 32.9186 li
179.184 32.9186 li
179.715 32.9186 180.145 32.4883 180.145 31.9576 cv
cp
f
258.759 111.991 mo
251.847 111.991 li
250.212 111.991 248.886 110.665 248.886 109.029 cv
248.886 108.239 248.245 107.598 247.454 107.598 cv
232.238 107.598 li
217.022 107.598 li
216.231 107.598 215.591 108.239 215.591 109.029 cv
215.591 110.665 214.265 111.991 212.629 111.991 cv
205.718 111.991 li
204.082 111.991 202.756 110.665 202.756 109.029 cv
202.756 107.598 li
202.756 82.9976 li
202.756 79.6449 205.474 76.9272 208.827 76.9272 cv
210.183 76.9272 li
210.183 71.8637 li
210.084 71.8637 li
209.416 71.8637 208.872 71.3201 208.872 70.652 cv
208.872 68.7961 li
208.872 68.1278 209.416 67.5842 210.084 67.5842 cv
220.496 67.5842 li
221.164 67.5842 221.708 68.1278 221.708 68.7961 cv
221.708 70.652 li
221.708 71.3201 221.164 71.8637 220.496 71.8637 cv
220.397 71.8637 li
220.397 72.5819 li
220.397 76.9272 li
226.229 76.9272 li
226.229 71.8637 li
226.13 71.8637 li
225.462 71.8637 224.918 71.3201 224.918 70.652 cv
224.918 68.7961 li
224.918 68.1278 225.462 67.5842 226.13 67.5842 cv
236.542 67.5842 li
237.21 67.5842 237.754 68.1278 237.754 68.7961 cv
237.754 70.652 li
237.754 71.3201 237.21 71.8637 236.542 71.8637 cv
236.443 71.8637 li
236.443 76.9272 li
242.275 76.9272 li
242.275 71.8637 li
242.176 71.8637 li
241.508 71.8637 240.964 71.3201 240.964 70.652 cv
240.964 68.7961 li
240.964 68.1278 241.508 67.5842 242.176 67.5842 cv
252.588 67.5842 li
253.256 67.5842 253.8 68.1278 253.8 68.7961 cv
253.8 70.652 li
253.8 71.3201 253.256 71.8637 252.588 71.8637 cv
252.49 71.8637 li
252.49 76.9272 li
255.65 76.9272 li
259.002 76.9272 261.72 79.6449 261.72 82.9976 cv
261.72 107.598 li
261.72 109.029 li
261.72 110.665 260.394 111.991 258.759 111.991 cv
217.022 106.32 mo
247.454 106.32 li
248.948 106.32 250.164 107.536 250.164 109.03 cv
250.164 109.958 250.919 110.713 251.847 110.713 cv
258.759 110.713 li
259.687 110.713 260.442 109.958 260.442 109.03 cv
260.442 82.9974 li
260.442 80.3548 258.292 78.2051 255.65 78.2051 cv
252.49 78.2051 li
252.49 93.3651 li
252.49 96.1858 250.203 98.4725 247.382 98.4725 cv
244.562 98.4725 242.275 96.1858 242.275 93.3651 cv
242.275 78.2051 li
236.443 78.2051 li
236.443 93.3651 li
236.443 96.1858 234.157 98.4725 231.336 98.4725 cv
228.516 98.4725 226.229 96.1858 226.229 93.3651 cv
226.229 78.2051 li
220.397 78.2051 li
220.397 93.3652 li
220.397 96.1858 218.111 98.4725 215.29 98.4725 cv
212.469 98.4725 210.183 96.1858 210.183 93.3652 cv
210.183 78.2051 li
208.826 78.2051 li
206.184 78.2051 204.034 80.3548 204.034 82.9974 cv
204.034 109.03 li
204.034 109.958 204.789 110.713 205.718 110.713 cv
212.629 110.713 li
213.557 110.713 214.313 109.958 214.313 109.03 cv
214.313 107.536 215.528 106.32 217.022 106.32 cv
242.993 78.2051 mo
242.993 93.3651 li
242.993 95.7853 244.962 97.7542 247.382 97.7542 cv
249.803 97.7542 251.771 95.7853 251.771 93.3651 cv
251.771 78.2051 li
242.993 78.2051 li
226.947 78.2051 mo
226.947 93.3651 li
226.947 95.7853 228.916 97.7542 231.336 97.7542 cv
233.756 97.7542 235.725 95.7853 235.725 93.3651 cv
235.725 78.2051 li
226.947 78.2051 li
210.901 78.2051 mo
210.901 93.3651 li
210.901 95.7853 212.87 97.7542 215.29 97.7542 cv
217.71 97.7542 219.679 95.7853 219.679 93.3651 cv
219.679 78.2051 li
210.901 78.2051 li
242.993 71.8637 mo
242.993 76.9272 li
251.771 76.9272 li
251.771 71.8637 li
242.993 71.8637 li
226.947 71.8637 mo
226.947 76.9272 li
232.238 76.9272 li
235.725 76.9272 li
235.725 71.8637 li
226.947 71.8637 li
210.901 71.8637 mo
210.901 76.9272 li
219.679 76.9272 li
219.679 72.5819 li
219.679 71.8637 li
210.901 71.8637 li
242.176 68.3023 mo
241.904 68.3023 241.683 68.5233 241.683 68.7959 cv
241.683 70.6519 li
241.683 70.9246 241.904 71.1456 242.176 71.1456 cv
242.275 71.1456 li
252.49 71.1456 li
252.588 71.1456 li
252.861 71.1456 253.082 70.9246 253.082 70.6519 cv
253.082 68.7959 li
253.082 68.5233 252.861 68.3023 252.588 68.3023 cv
242.176 68.3023 li
226.13 68.3023 mo
225.857 68.3023 225.636 68.5233 225.636 68.7959 cv
225.636 70.6519 li
225.636 70.9246 225.857 71.1456 226.13 71.1456 cv
226.229 71.1456 li
236.443 71.1456 li
236.542 71.1456 li
236.815 71.1456 237.036 70.9246 237.036 70.6519 cv
237.036 68.7959 li
237.036 68.5233 236.815 68.3023 236.542 68.3023 cv
226.13 68.3023 li
210.084 68.3023 mo
209.811 68.3023 209.59 68.5233 209.59 68.7959 cv
209.59 70.6519 li
209.59 70.9246 209.811 71.1456 210.084 71.1456 cv
210.183 71.1456 li
220.397 71.1456 li
220.496 71.1456 li
220.769 71.1456 220.99 70.9246 220.99 70.6519 cv
220.99 68.7959 li
220.99 68.5233 220.769 68.3023 220.496 68.3023 cv
210.084 68.3023 li
.278431 .65098 .717647 rgb
f
216.99 66.652 mo
216.99 66.9246 216.769 67.1456 216.496 67.1456 cv
206.084 67.1456 li
205.811 67.1456 205.59 66.9246 205.59 66.652 cv
205.59 64.796 li
205.59 64.5233 205.811 64.3023 206.084 64.3023 cv
216.496 64.3023 li
216.769 64.3023 216.99 64.5233 216.99 64.796 cv
216.99 66.652 li
cp
216.496 63.5842 mo
206.084 63.5842 li
205.416 63.5842 204.872 64.1278 204.872 64.796 cv
204.872 66.652 li
204.872 67.3202 205.416 67.8637 206.084 67.8637 cv
216.496 67.8637 li
217.164 67.8637 217.708 67.3202 217.708 66.652 cv
217.708 64.796 li
217.708 64.1278 217.164 63.5842 216.496 63.5842 cv
cp
0 .470588 .545098 rgb
f
215.679 89.3651 mo
215.679 67.8637 li
206.901 67.8637 li
206.901 89.3651 li
206.901 91.7854 208.87 93.7543 211.29 93.7543 cv
213.71 93.7543 215.679 91.7854 215.679 89.3651 cv
cp
216.397 67.1456 mo
216.397 89.3652 li
216.397 92.1858 214.111 94.4725 211.29 94.4725 cv
208.469 94.4725 206.183 92.1858 206.183 89.3652 cv
206.183 67.1456 li
216.397 67.1456 li
cp
f
211.29 93.3354 mo
209.097 93.3354 207.319 91.5575 207.319 89.3644 cv
207.319 75.3149 li
215.261 75.3149 li
215.261 89.3644 li
215.261 91.5575 213.483 93.3354 211.29 93.3354 cv
cp
.721569 .219608 .0745098 rgb
f
208.237 90.495 mo
208.039 90.495 207.878 89.6102 207.878 89.4121 cv
207.878 75.8909 li
208.237 75.8909 li
208.237 90.495 li
cp
.960784 .960784 .960784 rgb
f
216.397 68.5819 mo
215.679 68.5819 li
215.679 67.8637 li
216.397 67.8637 li
216.397 68.5819 li
cp
.282353 .4 .623529 rgb
f
212.883 74.0881 mo
215.261 74.0881 li
215.261 73.37 li
212.883 73.37 li
212.883 74.0881 li
cp
f
212.883 77.7835 mo
215.261 77.7835 li
215.261 77.0654 li
212.883 77.0654 li
212.883 77.7835 li
cp
.960784 .960784 .960784 rgb
f
212.883 81.4789 mo
215.261 81.4789 li
215.261 80.7608 li
212.883 80.7608 li
212.883 81.4789 li
cp
f
212.883 85.1744 mo
215.261 85.1744 li
215.261 84.4562 li
212.883 84.4562 li
212.883 85.1744 li
cp
f
212.883 88.8698 mo
215.261 88.8698 li
215.261 88.1517 li
212.883 88.1517 li
212.883 88.8698 li
cp
f
233.036 66.652 mo
233.036 66.9246 232.815 67.1456 232.542 67.1456 cv
222.13 67.1456 li
221.857 67.1456 221.636 66.9246 221.636 66.652 cv
221.636 64.796 li
221.636 64.5233 221.857 64.3023 222.13 64.3023 cv
232.542 64.3023 li
232.815 64.3023 233.036 64.5233 233.036 64.796 cv
233.036 66.652 li
cp
232.542 63.5842 mo
222.13 63.5842 li
221.462 63.5842 220.918 64.1278 220.918 64.796 cv
220.918 66.652 li
220.918 67.3202 221.462 67.8637 222.13 67.8637 cv
232.542 67.8637 li
233.21 67.8637 233.754 67.3202 233.754 66.652 cv
233.754 64.796 li
233.754 64.1278 233.21 63.5842 232.542 63.5842 cv
cp
0 .470588 .545098 rgb
f
231.725 89.3651 mo
231.725 67.8637 li
222.947 67.8637 li
222.947 89.3651 li
222.947 91.7854 224.916 93.7543 227.336 93.7543 cv
229.756 93.7543 231.725 91.7854 231.725 89.3651 cv
cp
232.444 67.1456 mo
232.444 89.3651 li
232.444 92.1858 230.157 94.4725 227.336 94.4725 cv
224.515 94.4725 222.229 92.1858 222.229 89.3651 cv
222.229 67.1456 li
232.444 67.1456 li
cp
f
227.336 93.3354 mo
225.147 93.3354 223.365 91.5539 223.365 89.3644 cv
223.365 75.3149 li
231.307 75.3149 li
231.307 89.3644 li
231.307 91.5539 229.526 93.3354 227.336 93.3354 cv
cp
.00392157 .352941 .470588 rgb
f
224.283 90.495 mo
224.085 90.495 223.924 89.6102 223.924 89.4121 cv
223.924 75.8909 li
224.283 75.8909 li
224.283 90.495 li
cp
.960784 .960784 .960784 rgb
f
228.93 74.0881 mo
231.307 74.0881 li
231.307 73.37 li
228.93 73.37 li
228.93 74.0881 li
cp
.282353 .4 .623529 rgb
f
228.93 77.7835 mo
231.307 77.7835 li
231.307 77.0654 li
228.93 77.0654 li
228.93 77.7835 li
cp
.960784 .960784 .960784 rgb
f
228.93 81.4789 mo
231.307 81.4789 li
231.307 80.7608 li
228.93 80.7608 li
228.93 81.4789 li
cp
f
228.93 85.1744 mo
231.307 85.1744 li
231.307 84.4562 li
228.93 84.4562 li
228.93 85.1744 li
cp
f
228.93 88.8698 mo
231.307 88.8698 li
231.307 88.1517 li
228.93 88.1517 li
228.93 88.8698 li
cp
f
249.082 66.652 mo
249.082 66.9246 248.861 67.1456 248.589 67.1456 cv
238.176 67.1456 li
237.904 67.1456 237.683 66.9246 237.683 66.652 cv
237.683 64.796 li
237.683 64.5233 237.904 64.3023 238.176 64.3023 cv
248.589 64.3023 li
248.861 64.3023 249.082 64.5233 249.082 64.796 cv
249.082 66.652 li
cp
248.588 63.5842 mo
238.176 63.5842 li
237.508 63.5842 236.964 64.1278 236.964 64.796 cv
236.964 66.652 li
236.964 67.3202 237.508 67.8637 238.176 67.8637 cv
248.588 67.8637 li
249.257 67.8637 249.8 67.3202 249.8 66.652 cv
249.8 64.796 li
249.8 64.1278 249.257 63.5842 248.588 63.5842 cv
cp
0 .470588 .545098 rgb
f
247.772 89.3651 mo
247.772 67.8637 li
238.993 67.8637 li
238.993 89.3651 li
238.993 91.7854 240.962 93.7543 243.382 93.7543 cv
245.803 93.7543 247.772 91.7854 247.772 89.3651 cv
cp
248.49 67.1456 mo
248.49 89.3651 li
248.49 92.1858 246.203 94.4725 243.382 94.4725 cv
240.562 94.4725 238.275 92.1858 238.275 89.3651 cv
238.275 67.1456 li
248.49 67.1456 li
cp
f
243.382 93.3354 mo
241.193 93.3354 239.411 91.5539 239.411 89.3644 cv
239.411 75.3149 li
247.353 75.3149 li
247.353 89.3644 li
247.353 91.5539 245.572 93.3354 243.382 93.3354 cv
cp
1 .733333 .14902 rgb
f
240.329 90.495 mo
240.131 90.495 239.97 89.6102 239.97 89.4121 cv
239.97 75.8909 li
240.329 75.8909 li
240.329 90.495 li
cp
.960784 .960784 .960784 rgb
f
244.976 74.0881 mo
247.353 74.0881 li
247.353 73.37 li
244.976 73.37 li
244.976 74.0881 li
cp
.282353 .4 .623529 rgb
f
244.976 77.7835 mo
247.353 77.7835 li
247.353 77.0654 li
244.976 77.0654 li
244.976 77.7835 li
cp
.960784 .960784 .960784 rgb
f
244.976 81.4789 mo
247.353 81.4789 li
247.353 80.7608 li
244.976 80.7608 li
244.976 81.4789 li
cp
f
244.976 85.1744 mo
247.353 85.1744 li
247.353 84.4562 li
244.976 84.4562 li
244.976 85.1744 li
cp
f
244.976 88.8698 mo
247.353 88.8698 li
247.353 88.1517 li
244.976 88.1517 li
244.976 88.8698 li
cp
f
254.759 106.713 mo
255.687 106.713 256.442 105.958 256.442 105.03 cv
256.442 78.9974 li
256.442 76.3548 254.292 74.2051 251.65 74.2051 cv
204.826 74.2051 li
202.184 74.2051 200.034 76.3548 200.034 78.9974 cv
200.034 105.03 li
200.034 105.958 200.789 106.713 201.718 106.713 cv
208.629 106.713 li
209.557 106.713 210.313 105.958 210.313 105.03 cv
210.313 103.536 211.528 102.32 213.022 102.32 cv
243.454 102.32 li
244.948 102.32 246.164 103.536 246.164 105.03 cv
246.164 105.958 246.919 106.713 247.847 106.713 cv
254.759 106.713 li
cp
257.72 78.9976 mo
257.72 103.598 li
257.72 105.029 li
257.72 106.665 256.394 107.991 254.759 107.991 cv
247.847 107.991 li
246.212 107.991 244.886 106.665 244.886 105.029 cv
244.886 104.239 244.245 103.598 243.454 103.598 cv
228.238 103.598 li
213.022 103.598 li
212.231 103.598 211.591 104.239 211.591 105.029 cv
211.591 106.665 210.265 107.991 208.629 107.991 cv
201.718 107.991 li
200.082 107.991 198.756 106.665 198.756 105.029 cv
198.756 103.598 li
198.756 78.9976 li
198.756 75.645 201.474 72.9272 204.826 72.9272 cv
228.238 72.9272 li
251.65 72.9272 li
255.002 72.9272 257.72 75.645 257.72 78.9976 cv
cp
.164706 .521569 .54902 rgb
f
422.472 121.673 mo
379.865 121.673 li
379.865 119.34 li
386.552 119.34 li
392.363 118.271 394.249 115.891 395.26 112.442 cv
374.154 112.442 li
372.238 112.442 370.684 110.889 370.684 108.973 cv
370.684 67.8348 li
370.684 65.9188 372.238 64.3655 374.154 64.3655 cv
428.184 64.3655 li
430.1 64.3655 431.653 65.9188 431.653 67.8348 cv
431.653 108.973 li
431.653 110.889 430.1 112.442 428.184 112.442 cv
407.077 112.442 li
408.088 115.891 409.974 118.271 415.785 119.34 cv
422.472 119.34 li
422.472 121.673 li
.278431 .65098 .717647 rgb
f
422.854 107.112 mo
368.823 107.112 li
366.907 107.112 365.354 105.559 365.354 103.643 cv
365.354 62.5048 li
365.354 60.5888 366.907 59.0355 368.823 59.0355 cv
422.854 59.0355 li
424.77 59.0355 426.323 60.5888 426.323 62.5048 cv
426.323 103.643 li
426.323 105.559 424.77 107.112 422.854 107.112 cv
cp
.811765 .992157 1 rgb
f
419.433 99.7402 mo
372.244 99.7402 li
371.452 99.7402 370.811 99.0986 370.811 98.3071 cv
370.811 64.79 li
370.811 63.9985 371.452 63.3569 372.244 63.3569 cv
419.433 63.3569 li
420.225 63.3569 420.866 63.9985 420.866 64.79 cv
420.866 98.3071 li
420.866 99.0986 420.225 99.7402 419.433 99.7402 cv
cp
.141176 .113725 .168627 rgb
f
372.244 98.8951 mo
371.92 98.8951 371.656 98.6318 371.656 98.3075 cv
371.656 64.7902 li
371.656 64.4657 371.92 64.2024 372.244 64.2024 cv
419.433 64.2024 li
419.757 64.2024 420.021 64.4657 420.021 64.7902 cv
420.021 98.3075 li
420.021 98.6318 419.757 98.8951 419.433 98.8951 cv
372.244 98.8951 li
cp
.00392157 .352941 .470588 rgb
f
410.456 114.01 mo
395.839 114.01 li
395.839 107.112 li
401.747 107.112 li
402.758 110.561 404.644 112.941 410.456 114.01 cv
cp
.164706 .521569 .54902 rgb
f
381.222 114.01 mo
395.839 114.01 li
395.839 107.112 li
389.93 107.112 li
388.919 110.561 387.033 112.941 381.222 114.01 cv
cp
f
417.142 114.01 mo
374.535 114.01 li
374.535 116.343 li
417.142 116.343 li
417.142 114.01 li
cp
.811765 .992157 1 rgb
f
418.778 103.295 mo
418.778 104.199 418.046 104.931 417.142 104.931 cv
416.238 104.931 415.506 104.199 415.506 103.295 cv
415.506 102.392 416.238 101.659 417.142 101.659 cv
418.046 101.659 418.778 102.392 418.778 103.295 cv
cp
.345098 .631373 .670588 rgb
f
384.458 94.8106 mo
384.458 96.2874 383.261 97.4847 381.784 97.4847 cv
380.307 97.4847 379.11 96.2874 379.11 94.8106 cv
379.11 93.3337 381.784 89.6628 381.784 89.6628 cv
381.784 89.6628 384.458 93.3337 384.458 94.8106 cv
cp
1 .733333 .14902 rgb
f
397.154 74.2707 mo
382.488 84.8828 li
381.199 86.4239 li
380.967 86.7016 380.953 87.1014 381.165 87.3947 cv
382.07 88.6452 li
382.282 88.9383 382.666 89.0501 383.003 88.9164 cv
384.869 88.1742 li
399.535 77.5622 li
397.154 74.2707 li
cp
.831373 .831373 .831373 rgb
f
401.145 77.6693 mo
399.35 75.1888 li
397.555 72.7082 li
397.46 72.5767 397.276 72.5473 397.145 72.6424 cv
396.615 73.0255 li
396.484 73.1206 396.454 73.3044 396.55 73.4359 cv
398.345 75.9165 li
400.139 78.397 li
400.235 78.5287 400.418 78.5581 400.55 78.4628 cv
401.079 78.0799 li
401.211 77.9847 401.24 77.8009 401.145 77.6693 cv
cp
1 .733333 .14902 rgb
f
412.097 65.9656 mo
411.294 64.8567 409.745 64.6081 408.636 65.4104 cv
397.897 73.181 li
399.35 75.1888 li
400.803 77.1967 li
411.542 69.4263 li
412.651 68.6239 412.899 67.0745 412.097 65.9656 cv
cp
f
383.571 85.6733 mo
383.28 85.2707 li
397.61 74.9015 li
397.901 75.3042 li
383.571 85.6733 li
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.0.0
%%For: (IvAN) ()
%%Title: (1411.i043.007.S.m004.c11.medical flat banners.eps)
%%CreationDate: 11/7/2014 11:28 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj26De+!81>hAc^EBul59_[n(8g"76'Em2-*0L=Hg!&G9hB/?Hr`3%nbk,Eh6\LZB\\7Z$:%_E7e[>'.2n)rYe4SiVq.BT_
%eVoes2G>]TJ$m&kR[\Y)54i&\@cZjo:=ZPU&"<0cheI#Y/+mLi27)u!X(>U`kO?I6I./YOqELCmMH@HD1:^]^Uen5hKmL)j[51ia
%,G9KPL#981'NBTI'APe)XTI_-DmuDR:cGe/\?i.mM&jJuo:HNko5^nfo\/DQmE5R*k&r=Roo\/$`!<5W28e@u4FGB6rA1WUBo=l*
%&Jk;s?H?LhMjaMJ6<[@2Jqb-@dGuD>)fn>2n7S0Js!+o-TC?Kbd5-MjkMRJDD/b&6+fF9TQN^Je!sk<m:*Kq(rG&+e[=&rCcHWGY
%=Vh$7IgM3F$j^k+dd]!6>!-:M*U'^pUhG/ST4S%pe]]i,/,;n"N4EQtW;Jjs/h%GHI+YFnbr<%N)u*tVbS;AlZ<m)P5[RL';"83m
%(%UQqM/hl>ci#a-@D1+*!EdT+>4CoZVn2'inkn20Ch1<>f8f08WM@Xq>?Qm;H:I(#>r1gUcYBUuA=2c<)5\9@0OV>Q@4Z(rD&o[p
%b(=5A*2<TI`r0NF]NeZP\t*!T\LZc`VcbW@@VYLn,Q=AdZ]=V.%K=M!!uK[.^D7BtprV)[7GtT?b9LhL]2mXc=)g3'q!08_H4=IP
%V1(&37_d;/W1qb&Zk20V<?2F2CKU,aJ%ZKPS<JRt#<qQ4l^c%5mB$<]?h:g+rRB0+oo&3`'*bt2fg#EF^FWpXBej:\RpH]lJDW_a
%XB09j%&jg%D#,%>(!=t._1.Z5LRAKA,H=!o[qe5,9"got/F\hPGYmpF?8Fqj_@$%[5N.M*I#=pl7)/[a;4Sg\%:BRo69&9D?\+kt
%9%9*W^&Z.;f1N0LG4B@tF/2:@P14aKX*RsQPZu\B4r&+r2;@5%`BX4LCAZ*iN0<"umFOa-S"8,!k."a$7*H2Jnl%BPc*f#fE%E_h
%XbEVJ[0.SLWKf'=;CS4s]uELOfWUu4hnp5[DqAarW(=hRYJ'_/YUKmM^fCNYg+JXV+V'n7=5k4uj0ad]Hf`^"',AR]XBYi`S2ol!
%gO:tKokFT"[ER$PfC3Lc#+.nXQ0&BT$Iob?0+YH&9G8M/hX5p[ej]mP-2]d0$GX9(\b?H448k[&(XZ?3c!Nh%X_$YpX]B3+E>^ab
%/>%+>4t*]_5g2*T?8kXLU0K-)r>K,6bfVOdkjThre,G&3_oI&"BlaZMPp<67Frj0MkuBbWl^r3sI5(`(k#DR#F?nh;9f+R@Ieio9
%SUd./EEqQM+m)i-3dsd]$3)=piSX0fOP;q?<>l\1#ocW3\WhU[6lHjrF`L9C89HmdB;E-f8kD9Q%!sE@.?gVBgR[IU6tWj$5Fag0
%e53T,Q&gWl>5bC*#*V';S/1'l`1(;AA(]fcNXr%feuA'RgYU7E7&e8fU'W,b3*AtjeYsfKA-(]BX?]fBLQcfE[JWA?s3ZCcQc,tJ
%i?qS_K.(,/;(u6HqT$L<L=5aqa'gMdK^Sal,3o]Ql%)'j?u.%:EQR!5^!eP/4!N<L@(?Ni+1'b18QQ5[g)tMTVh:%Y^/,6hU8TWZ
%FLe5SOL$^T""SZs/@1XsEYCr:)Tkbi$.BO0)/1MnB7t;<9b2XIb,]j!Pm2;.&BlGfQt\65mU.Y5+tS`8dTA,]jjI6`NTEV<IuINf
%jUr.]26kplT7LZ.)%i&ScY`MCrQ<NA=/u:AdgL9H)"3tq3eMP42#<XI_LYb"PkTZnBd7Ae-q?]JY<t[fLmrO"`p!ZnGb%m9m+"!!
%bMZq.bmC2JPXMX?`i.LQd#^YrQc>uTlXsi^^O:eQ9qs12VO=>nY4'gN:$!q0T_F8Sq208:ih).FED+O"r2M$a%8+9Q8QgXVp/\):
%jq[iiU6gh3)#Cc+_S+h'SO!=Dl@\WGFpS9]`i`81RToGgX6nH#$r1`'Z-fHq-ZJt?7_RqkMnl:4PQi,N9S<@>IlM6kU12""@0l-3
%On$0hAGgB45/on%>\idS9+!9,?8mo*<8Eae_c/Z[1UeV`HO`>NMC.1-\7Tno2HMmc9`lY[e1QrD`$HLt@!U";qkEAbP:Qc1Pr>\-
%gN8BtL=B?-2ro!UZ772>`^C%jQ[08_oZ8/06$1+[@,j-nZa9X\%9*;I)96G"K!1BBSsBfR9>>c?,:BD;gIZ9ZB6-1Q[28'[T:>C)
%=Lu[g&2dtTjcbLjM,.n6TOG^$R^q7<Xa7[dg%>7C-!7*=cY^nC\W'K)Y@j?0-pL!UChgia,al>;T8C%c$Yqlu2k/_PKVhg#GEOA:
%!--e#DnXi6^q9FU(to9)6Y95Uc-g$t,f_Sc?&b]'.ofob0db)MYTNQq5n8Bj[+-^46'g`qgN;N;VK`nnH8'fZ%`TmKfK43\j%klk
%r+XR'=qVA.pQ*9hlp+:Zh+;'<Vo8'uq#pr"K/QFtj2=_[bTAc(-<EoICIc?g(-E3\4)J8J[@1G_ngj@67$:QKSg*3hmkDS@eFi(l
%/M\sT''OsKd_f/FWN1#BRs_csW-C`Q+&mOM25\g_<'@04_,B#e6oq4P1,IBh5A/q1^-k`3Uta5Z[B*'JO"C"bE+8(P,_9WZ3+a0Y
%T&$tM8PHRA4&(eZQl_NSJ=)0p#t[n3:?1.VM=gHMa3g)/gWgFL7QN&$.`ll#<5pki#prlgT#<"VO3r%Y1,Wh;bs+uLQP+4gou:.@
%?;2VEKJkGDC@tb^)<)BhSSI>F>nSVQ.e;5(9*.[8-+O"I@#^'QYO[bK.fh*W$FIKY6Dm+WNf0]*\`S5F:1-=\?,QtK'@7GeNf0h=
%/qQ-RK#V.0&]5tq*.M3]2LW_$,bV>?.cZ_b8Os4d`u8**[;n-eEa-,W*mDF=Cs1*4lpN;JdS?#P`(YQ3QL7//KZTeQ7%(3K-qS<p
%R_#UL`S&t&o%uR=2mFSbnWkPbq4&)H1Z`s\MR0Z+,mc;UguOi-23mSu)>@Hs=l5.#+E1*MUAWVq1/iNsMR0Z+,mc;iDa.lT0+(AH
%U.gJo/'cRLPU+1@]LnRA]dSa0op!DB2n;O:NI,CQ9sc>ebNZ`'0@BL*F<maPC5;$kLg08c3.!>XpD;t8:\&VFc,gFX*N.;6c/`.p
%ZZbq\P%=T/h_LD\[Hm$6/(JF7?CM#0Q9\2D]p@rkh374Q5Z2gnYB_3-O_V:\enV1nQ>3gCBXQ>m9=<IfBXQ>k9=7qIXer6,S_W_[
%KP=D'$!?]/X-chn!16NVlVA`eSONofOA;Qm)KeiNKCZd+je1W33gk].J,f<p4QEuR5g,N$2TU`h*[]ScVr1=LrbMA\qS4?:drp!E
%bHNk,AXEf(C)QfY#!^"TfAK$YG.'l;(VHO[U\'bg,X[gQN%tm+b-dC^<ium\SMs#=_tVm\7,t*$Nf18F"0[+j:=`BMqD-89V`2?^
%-#NKrI$lhCkVU[#el/o!58cHp+05;E!W*]IqmZ(oi`)`r-;=^RAG!73*u4+l7_JuNc[I7XHgnA=ga7G,m+SLef/YWO:.;B%Ltu$F
%JHS!Ib9S<P3QB5M]On^&;>&[8jD&Eeg+;&0QQT:R3G9!Y-?R6Edi\s1(ppIq7Y<nXj"Q;7(_(::k/bc6ai(pa+(ljsE?X>1C4'2/
%T_,&;dVQ,ecGC$<l2#>0r]:MR^GNg;!mJ'[KVP*@q>U,aUhd^/RW#e"HUFURj?k$RRW#e"42L4g;j0RBf6dg"PHO_YCVBnGL]l/W
%BqBnL5"^-*E"%/"dT.iiSTU)X.l'!I/MT[-YMj)(rVDjfWRUqc:.V4/IaJ@QjW`RLRXh@)!b7/Y&k$t2.(AJ!#^U5WVGU-G$)UHk
%q4rm$L7Q[D9q")0W=52^TPN^bhlj/5ddbp31bPEPf7'%O'u.H5oLiumVH4_H>*,W,daZr%.%^&SfedjFT9D0sWO#!q<LQ/<93RcK
%qe\di,Zo-Zr`?7Gg4LH"N/^AY3A*%m&s2-Ti4"Ab-O"_<BpsF;JrMom(Lu9jOr)NlT%$un.JC*:1MSfF,5?o;oX)C:Am:E\4rXpg
%2:<)M7E-,Z,U[R.hZh"gf-2mu1-R@':h'!MP@\IfA^#uIR:[%f(R]uNr(EK'8J<aki[%=3UktEpnWG5*d_s>t8Dah,KVo-P1kBbn
%NZ?/[DQ5K`1O%6bChA^17Ff=(OOA3W';u5#S2X4sRi%WaeNWKF"1*s8W7#;:Sr"^L9_pmc8aa`goQqosm<+TQ)iR_U3&-UB23)0)
%Np/,hP@Yc`>F6bT3[T%l-f-O`1CjEEN8lat[pMLN:WlnZo_,,X^M!'0V5"F%<<"=oH=rJCQ_mV9c.K#n"BU>Sa4ViZKM;>ap&kmp
%Q4gi08kA!*X<]V2d[W$1rZ.c25<EZVD%rbB?V3:LVFIE<r/U&^cM;l,W]r3B(e$unAQ5iL$r#BrggY#HH3P[Td&%sQ@tlm#>XJH>
%QP+/oP'H#mCeRVkb_;[*)cVVQ/om8GR=LeQrnnXL_.5qZE<sVK%n:i'oEsh>O"lVh^Qmq9VT7)QqE0Kg"*ohN1o,DU1lmd]1"&0R
%R`CfO5tUYbdu_Vc#d*J?g8C:WB<r/ASMe)igT.ueQ]pe3($10*-EMYipD+aVbO+;^6sD3A6bMH"-.16U1$illQfJ4<>,SqBKDIA9
%<@[RLLaj`B#>L1BX^r/NiH+:lr'Jm4dID"k,S=8trZi$(`7p"*(j>dNRbFC5Mh\TTK%Dd3od#9m52ghJXBD_R)%T%QT)kP*MhBH)
%K*GQ8o\Q6F,&J[q%8,XYUt5hD-#NL]%D&[[cZ,k.g8TT*9kR@Ck&*CT'H9aB+g:NaOP?801R0A"g+7+98jpnQD"pUhb_0p/8j^DU
%Dt]&^oZ<cDf$fjC8f&0S0W@4Z/PDEDQ6p6)+i3T:WEW(^$(S!f"RSEV:`-*[R`9B3(!@nm6>888T%T8rF(mIt7WW9#2nirXJO>Si
%F0cG&V;&nb/"TCQCIB)eNB<_)0M#n;Q\KQq31#A@]os`Ok7U0Jjt)4-M27RgE,M)g5X:ZpLrg1lhUUqgo;7kmi2,u!/AuTcFr`re
%ZceOb\d8Fi.DAekjpo+#rOij.rKui_')rP`1SC;f$Sj%sD4O\B>nq8eYF\e-ioO?5JEdTI=Dn.B9pAgs[=;2>A>pm3\>1b9PKHh!
%%MI32*GmLUBiI@6S'"kjF4ng+[\>@b06-=?-dP12JP"0UO*9.'CaPr*9tr",S'^FWcb-!%<:l?!!\s=ea^!h\)5fs5-%BZMde2>=
%LBqB5j.D5t8#Rs/ebS=-e@A1MGCab]Qf-j6.?e!/>-%$"I((_o5j0gT_:4;ZT2b9uYS5`d8[AUHHF%R+%FYt-2Xc.WC+%E'Ar&H"
%HE75c=nrg-/RcY'_&]lZPV84EfLrXq]6'M_+jIAA[;Y?T9oq;XXk,t=`hT"85:D(/%E@iTN^@ZHZ-en'pBJ=erjPb.q:?fE.e3g(
%Z;^''V*7cA'E*2?d?2pU;sb:D>RGs=]qK5U(dHtS;7cXN!]<7FK5m;i,VJof"NtSHgD<jSdA?G5V:@'Wp469dkW2M78kU@HKD&]k
%jNX'.)?sJK'VdsdkQpj%&5J/g2K".f/%\.rHoW]7NY=3?;WF,_a4*(TDpD%fED/+tPAVA(:QL@AMq8Ais#AamN>^gLZ,'"SH>Z5m
%9[@t=C+lG^,18Q#VX"_aR=+"2k`mjNkj\UB2mZ7H\plb7acp.+<:uoq"SWg.Kb!!kd]G%nCe^Zk\;llEppc;p2#4',:Ea7.V=\71
%6PU`(4gM-<RkLt6CQkkIB(RM,Cu:C1A!V<'n&SU+i7^p',oOn4E(e4M/>)C%bnSkG?SX?WHg<@]NDap^>M&(F,CGl':O<cbpBN=8
%N.(OJ3(Gqco7nW;DL<r4l0Be2BecScmni&K]Kc"WKlV7#;EhR#LSf&g\F#h6@Dc&T-[@&T.LZpe2JI=bL-9-c;WuVfLJt0AAkC(L
%G"0[!\sVl\@Q&*YA$`A_2TNBhKL-Y@npK6bC9=ff0.BSfbg0hb6Y+e]biud300Sk$O)(?j8Q-`2`N[^T[p5bM3tl6F,Fn'LP\E]A
%9\U?+>O'$^+$l@=m5"'>]2f7\6R%nSTT`IMg&]\i[tQA+pniOIY,Pe-rp*R:^,b3-6)=\`maFfUd%O^DId1Q(S"8,!k+u/NcM_?e
%^KH.P%f;V*?am[?V0jofW^K"Qf./?h4k"(W1Pba-b"=>T63_`u+"tI;.uV?.btLLS!@8'fY<B8.EP5;`kkQdpBO.\jA?q@m^tLc3
%DLpaKHFZ:f1F"O!n&Q=A^\FkrOh&'L,IXe"2m:+@[;kRL)`Oa9*)Ftj$%K0:Qi;K(/b^'BeqG(F:B/'](IeuU=+&1KgIHKOHjc21
%Md$(O)Z>C/H9PE*<;A%@(IE=uAbtYHhcIlFJDlDm:Rg7QnB/.t5Uf5EK`,8?3(s4.*OWT?jn4NXBl2=7Q&DoERe9>Rl9_"iWU)Pi
%nktf[#+j?!LOQK<3iYST"eoOeZFT?#YJ:+c1=+pWmf<4ikL[o$V_;5NoJ_.[`/jEF'%W,$3!61/?E#I)da0tRl-.;$f512XCU<$P
%8jdiC2%<MPS-5F:"JtE]'n^j^2&TWk>,bG<%jE0'pkD0<a81!>#H4+G]/0%s>5n4k^U@L4(J/&S&OZ;,['SQL%L;-.?%^gh#u5,M
%*WH@/0Z2Fck.QPkf8q3-/Oa+&j-HB,"T48gc-EtP1>Dj*`=@&\Hjnl1m%]t)gt#Ekr$Q:C>G#&JRWcu.mr^f-MH@ui1T5W-XDrSd
%?!$h?WUg"OQ#Gq+hn8Nf*HHio[i)coVIip_n2[O`L2#<0K;6&K=f;Q^gG'8[@'6=dZfEds\mWbm:"NCuAu`.8Q(=rA)cYKCF'M\g
%>^&jXs(`JVW+0r"S3TNt]$3rg8$eNIBY'\ul;Uh4d+)0sX&E;plKXkfe_j,:P]u9$B%Z<JUVBM0BJ&NS3nd%<bt2&Ri**&$3`X`;
%PdR&3lVq#bb517b[Ae/pTgT.LAHT?KaUDB@`QWF9gZW\tY/-KX5F@JK%K&M)\uhkk44W$%FgdJ\6iLbiSLtu?[*CS>V-BmZFi/B=
%FJa1ZBB3'.Rd6?>Z`W`cN%!rD>\Ldh$$'</S`W6;BJl?lei0\-V-#GJ1F#M:(-Q5;==1sf:@fF(&l+_]NTN/N>IS=8K55:;[''j"
%B\P3qg#6o+jLCdP8a',L:UH_%-:^inWLclXFK26W:/AKVTkg%30O;r-.CikjQ:;*Z9\bn'aUR(fS3CqZEn,oHREeKCb+$?Qa+WYm
%2q?T2ZHc5:ctS(Vbqb>_$+i<"_LJj(:*&MeG+=u^>)Y3R[c?**0>$$%N;R812@S;TB3L<A>\WF^1YX\ORF0`pR-p=]a4X/t+TBbL
%4*@(BV"B=UZrB\>2dJKBUUB`IHe*[GSmll%oQ?Eq\h99uTug;$;s5^bR_^Gc2o/;NF:e].D+:Gg1u6_sV2Umu.osk^Qp4f!<</l@
%Ih@FZc@!1*ekT;d;QZL)m;t;)oL[W+]*D'^ZrCh=>!(9g;k,5&&ODg*R]`]Ce(kG3$;OUj:$uUID,V\JQlEDVJXe>_j>4TTApA`#
%Wh*/^S4Ge=d'`OrMOpA]"m+ApkBO7`mcnocK&u85mBptOQh48h`^B66R$sMao+S:--=Z(1f-Y0p<N<*36<C#Rm.;^"$#u=Zkc1db
%$-e,99(tBDHKsYc<-hWr[&CHJP/9F^9E1#GUq1aC"4M@!q&c_SDggBrT;68O'On)ADbX0B'BBo..4TPmF]B?nVg@XJp!a+iPc:7C
%%6_Z=f@7c\J/UAWj^uHF&S>82@_"+(VO]>l9Y,hEN:c*TSRP8-e8-N]7rp7W#=4a;R,X4!j#Zhr[)l"QVMA:cpL,=\K!quKd%B93
%HrcK_Cu28u,<@iV<I0aF>4gW-q=glB:=]()WGQ-Ce@(L2j@e$HWjYj6SZ;'ko!T!eV.r(lgSrn%eb4)q6.=&\0hDVYrtO:Y.]lZa
%V+U&tPh#sX@o!!HeBaY6Q(@=Y8Cd<+WFsDETTe-0H;<#^oW)VW>Im6E[:)-TD36c"At!gUVX&bIVL'0Ah\f;>Z^J"fQsHVU3C.<4
%;`-]ocGC[)VUJ1uB@F8[TM(:sF+V[EUfr*Lk>nUjs%og\Mk9Wqkj/U:5*>-s)4XiZSBal*iMKfTk-Xb.J:!hZqhqJOO36!B,uW1o
%DidA4akEW3;=H-k[2b`dco=#o+G!S'Yr[(\0k>hP*l)<&a!d=umCF\"[8O0\VB3/OA0U6u<P<S&KEC8hq=:hEDu/YYg4<>qgML;Z
%EH%AZht*HMTmWosoT5>F(5N(]s+d,&J,&oEK-L6LN-Z/G)0J=6i89$tC.N+'><pLU<#Q^C?BPK7E2rdna#*>VkZ@Ga?GWZ@?N>l(
%\tOa[OIa\KMk-kTCZiAh8As<*8cV,e_-`K'J,krgLV?h53VH*mr`T-#=6Tun#5%XCpKlBCrd_k$RJD?5Po:brHgQ!_I+i<3Xe9@1
%g%6QHIoFT$[A)Ro0?TPXe#u=on0)t+Ol9sNVu<Y.0PgYRX`a3`CUVf%l@R!1Z&.N?<&dMm=p#=O0^g<ZlqK#0ldW6J>Z!]lQR_[f
%V-cj5V?$99"a>%i:Wp-YFI4?t&nL.GDndK2&eM(;hkX*H5#^+a9M*6]Z?KLB'?uI],<^395c%<D[+b3</ZOM]T^mE/DtRa`.M;DY
%P('GU]%Z`%)aau@o.[_NrYP/13](RLRB<ID3r<R\c2/b[P?+MbS/jJ)R%^9;OQ(c4V=m?P+d\Q0Tt6FaG2\e60+o_"&9T11>>@N?
%Y=*L2RLkX:e+7K5XYV-mYTV=OOIjpI)k8:79_Y#fLi=#if3;otr!-,Y8+fW`k\jq-F#"^@Y\Op"O/h+29&Nk.5\Jm0m``A-9V*Mm
%3<bm;-9&FZqiKQT1L@D9>5+J^9X.p'2`!R;hXn_2%Rk8iZ)qT+\iCUmAPOH_L/tA5Z@R7+;]-2$9s<,_Gei_+0-I&qb-]=k;j<N6
%e@Al)1'(T7j]9(S[=)`;Vr0P%Ghl!4%N6fSb1XR(8J(MAk`0Na]!1.Y9&33C^"-aRXOX8Y]4#$BXE\*_h+Y!#Y%J6X<nhO&V<G3c
%04*3kD;[[me*+bn1C^PH2h<p<:5/8%8]U<=_l\e.ZZJ\JOb;HHQ<3tJ[>lGO=H&c&VVgs65Q/g2s)1!*>q3=sdrM;?%W%`>KiSF?
%Yhs.RJE25L6rrHsLV`@+'J_IFkb[1J(fk2Hdn@GTmSoH)?^-sKI1=Yn&6X)nR0%?8mFQm-6ps,3Ud_YP&&%)u]\7YO481N9ogUo[
%B$fM-9)[8?*;YXiV%n-Vf-u\`N$H+.b\KR5d&Q!Yc*unXJ*Ra,ma[5%"ZmaB<\]UhNl%ZG?906>&,^%?iR8G-%SX^&6hJ(#s(s8I
%BJ;1[`u(s/j&Y:njK)EuQSU<i]O7>T1FK572.^GRF1[-$V%PKX/MmWiK!0U&es*1Cl;Yn`5LThQlQ_ks:g:;kg?MQD-t6'iYX>TU
%*m/D5ci<62L/_EZPT)<C0Vn^bVVO7S4K.(rk$>&ZPN6ua-ZB`2+GbnV/,#H9C7.OFam)+hAcm,KXb\u0$@\1$(GuN&a>#n>!Yr.t
%'E9B2T0ThE1MjtV/]3mQ>KqI=fCZbY:9tfW@&9RWHD@MUjWd?[qKWN77k84XZ_;#C/M\)g^oNu)=hFKY;lNROYVRelS$l421n**"
%Hk?[XMUuTEZAh>Q$4Nra@d7>dSSC,"(r>VI94IDrl5eTeaS&&iVIO5?IZ7jljXOr;Cf;LW?Om]Hp-<(I=l\csg\"CF\Rq-<6<7fE
%%$l#?+iYAf%O7nRb,%aY]+G49!gSrCcX:p_18hlBq'N&=k!FP%@nC6.*H#N7J]*DZLfe&p'\(IS>(4e&l'9&%]H6@Pf2#h^>35@E
%C@_71;MF1(Fh(W1eWI^.Q/TTF%23@PXBb!j++4a7enM[#obpp)Z-pis,A#>R=KoYGYNbGWVc^.=d'h=4]8@(d%FsNR`@G8$L"n4j
%lch2`\Y7d_bVRW>(\Qqj,*Un#X\j#%j0eQB#&<oqH]\F[aC$f@+Bf.8!C*Z&.,rPrPdZI/9(CLJ8jsj;CTXXK*XRA%W-Ac:d_<,s
%_.sJ8qOt<&76onGHC9K^$='4O0XOljq-oG-&fQR>]A-/5.5[5LKsKM#X()\[oJ/HSWZiJ9eRGk6ePmc`;ma<WO;aeEb-eSP0YF9g
%,pMuej[P!K49'EaD7S`Z='jIoiV1(qd('^$<.)"'ID"lP)UUW,opS&39n,c$Rs%qm@G$]R)eQ0KIJD(J261?!^O\cEWn4n"F`fbH
%G1>m^aMT!LZW]FpW[MVmhf&js7e<]f]2IH/?E8/$]$^[pAP^M5Y6?XhJ"2DUE;,WZ<YetXn:b(JlY8\dq<&eg/&S@hF&s<4<+4FZ
%(D*P>f<'SU]'r=@e%^cELul+nZ*+0C&^1%%f7c['pXJtV,7AC8="nIb1JNDQ'lB<?.Qm1!DucUhamfY<0-XND+W/Y=;hT=:X7\sP
%.bt7F(j/a')7(ailY6lGXjjnu_#fQrVa3ZFcUGD3LD+f$6DCN@+oY9De8-EbBnUZ\W>2V"/:f'Vb>>eHpPa()>-38(p_KpJI6=MX
%m^9M6G;_7hgKPG7/SgbefcUZ#"a<mf9)B&"+JHM%f<4\HW?r3Kf@q+8EZ[PFJ6K&R]"F1aMA_,Y(c%'6kmF&nh[CH9@:HK4!]pt2
%n#MdbeTY2G^0[T@5*j]o,TlI/bQT:K8k*Ms1d9RR%s!dD_42#H&C>,g1&K?374+;B&@C#"\H0N4mAf(EnX<jLROoTfC(<Nu:WI5u
%m9`,,Io\e;TC.;dVD=U>RGh=48d/eK2+g/CeDVcR5*uf%jE?;i5a@9Lk-d"0Q]#WZ2.8p2DIGkJ9.%Re@gTC]gjPTU4,RV2ZpABG
%Od/dbCP3pq_^fXo;Jia%W><D-n'7UQ8KD^k**n2$Lcp]&U<\Gi'$.s.(<7B00nGRNA[9<>H,m-d1J3`NPlLD,#Cc9gO5s?djbj`'
%BmM(a\MIQo,a8,]l7fY_+A2#E8\(]H7B6l!Y8bQc?b8$i/4"('?6`S*/-gJVGI4cil^2tEPpP.]5A*+7J+./lrS?LhCYnrbkPBi0
%jireI:A&)h]QWI`iQfmL_l^52D;D\X4PR=4X_tf)H1KC.]"7Y3iQI3mVe?mTq+G@\)9+g6CZW=oc^2$9)f&feO#GRU)Qf"M$bc\e
%Com$[Ba.\cgRIBP?LMa4)ue5cq=0YX5+?tFhUC%^klWbUk6l@3p;`_Irqi$Vj5]].Y$0^uj`Z^=(Q2(jH_!L[\GpI<Hfa3JBI85+
%4[8=<gO7g>ZerLroJq-.Q$ka(<>BHFbJsBiiQK5U.pH<'0?nVHo/id)BSQ:^pi`t#ae+!,B5^g/.dpHb2D<cg(\U?7j2e\7q'+Sj
%Z*F<#iB'mKFLnmQp&&SGIX:K.^K]F*ZaoFM^RmSk^/ku=GjgnYd#@jMI^-Cg1geRI>o4r)la]%S_;aUXV/M82>7]U*[f"FG-Z>X7
%]3$R!]hA:&]XWBuG9NDeg59N%bP/cRQG5U:D-#ej5$VtXIdZ:jNZS*`!Z!]FSmU^.N4&BQb=8X8Hrs[%r,QYnY'th)[dB@2R@\10
%GM2!;.LW:.k+B->!pAp*^AUgY8uq'U'b:M:]mMrW]]=!3m";=2iPXO-`n'SS]m&4(Y)2<lo"1NqHVa"1qU`^Z\"um$r:Jh^WqT)%
%%S1nT4h?Edo#Z2j]riNZSnq^c=NaT-hj3smp>t/Sr/.u_TQ"Q6@hY?:nAA>-Ki"E[mI]hL6,+s7.BL^bf&(>Z&GTI&gYYD9qubg[
%$%B'05'aHI`:HdN+3TPu4^MJGI=LpT7PjBce@32,#0d/!k4>eb?_T0Wq8\8HjVn=Ymqh,^Lu!?kp!g30>2P7Kj8AYjr7T5N+5<C]
%nG];-qW@JIZi%q/h!mh<SNF>gI$m(Y3f62Jrpo"h'InOdIfJeL-fgF%hO([!]o6]I.bWsj@*h*eo4LSJ-"8=QlRaYO\[V9-N"X\M
%c"s#V`OD>Vqr`ZmB(P#AZ24%I;]6t&/2o-t_+..VRs"I@2`KcmX/lh6,mG0dJnERL+*ZiTq$Pm+SsueMc]2$A'g8fslPjW[mCTph
%kNu"t2nMOX@=9j+n!eM4G)SKL8%+rRAl\$@oaC@%)@Kacf&=[:;f2J1hJY<=2#lM(>1aM)OcUT141UR<N+?gSq-*ltm#,\/pUffa
%/KdO53VlU$Ok]oIq6I5Ip>"'JMpkR4X&T$_R^CC#ltf_(a7#bFXnLW3O.4IUmlg+(">g5ZnFuN9QZG?tom.XDNNShS^8q#%[i;LV
%5:s9e)L"t_GB(lPe]!`[?#\H*b,qs<WcS!b!FN@Gq^eIWc!PlqKfORkJ3rsMnaZ43c\#9E5D)_[iTo:UURh*MWL>pFp,p)fIQUsK
%'q@F7B'#%[f$?;3*q+E/D<LS=BP)Zig\r15Up7U4J&Md+XO[&!n/Z_bGkpAcciQq+MC6pGK23$P5Z^-uQohB+*iXCf]k<uF*uak3
%`M78;`J:3,1o"aV!9%JKfRC'>[J/^K`D"@J#Pk^]_lkeYE*+NY/DRcY69kS'I$e+"C"Ls%";'NIApKX#O2.jbe@1d)MiWFOYM[/1
%It)t<a^[uAYIUF)NS7FDr47R"h*I:cr/2B;Q4*$5joTrWC<dpO"TIr7NOd<VF"N=1odQ?.[e$m(aOk`a\mcaDH[3\-^V7hS&+861
%jpUpuDR#b7]aao(#tR+(XSJcp:YF1of$b3("Ib/`&uYrN?T1hLDGa"%eN2FEYOUpg.NZ%&Ks49K<Gm5q@%5@86[nU2Z&L0tW1aeF
%+o/@E9uM>m<@"$L#30iBK\_+jQ<5@Gm*5Y)M)p4;5Xd]\)5L6YN86f)*@#B[C5\OS3kDkTSaP)Zr>I@!X#u7qPR=PO=!H^>`(bfA
%]b?@+SZf^:R;bPF%@^L%WJO+6ad(nUGVH]u!h/?l$rI<+'ie"^&?Fe1Gt`<K^J\'?dlUDSTUGS*53XG><t:/P2#S-:-!H:WQ'0^"
%4;,^>,4C5-7InkY\WWD4r-Bo-V&9tdjDdRF,4G9dCY+f)AjSC>m\2OKbA+\MVt'1k7:k_!=0'0i6k`CZS(Q(OM1h4WOVt\n;e@WJ
%i^'M4KW%LX$H,T;2^uA(:0]5)`,uapjCMHhPCD5IL^WD0on8II6o&UBCk6nXBK9m;T7.D?&CP;tDmO)LcG/\n&A#DUmdTT@"ZW#*
%)I<%]GPq/'Xg#Xo,rDqa[rVUe1$:.-A*LXt>;)MRNur5?Ba8ht\)4oL(>-(WqhgH.GRE88P_t4tNH'SiC;;;P.`!'F+eX+cBfuTk
%E8f9]E6DSb\6$c9QhR+NPRo3VOhq?:`i22Sm-Wo21F)qZkmp-uB(Nse*S-8-jGqs+ea:>hQ214,8n#W.CBQB4iBe6MM&(8!*WO4J
%Df$PWB-Y*mC5b(_VP88MVcE7Pm'YiB_jp]$q-j8Jo?k$r($*SO?ZpKDhRuB#>5%@.guV:Hheu,ZE6m5@;uScrL)/IC6]8#*$?A.Y
%ciS!hm5JDM(\tDhXeV0P_'a3$[sr3#B3aVD5@#9]%1JMp))YTT";Qb,Jb],tINeaih8r^n]="qf<h2;WfCojZ[QO@tgP;Udp22m2
%S"tgd<;@/,K`WiAS#sKDH5%\9T&e4a(S6L"?L(D$JHNC]E9h!'_q%HUal?A]??'#b6Bt3*rbNa8Q;OQZj)FLHL&bE-mpVMj:WU87
%;5GXm@ZC[hKXaPDi8@`A"-4imLrT]l=5?OL`>4P7=tG%_H/dt151jKZ[;U,Gmhd^il[=1oiH&'/,:.1gB_^?Jr7RRY*RNMo4C9LR
%MlB8+/=H]C.']uA%k\+30>$`HbG0E<m98ZlT6%&.+9Lk%pK'O=G&d!Hk3IX/T]SW7PtV=&50W+p^H-[Fa=id0&!>)f+)(@ZkO_$o
%HZ@bq,3eOV"TN_'A$^=Jq9J9bPF[o$5easC@2Q=(2D8DiK&_?"(/<XcbfY=h]]>.B6m':!J[Sa^<]%04YE7]bUV$j:Kmd.>l)(9Z
%oh(dnNU5uMVf06j5mta,`nH=]G9Oo;\.c&n5BjJ5q@7$,\B-\dgi7$JBFl62GIW]cG=EZNV`h_,F_IT,f:ZTHRBI[]EST83Bs?'G
%[5SW&8lCY<Q+LgESV-CAj#>g"BOS<C'g?R"d%+gmTs!fYF^RD8;Q-2sOrG12*XC.rXY&Kgemh:mX(S`XXk\R,WSnp.S]48tE#P@D
%5Sk1G.VjaNq2m<oq=*KCDj:X7!D:%Pau%u141QK"in-AuSp0bY_p\+qlDsB?U!5X,mM9PA17JOn\D6jV0BZEnYAFCnIH[k>pg:cZ
%93\]G48HopS\BGeU?1R-ebpk/eme'g.q<Y8UONDi+1ATo+'E66$&bSi"j4E+mt\6SqX-k!mHiNjq8V^sJm+Gdh]g!_:GEB><d]>[
%KCt0Q=7!Ice`J$FD\lgj5Ha,H`r7%T(tQA`iuZ'^rl+EN]2AJ!gWJA-=MC^-[njBbQi,NV*YZKH9D+XBS@OdZZs>em/9H/717NPQ
%G7!!R]kb)X?G4T(mqq!1FI.?d^HTE[>]r3>K>Ws-X6$P1)3"F(7lWDaf-BY2it[ZF]gq"hI"#!R=h@f#DO!H^;2(,r^U*IjC!hu*
%i-9Bbc=u<$bFZCQOt[_bo[Aihs&^ntfA2.`DsVRaQUc1O-5ScBC3d-`e]pEn/jEN8<qegpX>O869:WqqYlRhYH!PnV&;s@c9;U)Z
%]dOtho:#RH@:@?g/p#'YO)7pfH]H+4IZuclpKq!8cr=T*,>5DTn[SAn'25"qbM;(H`fFF,\_#Ob5CV;>==qaBel1o5cIT%u[nfB#
%d0f6"]j<=?b3p)V%lTDk]\PC??gleOA"pXhbWgTgk<AcJBM/S5%V-?nm=htAidU;HIt$jE@BVSp>Mpcl+%909G7\OOoBRfOT@OhH
%c^g_jYA^&9Hu-aWEmZi/pqcp(_TBIr7mQ%mkO#J1gI4_=p9Je<]m[KfBHEUFICZ;+arMQg\.]ODVn6BNHSVQHAReN7jP\Y9"/P#2
%]u!h<$i#`$]9jTijHknO0[2$BlX&_^O)qaVGjZL-2QK+*VD\thm=L+ueA?6Ckr<e>+AP"Iqt+o=rCI*XM)HkAm6R@*r6<E?mH9tY
%LV%Jr4oT7[9LPrRs'iC[B0T<NQb0FD4P?m<'@>I3UO@NM#uVnueF,[+n^3?]=CodK=+u>=#OU<)&$2S6qY8%1;SH+QQXVHdd'n9s
%qYQWBOZ!t)\c2!5<2OKAp*%rSiiDqMr0dGpP!=@oSoaY?2:i5H9'n7m:qMAb70",,='ogHI*TKOZ+_E03<&bf\Zj?(jpS6#_n3a`
%^7,?pE4fXC0'&U?>&t-/^["n^H;mc'?ide/jU`/B2ZI7\/ge0@B%$NRkMS^96Yi=0^t2<hG9/=jLi_H]+d^(Td_EVGI-N-QlAt'D
%6i^sDgL#TpYDp)q,s9;)[DMiZ2<S:nIW_iU5BqHQQtmP3BAWII)uA\e,FXkF4+a(K^P`j/F8""pXW77e[^!Q:?0L/S@QiA[,kGZa
%g=CTugV(e#0u*NrHbOY!"a(1<k*OY&qFH5=1O/`5i+A#C2Yk5CESih0_ri<SXC(&R(]09Cd-@V[9@=mdKi_$"0Q6uJ<Y05_GhtO9
%q7JMmo>La(\a1`cmCg@Q&:oi<jIads-i)-?`liaQs'f7GhC$lP^$o]DaTCqPR"Iq>UI&a^CVF##/(a<mkAO='eQg'l?<CFC)o_Wd
%P,=]=7d7!.s'j#K8")j>p#g\sToqJuD4HH5P$<.V2lh.nmtq4TnZ;7*S=YkVTk<0Gl^kf`HN,+3e9SrY%?/uamoIU`Y[a/&k[ML\
%I![m:%e^8'=4]1S[Ipi4GH_%6#EFQ!elRa`VtF]G6h$*X]_f#%IG;HI=^?EJf^)G_'VFINX7n='ARurK=)H(_m%G.'bh3:2jKh?@
%^`D<\'cLdaVVdjRh\R>U)ZHV]fn<0-!cfT/-^<o/"6q_T?.o/TrEpkb>C,,N5G+Q$i-O[k=F&%h]IJ2#g[,6XGCl]aj76q,^NQfQ
%F"9E/k.MC"hbrn8UD'l"`@=fOoCG^]g\nLchDHkdC;=[8*j<<SHJ0fqqoYrfBmR9Is%sN0a8VrF%<0;p:<[F=T>4L?T?j,mB\]rJ
%0A;Hp-^F$j]UA?BV/mK9eg#P7lf&MZ-nTV'NP86<_+?>nSFQ)Wh.?%]XQ5nB<ZCcVJ>9U>^#*KT]YBqcnbgRk]YFI=DDZ#N,5>c#
%ffj2%-Mb;`Xe+rF86R"V\e'9QHWE+?Ip"C?4S4]p.s_uU(TD5&\D[Fhou?QV!t?mMm!No85B!/8kMG=Hbm3>_9bo4`5_"KB>Gs)5
%/DE!$\GH;n1:Jl"XoBg1%Q56+03aun4I^"e5F?eb05c'%q+'P3U:m^JqqE4=G.5AR-D;Eqgcm9]Xn$MXEqV+t9m0'[$)S_j[#_sb
%>:JVp3Ek9e%;s8)ja<bfHO1J\G[^2aD1,Qu/R;AJK<dT(*1*DE+@7m,8mgK31`$M/cXserRQjkQVaNMY-TNd3pEk)dhtq"Kq6=n<
%#1glXc%kV3gIkm3mm(#^NDd@+0<iHgbK.%<59;u6T>(%1@G3ki[e&IRnVn5p3/n,]59(f6=aUYCI(=4BC;,/j'HEjFTWhf$fVC]b
%.96@n^5Z$uDS8%YXh^0LZW*<%o+53B5$Z5p^N69O1^N.HZek[@bE7K,bjF)a?'U2d-u"A?+4"`uZhg"W8i638HqV`!l!RQfGc-aB
%I*KA"\DTb!J6N@%DAPBY^H28<oOCs0HG3E>=aI^69hea;nTMUhPfG<N[WR$rG_g/!:9;oQ"V#5p=9$ZO_(?o/q(Lh?pL6eQOXaI]
%m_+#dYojfu^BWTjA`;Un>iAgCN11rAH?VTCJ%g0R<1C%tmr'"<QV+V:i>mCt_:?..E:crQO^!n.aM6@HCL<Di\`5:="<u;-"QCrT
%?ETmk$W6@\/c'j4D.DtVRn^N'Hd)%fcG+>B$QN/)<eB$jFW?WR,*pi3k*VLH?$NT[f8-jrAa_a#hceV&o!rnUr8AmX^9bJ_E`"?4
%pYGFb:$Cq"4>a^m[`WeX4iDWPpo*s4YMEQgOi]QNCcu5=10!^/0_"4H#Lfer9`MjTd@OL$]4Eeq%G[B'b2hgd&$b<FG1GX!0f7uU
%KDAcOId1PUnccS-'2Nu*"^^qp=g\TJpZJbTd.<lQ/!UU8V5cI1asFaQ3AK'rh&A9o6FTb-lW::BH]6cNgnV:_b\pg1MBJkk\65uK
%`6I?LE"BU&IlDPJCe/c2e\c2jE&YB=i=>4nTms4gGQ8fkF\A;Oau-@b4VmA(TlRAPrqHP*-0$l]9`)]QaAZRd&0JPd\!?dP_QRNS
%hG5+tYEm#p?_DFj']=OsN7Yq-OT5TPK4HcV>#[6SgCiUW(&t:X15uVTXk,=WWJk2_)ktc%]^rd@'BM!,kUgA=iNRnPOHaJ2Z(dtb
%.FUb,02qC/\R0S=M:ZE?b!g=37]TJ#^^fhanoR&UW_BcNgB.q/T\&kCW'fZIVGk+FX/`K.A3Q)MW4CP32hmhb$3m?b[G(*Ie$iog
%T*-AkAk>#<np_Bl\DK;40BblZc.JH'J[=gT#ojD8n6FLri*I.0oX;_(Dg;e3`Cef*,3[OP\8_\U'reSO`&Sac.gL26f[qK%"2"-0
%?E4kqRe<\QLER?J=S?QcmX+$])HU9N/Jj!EHjkO#<pu?)R.=DUas0$jYNk>$&2#)TVs4/kJoGLmBP^+M(13;A_:W,TGZZB^i>j5]
%:+><kg%ZUARI'Jaj%9O6pdYbF`Hr2;VtKOqA`&\BiC'F;%LO=@TP4A)2_Pi5.EOS4'8VU*8aBC*VOsq>>ebT\WR35NHGIqSCYW\^
%7*H?BOgi\r`8f*N#JUmWO)rk@84Bgg.tVs0*ZrZ4k^l"IWCND97"a6D:*n;c\RMmolF$B!?[erYYK,J?F1Iad/nt1,H#kt;lC&k'
%5ES_U=''AZjQ99=G78=;T(Q+Y?/i#Gig"DY3+e"BhJp<bq"jMJ^?k>^@DYhg"RN5Ajagbr*L%2AR;f"o,,X8&EYmR\VD*j=_+F(&
%rSrf2osEkH/"rjri+e/;!8sD4j@4\$,+igh`\i?OkXr>FW,mhpUg@gY,3Q/>><qlW!B#$bh,W;Mpu!E:a'Dc1,h8g8\bN3Q%s"=Y
%mL3Kj6/j5Pl!E2@/$EB6cl$R2I`,8(E;nFV?LY$HX`bI"pp9+D/%R(tMY0a.?3c6mGAEN_I'#e"pSs`?4S!st0-SIfK:(`2cHh6C
%-+g@\40!S^<tCt?mQ.Q'n7pq<'5N"e<h?>UH6m,4hc[cVr`7lj+nHm!^1$T'*;nE31Q4C5NXoH/9SDi)rr(G2@;"4ZB!4\j#MT%1
%@Jsds&&TQp:B4U<9fiCJ2rX.;f[1@[)2FgIH2l4JIs'uT/<aiPO8iaYiL7>&?Cg(&[p8dW@Ec1LrBSurbd91kF&Rp%2F9?cY"c&C
%,5nl=5G@,E-bl]H98p3ls*?JWn9KDf&HAXfa.&R/,)j?H4a(Vicm4QO?<m_2gT-lHeCQGe^5"Ap?$Hg.FnM/(.olN02:=S/:!p4(
%<`e0-(]2GFepbIM/9SA%?uOSb0Nlf-XfcEp=c'l&LE=AFXjpGM>1d#FY3\L3Xd/GQ%']_U2SVCQpO`s\JZO-o)O4k3Aj`eD@UKjm
%pCM72K+F]oI)L'ZLum8[C`TVln(*WW\G6!H5NUIp]Xsd-nOVngc+F.^kuCpi50*>cS!dX)]RLaA^-M!l*s/Q25>,i<Z/WNPGQYAA
%Ls"lb[8!Z-;Y?3QQiC=(Y`*hsf$JN4Aif-63LX`'H<6LpNesqJ)U*1AHt?,1R;&>_`%8gW/:<*gHmj*<ZDQSq>e3i&S+:5:B.Rg9
%V?;^tYd1^Z%+J\me8jLq%6Q@HcYBV["3>Jf%!n%E2FMJPjsm#Jo\6UDF5ZmFLtmQ]/Z)PbJV&'MC]rjGf"n(XD46mC2/j%jAciS[
%NVXGV'e3a2IAe_%^)qAbO$+j>T#%fY2;b$/1&/00"Z#ro%"m!'ZO@2%c87:ZOc4%;N!fUa`W[*gat+4jFBI,U[SDDm64JoA0+C(^
%D(D[A^p.I'\QM:DC^bKmQDn'q#UnWBO`be>KlRA"?uW8L(P9MIZ"sQN=I(c,FB"fK(dP1e..)a3//rad6B$^.X6ZVV>,'`;>q5dK
%%"m!C_(qN-UGE?Ors%6WCLPafkUT]@XQrp<E\10'$Ij`S`sjPo)phm.6)#n\b:U^i3k)C)f1Z>N'^,u%jDnOWEnAS<ZYZI!"Ve>%
%!Z+-_OD"Z#8p-SnANFK4V;2-)m7&*)&L0'Jl?_^.Nj/4i<t'OpL-b(]?l;_(d?t2Urs%6WCLMp2$s&.YIWqK/+M"KR@A[TV#Nhet
%m&[6*3;K8Wb[sU>GBqcED-$b3bZHc&_fQV*Cm&Ms9W9WG"jN4?Kg6%8F>-EdD7X-W)4W/#L*.l`oe1tJU]o<A;L9EUmE7!pI!onk
%6SKbV$RKY3N^:]UkLhOD*Vik6+OA(nc'(nhXb%Bkj%qOI4,sIS%sU$liFI"8!.d.=\s_Xic-$*?5,&MhCq(r9b[6pB79E[qOc>N2
%)?:ckN!`7iW%)4f\CtHn,&]I->DO+n&D#E*C2ld>E]J,GTJp0(T<iP4Fa4@k8*)?aZ(pk+4$>W[YKFI^S&)pG!*B"4"#aG+^em$f
%=6Nf1&WT9_F0ZQ\!IZYT425SKi0?$aL`AlQ[nT3jO`(66PbHhd7-LCsQ7o=7"c69ZBF(CN":V&')`IbMc=#.<!(&gjoe1hb6j0pj
%OF#r.,)L6dLYjiMFZGJb`Q10^_P;/mq`Q.\DeGrWcAc$;<!'Y);*8Z-D9Hs5L."iY=RH5f\d`)R6"+flI-EPEfa2N8r%U%+#&#Y)
%dF,@UUH*(3&L_=Zb!o43^sMn9;B<\C%^`4D)h>//eA2\n+YK^rQepIR*W=Y1K3t+a_?1^A`E7G.-:@%T@.SkU5?sT/)B&nqr%slO
%M.p*2)A6Xs##'#Q#Q-YYT0O4N499e<!qeN9TY$X[.3A!O//L-9<<WGT(.QCciZX))7^0iIR7miiYS7AR:gca5"m0DWf,R_g.=q[3
%69,4jJUL!7X9b&MNP7a3RKQHA-KpYH.C=n7HAT6K)e$^OT6lbRrE-.QYK:>IV++rN5&E.YUG9)2'!#q^!eBgPok^?)erSL=TS@5e
%UqJ!$n,nJiJSHm7Y"5b-^];^ki*h44i0FF2=f!*j)aguOqDu2k>m(MgV6U[IKMAof0rtj@Z]%@!Cc;>k2DOQ+Lo:k$<7ae3X\9F=
%863#LgLK_g1EK0g#4&Pdkfh(-5!&RZaf"El4MP`"\i_NOZ3:FJ1VRH:VBI6O'IZf&Qt^/SDIPpL+\%c3R.0)Rn,[eTJge)7d@mTB
%FiFF@3bi4<-tnm'7Sj?mZ*geo(mZ_^6)R/RL*/#coM35\#R`-JV0*a^VE`76nEVhMo:mP:*=IqPGjP.FXM:#\A!ps'S7+O$hJ5#'
%#@TY/E`\%9$r*On'I_"D0IA=BXKL#+^dlX]S2)"[Beoo\R3h>LD;.o"JNG3fFL=.5,ho0$+V\[B+#(GB<X0^(>Qn*\%7'!pKcQ*`
%6ScODHKcH*g$$cU3;g@Ha/%2JXN/ba1EUs-3r<j9kHabb2B0lKZ6l`#J9'&RKnWX/)M_L(8R6:;D$(4r.5`Jg@3V2o/8OO2Tn#so
%/TauMVBUWR2DrNQX&D9h>q-dZ_7]u;B9_\s#6pnC[G:h9AYT`)L_1LjFhRF-_fYN`HQ7K?`oB/JUU)"7O3W.>q<72FYMtiHk//mg
%*m/.,U++!QjG=4d60T4q%E<?mR8)(F.t]=ok!;$2+h6M85J!LQ<&>/B^_<#6Kb2o_'b#WtW#BVKQ)YtBeBmh<9a78b=;[9.$P=*T
%K'IY2*J`V;cgWplH7[+E^(Hcn77Ut%=CW>9nc+lrq!IE"G2G%a/o7h%lZt6P![o`'C89bI>Xr"6@!s@H`c7$^o-$ZM&^D7m&NR!i
%\X$Ei!g;q[=TuqKb1qqR*LUGMW9jd33DX/j6UZWeTXnHUD_lapT=o7>FVu`B`2G5Ad_EV/0e5_)o/'ur%?4qAL[r`X9Q2T+/ZMX=
%eLet_(&4lM*<PIBFlB(0"*M1)#if5-1[MI])BkR-NB1fs.S.!@AOEEY@WPR>WD9e+Q>OUp%6ulrU(.B(KoD\954jlQC[07>3;g@H
%LUd(;=HB:KB0Q$:FS>`9?IMV=*6cY_8prKWl[W&-!Cm97+Z+fi(o%8*%.24>m013K33\ie.hM@LR/rV4(`;5rj8c-$Kb2o_Pmi4E
%Q8@<j)q>*V3L6hV)*k-2d'X-2m!`&<2jIkZ1]$W&#/2.fZ08.a`j2@[*6XA`o-p4Va@cf<K&+#L(ciB=iKL-kAjKT\,ES%19uG7!
%6^XjR+A0cXY8njJW8fL$4'#ViP3l0##`=I(>^DC0Z^n1UgEi)-!t^_,3uB,1A;&M+co[PXDI9imiR_X'Q6)Ui=F,)OA*MCos'O$A
%h[WJm:'Ql>ONXkq8IL:\eB)1"RU[tsO[5`#K!#),'mI$q$:l3`E1*Cd3<M@hA!JJSfdISpTQH"Dbp^!9+G'F5eRempQ4:GBi[H,U
%[IqsoS&%[Gf#H\#A$.e30HtkKnE:;#Ror3mnZ<$C&98YW9C\:<eM&:HN<.k:CV+$dJ4Va]K;7aHA>#,[VcB>h6@oId(^4jZ&3&%i
%R\NiY5\,f:hF'W-f6$NS;,@u]`W7TeZku&c@f)&H=GR`85,bK:``j27IN4>uYK'S+^(Im_0$L8A'mitNip<ejlm's<FG%M+\No,Z
%SnhkRc(\2V(\`8RT]"P6"Nhr3F+J;ZP\CFX*c[8B]s37FY!APZBio6WCX\YfM8:uaL.;Bo69>Nb$]B$2$nW4*(PBlEm.K\P\As24
%o&;X)bF'lmTG_48&jf.6Zn)AQ'j8n+gK'uk`EbeSh#^V_f4,AWdKg1(B%r+I[G_<9if_2e0GI,*A1QM($/Oq%DaDpK2h;57FeFsb
%F.9%)[Mjo>+IE@QKPTMK3;+(`'D&$&J4;EgLLL`/>T?n!b?]HK1`ARg@5Z!f`^"2oJ67Ato,\`B1F(2F5"pd=MDL^]Wm&lD?C2\?
%/Z1S76jpN]D[:NZ=(\2L!0>A964D8+_.+#Y>s04K;2)$W@>*-'E<oRCUJ-<s%0YX5JrCs29g+/uVCTX6U%=%/f&Ehp<+D#@O!'fH
%"KJmu;$g6,0l_8r2$g.(]pG-mg]ee"]:(%$_e-ca.SursYlDoZ6e<D0CS6E!+H*RW:o3?b$6WE8@mJ9J18J@ShVNF>@tIBoZV,Ne
%W7h=:2P&,Ho``?+m&@Cn=Vronrj45T'/?b7$poXFZRfuta/VBSD21\Gj)QQ$+Ju\iSliFP+J&bSk:3.!nCPM>O!A+UTY&UY:a$hD
%eV2TqK;)C6LeC62E2)P3DSO4DbD%=Pco\BVM]-8_V'aW)5:C-=Kg#\Ul*t_pQ*joH'h'>qk0n12Nm;Y\fFJ?YP>a[J@3^m#Z-@,a
%7DuksicplOiL#Tg2)l&2)(Yf%2Q'[[Lo)3FHAbGA_i33$L3KpC,:6s"`d)MG6J#K-N946F!\0()j-FT'&0jL]W.gTMJP[B@DTG$K
%"Yg'p)KAuZ9h`VOc/l3R%Eoat/HpP,lR0rDY(OA3D;5i2#(\MkF]8pVdL^24.MQ!A&N!NYRnH?6/PGT))_+6RCRV].U-\*?\6`T)
%<i/sZ\)L?'J?Ffi:o[u%TZ[06%_?o=F<FO[!I38DU_WJ":h;D7$gKdAf`Q>l$`TBZm;:G`2c.0p$,H>YjFWm-Wc["r=2T-kabc[*
%Dc#=N>meu0;G:*egr,JN?ld?YIo$;ggi5UYX9o,tKV?1HD6@,Z6IuT5f)Qo3e>,Kq[tq>%Jc[[/DUeugD'fsP$FN02BSOB`]tQU,
%HoimsCr_jIlrZS3@p^cJne49n8_qf@%1_f\:dGGn$5Dh._^PlA"Y'Qj"Tt/9(@se,&nifP<se8g5k\fnDpS<+GGY[0ZW3%fkqhkn
%;NHJZ:h\5ZESM3P5YL=@/=8[U32TtH:_DV$L^mRjF>HT-'[uKUUF,7VhHajF<G3ETphjc+Q$]:ENAklEOAUrM44%hQ=QYLBS"kgb
%#!5At07krkj1/J:F'jq-)0iImmQIln*<^=8L(YHV%*ZNQ[/&U&0d#UiE*!M@"S:]_NV3n*C+/$BbCS%U8P.^Nl&,)#!-Ls^<gcW_
%Qha,V;u8Vo7ueN.piPRHJ.@,46PHC@3l$..E_m^2&NI.2p!mYs#M5'&hWZrnXJX/U)Ka.gEAZ^ol4u"j0pO7C6aQ?<(<JVn6s<kd
%i@u)OW+"&(IKr"EW1&UTg^k?+*#1T=UhfN0XDNljfQ]i9_^sLkCSR#H->X'nbFm\$$tR4u'J>(^j=nJ5@Vc4(8,6Ds,Z/Ec(61n(
%A'L`E5j5-<%Y[En><F)BqT+jkV3(K;QAP2QPGbiVZ+.stFSns;%<U/Y9Q<?P:=6V2`APfJp4hQ2D3u#/A..3)YlTMFr(HWY_r)V,
%"<q=,-Dr0jr=hV331?rnRckQ\g'oS1+P:NLNZjSF@!!us`Xqc@nCF67P9I;/(I(=S@))pkd,q^?)4a3Ps(O5u@Y,F#9ei0^:_p\\
%RddJVoims&h0!lp5s_W/%:]ek@lh_D@j9!Noc8]%dl&</_*r/q_R!)=g.HKPV<GImSFWP[)_)n"Ku6?%0S((=lKAX+N$B+B1to"k
%6J)Q-'NO@)Ci,=,J[]9-l>Y-H(.\V[L^1mNRXY>^C($SUC8a"a?op^T"ALD:M7SM<V27i,!`F>)pbPGCWZ,IEnQCC+E*Ai@*6r=f
%9ZCp3R$`umGks0=a)Mn]6CoFpagd@uanQph1BIV3`<nAe[eO?CiK2@#6NERb+P$k]$(*BW\/*DCig^cGA=t;DS0e4sCiQ<XVEF8r
%dM40^J2VZn!JJBR"sW@U$l/kd$"Q`&RGqr`kU@u^WaB"gjaaMaF<`4!;JHn9`$--.bgj3J=U+;h%3Wm(3HC5l>Ys*)#_lq_<GV`K
%!>->)k"63J"Q?q%6kCgSSdA`ZTqHt!F>\?;Jq<n@DN*\c=>>K=;DU^r);5/>'aH\b$:MpC;As@`=>:@H;4;8)AHO>_1f44*W*+5g
%(pHcaCa@TJN%u1l#_@qb=GmkNNWhDfN#2_AMoS;gB5"dN:#<SsJFJ\45SP8:$:NiMjT%r7.LB4#A6H]^4M!A*d\Fs;+F7"DkY`pO
%bs7J1Kt./oO/mhaB87^J\q/^WQm(o)@4lG&UqnnLrHu!KpJ\"29b+k%F`GSVJm:%I-sN!4,AcV]EAUKilsRPB:,&'n?&:iKFXh;\
%62rAYNaRuRMh?[6PEX;?2*"&/*gEBrj0[naL'XNd(aM:P"/q7G,Qa*L=5"+QmOc<$$'PU!0em($::qmcIGd1W]:uSA`lW1EVO+'8
%T/a-.n+MQV`DkV],jec8dUif@=$dA$JP?q'$SR^#K+,E?-t'#i9;p-5-P3>#3TRcfJ6Zb(iZ^Bq*%!;(6`=^T*>9R'#$OsF7F4;p
%X5PBiMNnU>#q(lkoi)_$!/cjCR860VT5@ZteK?Z-L\!>:OU+?dE?U+V&MX:IJQ+@A&]f+Y_D2?l&kR.q]9jS%C:(tP'IPe,OQ(l-
%QqeI=FTZqW-qk-Z'D0e1D+Y82iVdHBB8CS%kthAd!d]!/IhbE3`$nLh4>pk9UYAl1pD!b/^d]"?;0l2-&:GHs'X75n_LSIQ(C)KS
%\j2)"UPa_tHShE5;<]l^qbo?F;LLMKKn.'W]+-^@/W,m7QpGf:3/"a-8epfN0o#I)Wd(b/1,U6uH8_9Q#+fFl"(W&\-AbtV*1T$@
%D[n_f!.g[Kk8[u"^-dh"SAp-g&]=gMc/K:W[L+.9N(HV\7n2MOj;P0<)=CUIYT/;;U)Zi5P<?=a/W=tj3j9\9F#&0RGoIYDN2Rok
%-+]sFKb%)%/Q[K9T6)DuWFK1S<"PpdFNk(/WXBXqX!0fM$oum"?6;d!,5=L.8_u?pcnPH-[OYN=`!%)6ZBT&gO<a1MF>.WNb-H75
%a)M:46!jUXi7,kV;N-ZrITHZ6"W^6pD1L_Y\]g[3$ti[#JP9"t2bZ8!Qu1O`&r8%ck7*aZkX[T;PH`aqO97WRM?Zm^&(3jKLPoCC
%`-^-V\j+QLGed!',SfII<!f"M)(D@fZgFpcMN;P&<SqH]V:HN(r'fkt,X@Y9;$OsmM^(fE-p"(BLePgEOrt*m.LW!.,>,kP3ZcdW
%BW3D4+Z0H_`-C99_N%TaN\J$u`4@+6]S/k^ANC#pQ;G&f8WEh3Y=m"LS:9(P$Cq?Uc&boLQ6U%977Ka4S1,,-b]"O'l#)UPd2X#:
%A&:X?KCAn[Uf)4]\D"-/6.Dk`JU$n+&]kj4G,.9BFn0(;"?WdN#!SH7a/X`17p;5*RY.>IR6KuMGpP-4f-:5;MW'\Ubb?41J5Y*\
%d^_XDY<]st6bl*u>=@o_a[DgaXUf*J%&AL%*MJp18g0nD*V3>b[q%m$JNKb(FP93\#4;b.L80LjZk6L)9%].8Ru)D(L@''dRC)Ga
%)Q):!.1?otlSc6U%[10+Jp)f&gQIoG;ojtAbn^_M+hJ)=!^[VO"*Of-Xs&uP1du*Z7AI"6!BUoEG#3kN3i2gp)hpCU4eoSGA.p<8
%&SAWNk]bKuaUl<ZPTitH'KHdP8!P@DrJi@#nj9t9U^7Ei/l/56W"LD4*`])?g4"?ROh/!;+T\o:.1srU!=_cW36EKQR;euC%5LLs
%%RN8c+VREm.$c1H&nR4s:q/.FHB:]b:-,fd;BcF&)I+$A[88'(7K@Z)`=b`Je[Zh.RM&0tid.g=J;GNd'%\''<$mb>A91]3Q7.k`
%UF]G6PXH.d"urJ"@nJ#GglmSj?A8fFF$g%WUP?qriaUk]<GH*3=ULC\AiarqL@Pmq:_5brW%H1j(.'^F8\(NG"Kc9o>:Ysi"@<Qc
%RufW9h:?S\RT'oaK:n\fV3_hV+:u\J"]<;OQZ[&O.D6cp.d/dH.Wa*%"-pe,1O:#Q04bXAd$/soQV:YRDGX9;&+mSm-'B6'pOFC8
%imP61gd<%qKXV:Fa?58JW4F,CJ:0=io;nC+5iO=9C+qc;A7N2>pnZl9FcYp,>-EC,,Sfm+U*N?l.SQR0UP]_N*`\l;m-#XICTO9=
%Ppeeq=:(ut'<L_m0UqW9>S3WDi#r:t+-[SZY$5A73Qd7'OR&%FEeL+L/D+)lGqiih/hZ7F&nB!QSHX:7S'Z+AKGao#Ql&1%j0#b(
%6"16m"\)":X-=GgONk=pE[W^Z#H>:%6A+&12PQVU.gM:X_p2C/$)lq)O>QGEK9S.#KpNIW:Zf[nE--,[(iViT\sc?m9&7^.'hU%?
%_'9YY@o5K`N^Z3-$)JULJS\%Q%cpduU^L"`A"g.>.Gu>d6??&cM1Z3EJi$+or[>[9>In(aP"?;/Y9:p;alSV0'82aM'`hi2bnW7/
%!6^,5B/8.8fbN6&+eHkRZ7?42*'KC4HDUm4F@T>u>`")bfNj3Re-^$tiJrl+.CFaMf+_sT9!)Kf%4tCUPZT+"`U\UAA6i\lRoZVo
%,Y=7`U+D/LUIp^u4fUVQkn,46'HL&J`/^QhV+R$p;6E=-8!U1GRPD,Gg^XKY%htGeQl;e"#gj-+7Hedh+:>(p"bfj(7&(\Pk"t?(
%3'l<2e^P\G9OnTDk)Z+m_%XLZjpsc;3_2."LJVm@d`nN1T<]b:B)Z6N<I790bkt=D[`AcrbTBEMQ&4W$KEUlh3#-O-`W^Y&5.mCj
%"6P2'MiGS+DM=9_R#?;/,+qXHk1J[t2M*XAN'XA:MgPSD\.*=I_W[3s1C2OY!Q@l7(MO6[Bf:Mn9e:BY&=(5:6UhKFj/GM9ZS45b
%Lk0MZe=t&P;!,p9=*%V-dmm6Z%:T<B=eu@o*&AEb$a8j7Ajr:3L7U1[gd8./QJAC4@t'=3^iZPqF?JZ@SDm4T$E,AUR:7Wa!^I&_
%%80oMn^Tj.'+5_OEa4q9)rYm5$7<)5%uqTE1aXF]kZ&UU2\92>:c*^^X$LjH'$%O/6*sjf[ZHC^DjRn^>="#RbE:hY\[8mZ(QX:,
%K$hr4]_=tPr8Q/QWn`c7@5&9%)m4V;?,VK"8lZs!gZg;<H[XJNqF`9S8![(n/_$_^MPWh/<@lp$=s\PaH,\4,9<>XsCG_Fog\++$
%>#BND\J<pA<H?(??DGY\?a8B*FmVm5Mr;@LM8NW;&0C2#+K1Mp0uic:1ZY/\o+KiE$SitmJWko1HOrsdR;3VrI5,4C.@sEF#>gd2
%A:@D8$nem.Y1P'AoHSlWj_n<\;kV'(1Rp[u'J/ZS12lF:PGP'E3$)4b2:C6@ZuOTW[Fr&);h;k%T*0buE87[m@<tqp33q'k8>JpP
%ll%&%+6l!sY`s-#lrMY)AjPO(pXi_bc^2[ecmcNPD9m2'CK=-+E@"'A%?clM>LUP7*+b9Ec'G-M-H[Pn_,PMRpE;rGTJAUVI5<`b
%=/I\uW5U!h_.6V5d@dL9WBeNj1`Ss-aB0RfNlXR%Q^@r&Mc0SXa]12(-#A2oEA^:.`F*:O?SYIM:>c3^XbnJC\CKt#k]kg:GA1g:
%0S?\76D"?NKKt+Rhi_RDJ-RnEpYo#gU?Ddh7RPfK(>PYuo;*:YL2d<L8%+%O"f/t%-e8Q>@,SqRgWDB0BS;<mYfdLGKE--&>/+>k
%IDlf7UC/?5*a'bnnE<1fQUF=V9@<-("VZm?kb9N]Pu366QL5@23;g>hMPWfZ;<6l<69:il(?;.CKrRrdS-R_NBe;Yl,86&7_sBQ6
%g'RIY#nr<%bmKjJ9QUD79lpLI9f0o0l^3BdfWLZV4B6(L.O(<F2ft':6VKtmEf@MbVG+>\W[=08oi\LBJ8DS"MX0j6.]kP(Kn:?@
%A>HI2k`$<9dZd[d)ekus>ctBGGC6R#dM=G*3`]-'rCC++'<b3I72?""$/p_0L;t0*3k?`c(is[J;*D%<kCZKuaXsM&Y4'g79Hu&_
%8Dlp*Gj#8`C(V7Wi?9!hFs&@>an.g\FD<s,Zrkn!*B0um2t:.VDC^]U;%j$R*(:fbO@Fq8idM,1W;'IW4UqrE7qAoE);L@B;\Ktt
%8C,`T)J0+HbbuBldF<.W>.Sr:S3WNQKUH[Y$kTT$=LM>sQJ0Ic,&uSW_'jt/_?@+(RKJSYE&I_h=!,lW(CT'GA&eV8TcDhq5Xfs6
%ZVAUq!L,]/QaTNie_pfKgSImZV-Q+q6rt6/h4s@tN2nen&R3Enk@>fHnK>*Y1mKTNh?;4>aZI'g`>%r79Lbs(p21#.+`:MX\K$Q2
%++Yn2<uponP[!O)H?[.Z?]7#tBoFW]fs,U\&qlbRnGTs9?N3s<I?"F(5<%B\Y^b9@IjXS=6Rm$RI60oF0cbNRT=a*?L^6TsJ]kR%
%T=HK@5f"0lOEnig('.8,\3-6%^`3b7*Mo2)&@Me>6C<>+B#71075b7S$"6aU"A4@g$@rO9U8C,m'sI.^H[jnNnEY'!hm45T5BA3I
%EG4cNA0)2-ZTYm)O/C_B]t2j;1Bf,3Xl'>NXbl4#"OL2"HNIm7AcP47dK+,HJ:LcFLiC`Q_T8Kmn5s5*!tDU*@VJsB%`Z?1i$KjR
%+rH&0[t>!S&H_28%g6'%ScNaZ65VoIB?10E(3`mch.BrZqZ%TDR`7L+(6;5*OS=Sn[ERP_2r:^E7khL6(L_Qp&O9#_PNuI+ra]O<
%?OoofBV8X!AO`nR*A"]Q.g(9dLPT1L%=SP7KthCu=A5It#B:]M,HehdEDIcU::itt!5oP!#fO,,?)H`QXV'@?i)ilulhL+A:&,O7
%11E:r\$Se*m+^G02uo65;)?2A+a@0*BVI">aC1uI(mfjV5Z7^O"[FF8C5rFc7VMLGUUZN5-5XP=f1VNc@K9]p!^ccb[RaMBBo]^U
%5d2%)m4KMfF@AqGmS6#+"d`:ARY6uZ-WfsLmPo0a;*<m"OWQL/"5G+D3**Hf)@">>0#(9'#p>Z@ShNEGQRn,MHWr<ZC[2$gD(]Dr
%#cQcd,X$d/36?rp`7a8a@(J#uFP;T`_=/@J?k"1J[n%J>JhmQ2S9So)1u__=aq,re!9Q>&-t\Z%D.;E/;Z[@R>pMZ9+^P9S*X;1n
%$-sZ20/[RO],1Ti&kT`@eA3#1i3#>H?Us8i(lW68R]\uMo-Re_6ouh"TL&=h(eRe_'l71_=sT.5Qph>@TOW_:\MHD*IfpZ%R<3ue
%3%Ul&L`'%IX[(?LFGXQ]5#d,OPV""1$AnnAQlc?]+TdI8&k0Vb)Fj4([3>VQW5g1a0>nK;iBV]#i]9bq0EX2!',OCEiusL`S:URT
%KK,*%6Y.)r$',dS++si#l\MBJ0q1S_&D/jY&>lc6&^Rlt`!YWHY!F7"W&'+J=7-LHj3j^2ERiLQQ#jhOjuCju3+s=LW=!S^)p9DO
%$Bt`I?P5c:fEf=RF!QWKg4k-(W,4NMfgIcEOZk*d"mQg#9\4GSD.[E3<;2[l.Qsd@J3"3aVNGa!#ad>0<1d!P'<kJM=jiTq)7cWb
%os'>i!cY])9=KZZ5V5t1:`gU\8A>6j6*/E;(j$K6!DQe'.&&KO$oV4t%($%%KV_$AhC<5K^\(tZ's_D/3+Rq(1N!\H\`b[fVf^u(
%.>I"YnEMis"\3GbOmU#e%aNd[WcmJ@\8H8lJ:gmF0*%Fad#gSV$BatsI:dR9)jf\j6iR-/\fPB*1e1ff83dplKf&![PmE0r+Ee$1
%CtZ9M+Jq%o2`^H[-3Go_ia@XWNuM]r/\EYE6OT7KcGS\5i]9E]SY=H=@hQ4?0Lkq)<#@)B,EBh.!4$+SJK":r\Art7(Cb%:!A5kU
%i`mj;JHbW$l[F[q-Nt[LrW>Sm":Y%Mi@0>ndg2KYi>7@!+eBFb,1jfukGD>`JS.k[D*-T%+m)N"'Ec`5l$NAd8(XtfjEed`^BfAe
%4WTs?5rjT>iWWd8d=FCVF^gF=g;:->1_^u9DsNXC8PF6(nX:sL>eL,0"qQU="j]0h>hf`*<Z]%ioHD"nghn6Lgu)WT;g:`siAsS`
%h4=#$qsHi0gds^Ck>(jbM&FT9aAeU)BS%Y7+/oMeM:d%_eWgp`Td\Q8FZB.:FBt:EL-u\QJqmJG#":Gf<@hCnK"qWX95gsJ2hd*d
%/hd<X6E(5\#SVg4Cf8A)&/-\4I=5X]9q:XSZoo*Z&]7=%TZIlt)1deh)[6s/dZZ+p$SQ6(]+G%Y)mbZ((0?%)18^#oLMhZ%8`<n;
%67Vp8]u@s]3^MYMH*J)(,*\K,0`@<W)(ckD#4Wf(;IdXBYX!6NcjoK,ZY2u)R?>!/iK,?E0c_TI<f)@je_ilu)#7j]NEm$#gIjX`
%>Qo]`"0_@'\H9_(<5h1@:fRW)>,67I!&T;&p0gtrjrHtL+`&l`'LbP>3Yh^jc3IABdTGilFo-2G"^dH0F!i2RKClrmqu@Hg.S%)$
%81`jc(a3rFW;fCA@3X3ogN[_\fj#T&"5D$DQ#DD@`t!YO3)Y>)FqA+t!?-\0+368$<j:#hUk/adKNh.(D\F*CW_aL-M$V(Ua2dmE
%BO0R)iRU=M7D$1fDhh4Tg4WYuTe=^c?1^_XE!l-caZ_N_\0$u4D*L'Q+M0)i6UoCNQ:TP9nAsk1#fG_fmGdn/K$ZQI;!iMnZg49'
%J;g0q7"QPOZ\Vh6qU9qI\u:j%*"TJqJm0+GG+^DJXr)nk#Rih+is(u>kRgt1__XFTm?/'s!0]3qA^L7#$nDci]n')c+nA*)d*?lM
%o+hL9!0im1f+nk0JT'3I!Z8(U@$4AGV7#F/'Z$1!8g:h8EZm=p$r&AN\X&1SERHq"jcOo0!6Eu(C"6WY2fNbh)SV`8&V.Ed*,nrB
%f3u5bMM(Q9F\JGFFB>raq:*>V,i3D)C(eS<KoNHY_b>$Y.`6n(HTeN3"H*`[T(JGS?=s`7.qT4[rR378G,>ZKl27_6/Mf!N;u"F=
%#p^0*9s&t&=;Y^!NbIJ'e\O88TLoULXp[u.]6Fs)Y>6etE>VI2FVqJ=+2nM80QH7W\Ng]kfm984BNAM&RU!UL:%?0'KdY-^IJk/,
%XU(R7!\I'kd'iQ(()r&9a_`_*-6lk)@Z&%+Oq9am6[S8Z2oK,-&JtJpD8@iiZ5NRR"cK[P#Wrqt;HFok[;g8PE+U51P$?3_Hu`A3
%eoZLlBF\of+I[,W8)D(deY:iOoQ2O0/Q,^6C(e_0F=%!(*pf=#(#U:SdVX9mJg$J.0tj=cS&1RDZpl]ipMOM7pA;o*0=lZ.DE0,l
%IY.paI`!SL,7Pn5*FUA4,NpqN"RR4)C8?&=7GB$r.23eB:n_F7@I;*S!n5N1?c7FMoD,N*JK1kYm\(-5Y8mCF,r:&%BP?i:gg%2M
%8Mp*Q/[M`cY?(i>;h'?O]<ugS&+dV):>u3sam(=S%B?`26hF$A$3EX);1O:7(tulQ2@O#-%J\]`KOHLNX*>YSnLfL&?G;K?COC!B
%#1%pCDHP]]C5*1,WBTN5XF?\$T]<Y/%IQ*F:UqWTitbTJg(n#lD)7Y!I<]U2Y,OE"=tu5GhU0cfMZTsHJu=IOIbbdCYGT5T`6s2Y
%@_W'".aDh'\0a\HBb-%&Ir''`EC"A&X>U<'FPqpl<g*iGZW^ObM;^=0MoJC'_1W`:db6;I2o]X&>JL^;XW<G<G?6TO+I5&[<J\r[
%SAnipGY$r9'F7AOh1YjdiQR#fU)/C>2CI+b5ehiDm*RKqf)Q3ehqlfk%Pc7RUtQj-d"*:uL/E7+EN,66`5G2(_cqjH#jrh"L3UKg
%qt#+c1LFrNKN^mUW-p.d&!4AN!-3!A/;1FEoo&3`o;L:mTDJAcQqKNnOYqCAS7tZ0s.?uKl`h]qc33#@d!s+Q!h<DljS):Xp48^M
%65no])JYQ_@PAosftC;0<-8SnmM>Tdf>#YU4?UoGXNZXIWc!\_J7Ot:n-F5ZGIq4Zr:hhBd^c<apnK7H09kpSIJ`c*NMQUBA_PdC
%.<RTLH2R?M#415b]Y!tm2uhof\skAQ@f6!?H#siP7<Q#F4mk(WiDSL4!#[]je.r31Z\q@W'S),lE[C,g!!"<:aYX!b_L#ECJ6\o;
%kY;6$6$c2+4-eiJc#3EC;=c]4^$M@/BjIUs:Z#asB<"Q&n9,#.VW8hA^+EKR/-Z'4_X+NZJq$8I:j\H6rjedc=PP!VCBWOC0HoW$
%D,`1=\\jsXi1mt2ptTb-kdgYfg$i`HC%]*pdfDYd<IXr&^2iGJSK1(Yp@\dV7p#[uQ-RDLBrc@Q<?.1nT)n,,8ln-TdtQM1*ce5q
%I2nM)?-_Ja.NNCKnes]C8r!I>[6Sgs<p>@SL:!;@93e4^hhas<jQa'DpX)u%irPcP\ndS6?Re/k<9_1OA$&6n?$^(Y%__6@I2K,G
%5,-OM*Iar9Xd(CToC#&G1V)I?5cMqGK_c=D\bQB)mK5+j%AiK$EAe$-b&9o.o)q_9h6:(l;lP,+K_P(9l4>HeOS+-cRc%E%FF;]n
%ShWU4G3j;3fW\6.h2'0]dmABUd!Rih,\/</4FHs!YT2#Ib$"sdi1SBW((gV$QtigA7QMGrhf>6rMXt93ko8$7eY?7O0j5_g1VI9K
%/2I\nbpqggBG!(S-2%L_cbS>#/Q8'&fu:\<C'W,s/hg%9BEKXr=b9@2Ns0h9^6Sqs@$3nZVeu[')bM,[TQT@p;$2A<%l8m]#D9Jk
%/VcH&5S=8Fo.Rpcrju[<0[eudWQTo$N$0hB]ACRM\%:u\Nf1iq-73n>T\b#%D3?7+@qKQMI7GZ$eob"X1LlTW.`&)V?oe@l-0#&.
%er*bE1.=%eYNA*-oJ^!,"Ks1pG8((!1i8(7\sbTQ6^L^n^n]!^#(/7UL0%\7J0?Jq9/r@]_64m5_RZPN:ri=^S'iA3]H^Ze:-@g0
%oN)V@'eO15T&(G41^4]=@kIgn&Q*YjAQ6'YRQ5tW$)4VIA>V',!^QGK,'@MA)6_Wr#KXc]*KZR(#1GZ?LQJkWa3;K;J?!n6@[D/8
%QIW0]Efe3c.0@`ZY>!X7<]RsTs1,,RC@NJ)>grG02c_M@g*<n.Nd,\IEm:;G*[';\F$oRE6kX3qJlJT0p]+oap1_Uj6!8N5ZOI2_
%2-fUL7Xq1R\4[70*1IjdX4u:LL'*X44+dGVr%dr)&^4Rqf*mKN'cGU<aV5R.<BCgkR'Sc6N$qVh?kcgB@*?*G?lS0u#!=PAr<>qu
%Wp+B(8gk9JQ4GaWr/IN@NZT9V5pH<4o6]Eo@p^*dk>36%Dbjo"bXRFe[fQYdQHK-`$F)Pt0Ok?/7:G:1"!(PnF8!=C#a>5o$k)Ds
%@BgmSo+A5%"o+)Y-#$,B?Y7-(-48Gm.cN,(ZA*_g>*V*X/sYN[q?9?AR?[qqfDGB=AnYrgAI7Dp1//J=#U!RNaHk0_<@4+m>$^99
%U2YZ55]Uh*BIKFJ.mr?K1'n%pgj8%7eWr$r5G<#s>N9m$37$GLJg_oS&RgVeB10Jq'`^U-$bKgQfTU*eQSUED8\&G^*mK'jLsAoY
%JedK8g@FeOU-VWPIt=i$RGSMp!`?iQjV0QCMn*$G4OGZ!Cd8+)=\T4Nib)K"5rQ)$j+ojqZH;G2c%]WO?k:p;\c?k9bKf=?Y;brW
%_rG\oQ8`?=2e1M\KUQVL>8Tad8:G-%.@<uNkV3YR\O+B1UnOIm\O?3jW^0;NL9:Wf].`BdmuBR^S:6lB6sU?:VIm31+>D47hP&W8
%,i'Yd-k5tdj>70T#8N-;.n5q&8]7[NQE9uJT[pO:(XoY8b&ir%Y[JoBGGRHG,4+eN0A)+0T0Q>^@4-6aT=U]Yq>f@mIJ</0l[UQG
%@mb=+6tF,T$8>;q"j[LOZJ0un!H?J[IR3SrKal;YT7,O,8`c0QCJRJ6A<]-&NLmN_-7C)*=p0BcPYa+<'kKFS1)XN5KiH_aZ5,]_
%e-;#+,>itY8fH=&UB<(QVDg3Q!g9mCk<ntN,)oh.jViAXkR/[@`JOi_RNB,!]gBL*:51JuC`Phg\5-gUKh0?jdPIsi'`a_]$P7>&
%1ZS7ZeC>tGOlL6n?/p,6&Wrl`N;=]F(M`o1XeM&<+*&>D^*t>=_2/H&@:N5hE@>9#&/&6D0'O&@/Q#@L8]"CG-NmVSlB3cRoeGP$
%fC`-7</qCP?G=MIj]\"-%7k8CSNJ$oUq+?H%a,K(Dj\$ZO=YB=(ol]]@u=6qZD=\qZ69P-6p'=tA.jeCBg>p.W=*;W4s6r>[2k00
%\]PQ[^)WdNJNb^l&pI[9?/)',4=:<$QF!-DMsL7\"X(j-EWj!$3sb<'/S.$HlCGQ!!1&RegaLj>'p:&9pn@%N;Fm+to)sq<kn?<V
%nEs2Q)sP3^;2MR1AUt-$]s%M;a2^1L,[6%95a7PXkik%`L&gq@:J%.^6#[TA4!H;m3u&?T?%<f-`*<A(-4Wn]J\=_-1sR\N)l,N/
%RD!DmZ?+&d=>#+j0FXAXH$p%]lY$m"DdnF$I.=a0M[8OJW!TV"6pc4d(Q1aaX@=XI=Z!]Zjffp;]omd6$W7#)F[<^R/CraG9`fI4
%3852k3.G2B)hb]Q>jYLpig4#tc9gZ=\h;,(m8i9R)>Zd(*9s@'ncY=q4O$?'kEQ>;WG5:cJ8f:tW,7)V[1/nE$<._]\M2rlPg%*F
%>!R6V$g[,\N_$Lj,s$Di6AV(E3@g,Ep1W%f//O@=Y7Fl"'F:WVK`_d_,#AcC-/.U^E5iDZP%;ELUo"E@\?ucb92m`^PcHLGAkAGH
%_?tW,gT)RdLotB]'D''%i,tmKOgS"o"-^57)MEn@%nJN7YsS?!4k_*B/M_W1[^J:LBccb]0(7$*N&*<MZ^K51EBh"h/0E$cJD([m
%/ZY+?T6BE1o$DUE8a+o<kQ!0-HQB4&LAD$Rf_6><iY%C]Du5nE2U[%`HOYe\iNXUNKd9j!.FAWdn<,,@%.0!^W\L!mMK?9]U$W8P
%?.HYR_r--[k63j72'dn;M?"c)S8FU1O1+9?.HS*HWA)q($)EY*>=`&^0)Yk/"'X2BPT7i/N4fbCA:eB/LifRN*0:iP@bVPQFt@0;
%E7s\$N-_IdKAU-c*hWQTI=Ng4rBqT/H+WTDLWX1U*QS<*(djYri6kfP!=^faIMQKKRO*L#*$.ol,t+l/'\lMM!dK]*Z;_CTK"5R:
%#^[+/:XiugYChMkrP`CW9T)fCbN9%+0=sXq#-SAI=`$G:C0^E@/JuZ#FrU!KKn6A$G$%5Y5LsQ(*ippc<Rr1km+r;?Xi8p"b@mL'
%%`;"K;b:]X7o*8.+K.e*b8Rc82,Jm(S)O`eFc4PM]ei`6.1M"9%?N[[p7`t3^&i#_e!`K)q1k>oF'5>H3*$84^mJ((`-]A_U.p?m
%rJBQZF#TP`fAi%1`3a?`JTrm$k<85SU^E::f8\fsH>aUl9i,QP3k`VK>CKjGKQX\uMq,g5rl+Ujd1UG<9t:u!7H=``FFiOU`!EYb
%#=R!TKjqT*f@T_FBnH4SXuu'4n#TCjD#m$7_uXJ@.'b>@o+8sV5liiLdEsEWRjNiK5k8F96]_1?atNm3T4?bn%Ot^FbVHD?VI(J$
%NK/lcFaYmI%rtn32Itk]9"=XIC-Hm+$tX`p41`U\>m(Mk,u]-">)n;NM38BK)cX-PYk'oR-F3gf+&IYhY==:q45&7iD1dTDid"kM
%=>ca]T6RB+S.%5Hd#(_PM<*f*.o!IBq7%OlIb\_?J"1bu5rc$@P%@c<CT=J2*iH1Ej@Jk#:d.op>]QJb4`YqGC?ereA8#dEdPe':
%Ps,@7).'hKiKM!e9[5=ON[7T@A@q6-5rc4OT5"%)6Z:\iHWs#">/'dui2ApM&9E<%EPu=B=9-Jd\TkBt!A)Ia2b`-e/3u(S<FFaq
%`$r%tT6H?iPu?Kt#8F^N:@d1-oP7)CXIEL@[-Dr_.SKSjMmEKd=:M?TaAB7IkI;SPlPk0M5X$kSAB[KGe[RQNbHU9^.:T"D+W+ie
%G.h&L8[g?(+RYkWf&,$`;*1iFhM)Cu5rgH@*:,_U(tVWnJTj_/o+!Vo=2h42LsA6!lW&[ig9pG:+C(%>2#"#X,o\HoBP<MpBMED"
%I:ZRqUdO)DaD:[fN+uj/k^0b-R$7%@<"Y6r7PkQ>(s;?u2)u3X2.TU5_o@h?)_@\m]P$Rg%%n\!R#_]BTEciV17pIOX0C\R2KC`%
%;8"_&ed(!20lpY2":`D_DN'/=@QBF8Se"/M8TB/!Y>?V`haRK&</=j-8@(o]lS;9M)7&sR\N$MR<'QKH[>:";L,lUuCF6#T'N`kc
%bj/S7BWe>943#R;;LDAc'rBNX#+KHl*OF.s`rgeM+QZ%XEs)`@=O?5V6SHj<ds<LIm`bV[L*T%@lVdBsPuX$jhM$rP($Z.*$S(jK
%*!9m@)F`..m*J"]^ZN+Sd%fl[dZK'A$aSPJQ6f=OC09.qh(T!i!-"%*"H22ZnC9';c9NA-c8)rs*Wug:?=1`^#iY?d$%9p9>:2t]
%??XMB$7Rj'fC_Ht<&=N$&8GUR/,Bl/UpUBP.MU55+VR8k;36b_7JF#D0^Sk)-'G3Q\Q(,SjXMRXBl,(PC#\bQ6#='unU]i(B$Cks
%oX!b!'=CS[)oS(R-gJ[j!U9a/7<g&'l*t24S!Im228oluK4_Oo$m\7MXO*?/jAdHGd+k^c+(k]0m$$X2lEpYpds_LW95)GOb`EBE
%G.']=.K(bs#_+W+kCT1-)d&%7<T(k(KgWd,"kF92m?5mcAXtQT<ec2Og92RCitcm6MQdAf/%6Pp'8W7?W8`Rr2@*FPAbW@%ptL94
%7V5`R\Ui+aP%G(%a(20nh+D\WGa/^]cqqBRL5%NE8B"$,+r>+l\qTq$-6O>Q,.V6^:s^[qUV=:8TV^B<ch<rqY4?m(i88:p?^rC'
%6=gaPjB+sep%;^ea0?<f=ALU`cslM1;$U[8bAA*rcD(??[g(AKUsIT(?53K*k%p>VGYJqA%g&MdM5S/8P#%$#:I)ta(Q_IP5#4Se
%kSK=XN':$.a64>$;N*e69JQ<)3L/!)#qD$[R\U;1:D$U[lB>`nK?k023Su2UX'DcJ`)X#&.IrA$V[4mYT-gfupahOJUX,*+$p@C"
%*t$kP5ucBg;/+_cctXSmqY.kp]c7rCil5W1Tir"iQpmF-l;A??au+'K\u*0)#FuKS=Ul2i5N\;'](?(Q$p9aj)r%a<A:qTrG`tH*
%]1[l^,knNr&/W^,fZ4;0lg@'W&p\8X<5$q_`/tPC91,@;_nC`+dWsqmK_?3B!suC$(,RI.2*7p>59GMj9<,A`X5Fohn`#H88"WML
%3&B?tm*[qE>Vj\1'C/!4[6tEjo=6FBV@2,9V^g*pBu+^2afk#"'Xh"EG70Ni+o.%57;_K=r62SkIMFTCbX6DnR'("S92E^r4&O"o
%*SMXXAH;1adX-X*i]In]]"_1BOJ>WLLToY12"r]&mDZuE-Il-%W"s(bk$e)P[+5?_;KhoE!0%U_)IQ,V'\,!7JXZ*/"`tsoLaH_c
%ZBMSA*aT+$K#rbG;S3k].7hZ/GY#">%1#M?E_sWuodh14dW>^l&6BfOPf2iCTH2R^<tO)jNleD5UVpKob8Z?RCTV88545Mur_8F(
%j%)JCe$Wa<Q@j5V&tYU*ZQUJ@^/rMMTUf@ifhn<%o3i+$E&/cK2pke]9h<U,/L,6l&I;^EKR5t,_A+n&5XQ'HAaCP[^`mDnd"SD*
%(4B.5,*^jPW$HK*c@SJ=(l=_N9F#`o:c,Xj#XDiL/6QKKl8q>IJI3I@20u<75D6+um]D+BUE=^r&C$'IKM,Wu'kFeT;HfDT\GBT=
%h`q2giWl;a`WeiiG7(\O8/=*"d#AJ^H;%lip:>k.pRPNmNhsumTFbfB'VI"o,]&'?iLW?qPcNJETud5NDj>R2,$apV7-#6Pc/Pf,
%*=@B%P.WWNTQ)@"8&?Sc3XeWZ5L+\?dt<`"c"Z]a<F7TLH0h^#%D7m]pF.fc+W<1.>IC+-jT+iaZnO`oNg#)'g4PA*B329!asN4e
%%3i[Kl[%lkZqgs24s-GZRQahm=9t(u#TuAu:EZTqUAtR/jg/7F/u8mVfkH]*.=r$p3@+\tbYV]Jq/.!,[%]Y:Yg>N],CX&A)i"8<
%m;Y85S;cJG:f")6`3`m%6He>6XB)0f+5)3U.a-IUc6-Pp.M=l!dj.baCB6(Z;)k67[q>[;@94uU`O8$mHS>""dNn#o=\&RIUoINU
%l3^.aLGpc>(EGIaoUn`jai\M(hE02F*j4f`q"J/KO%,l3C.-kTeZZadr\n3?J,A&g?[\o1QZ'Y<iemj6rp;ZEr9gWIFb&@trSpuZ
%n1S_[orBa[pm\bMI/332msb6/rDudBo@R<X5;ZA]pR*\Kq!VR>q>J'1mcWJVoAeSL?[m@kn`B#iDnl23X7-&B+#+B%+(eR>iLAr^
%hn8pYlQ?,q`>A&I:YWLhG/E@YJ,@LBhgbUuh1,C^m?c_DrT<uUe$fY&%!gi`=oHTH?iT`4I/g:IH[RrYM=6cuIO0@=`+f86gE40*
%Er7$n%k#E.PN2QioU["5CU7:6X(U=<HiLk\mH[!,`SL,\@G!?(0.u5@^]!Tfq`d44o02eo0uG$\/\mDqf74sk0#3OHfAZTY_shfj
%f.59",>dndIJQX051?E*:S/-@=%IJ,Wp^#&_D#3!gUGXr))h)"@^JI!+c!RuC[9LOSU1=?7$^jAJ3CN4U8KI]m*)?T*>6*t<aH^j
%D@k?jSA]iA_&f=jY]AjpRDsZPE?BtU]uVCI5_e,[5d1#@W8u3rK"t>?6,g-tTFP\j@oVeDJsqhpld*:pG`(O"BuPYEZCn'N,[j5U
%52%)NJVW:9]Z.TK-M9e76i0Q*+/$@8%Dqm('Aq-SpS/;Wf89NSaQ?R%ZbrcK!tIkEM(BduYP[HD8_KUbV5]Yi!EF3[>j:DF@VaJS
%+N"Z,AXU[Fg?-&.D9.X;]8pd$3L-Z<hS5L2ni<S(o*EA"o-bB\aB9e3MU%slF\F+m.p/tj+5hL7hC'c.W;#;n;NF^dJfrch_J)J`
%n-7%t;6mJ!-m9QQ=Nqn3Z;qOjMYXiD%1#+_d&?%N^;4YdDO.8<TK21XCbO7CAfk/@2O3V$hS6)CoTFSEhr.C)>24qiD07Xd"Cf/(
%.+kTaf[Y2=4O1P,bLh/_d5CS?<^\.6TS2[o[Mt.V8HdK4&Wc55`87$,#284PN9qCd^O9Vnfi5-+qoYBO%\p)kN.X^j&Ns3>J:e)g
%Q/5JSK*@$G83f"i+KC>-q3#hH9,4su;;j$_)g-K;'f!?0[C7=UN+9?C,.F^[mSO*!kds"35hg=GZ,jB?(A.[5#=t$eBpjh5[;kI-
%`KZ\oYr)5Xj_\QQTKI0M??(<F@SP'0Gi&;X&ZV.uE1#7[NZRHH)PIbP#RshQ@.XPq,q[CC_5-(i7TPInWit=W6)EaWU%=o_?;-u6
%Sn";rL#P:J_+AI&T66aO3mUI1'OPN;fC\CBn3Do\E_Dp'Z8aFS;-DT3ZkeJ:>.GNK7:AiAZCJjI/Kf`:8t=HPMiQ1#VfbNPO6Q';
%240^Y0S`aKn3];=IMPj!HQH7Ukn1?6=7D%?p1L4Y5`(\dV'0S.F@]n^1q(LbM_SC$)Mth\7=).:kjkf._Jgl`#/uCt9%h(P<fi%e
%?&[=dVX5TY8>ibQm7Xrf[W!TZ-/9pogo1QM_jrb%Y949u,#lH^K7pMD;eS,G7`/@"$tG88`gY$Y@uV,@C4TS-`gS03opphJBc(X:
%0\-910\3=6X9]YY:'F[QZ//9uk=L79,&9&(01guV4,[O2&A;TtH>\K$,n873TWX96=ih*$Ck<#J%+0DL:^bYY)PW!sU*4hK6hD44
%h@-q#dF7L2&3\p[&A;m'HCe,njP4I**^C.]]0<PCP]37Bh_'78*FB;-T=l:T>rd6tAG"P*,,<Ij&fH+G9b`'IU1!W@<>##Zb6"ts
%E*WH-\hF58G\%#,p<q#J\\9s'5C7AQh,dZJ_'^n^1O<TV(S#?*ojC:j:YI)[@Msi9./>m2!r:aVO0r8=-"K6m-0rAhSq:dTCS-a&
%s%IYCV[rcGJS_1]T99)*Gs'aAmD0m9K'[u*AE;q$!,fq*QcQ%[ndr+!2oSj49/]=HNtkYI>8k`aiuf;?BXMCCo5!1X(nTF_m_O?`
%(W`atd%,0;C^;42]G_Z=BHCVUK/1D$FQ]^MKuj"1.1T(\Vh*6AfhN(!*l""%Un]^+\uQ'B$/#?]-\f]s(5s7Scn7L\TA9V;!nfs-
%8#qk;ZEXM.^)jS8*$"7*n=a8!q=ifXUF/q-c+,`#h#h0mha@*#jcIsLl@4ski(Q#\iS(YlT+f=!^/aXA?4H9Z\"<lVr]tQ#iEn4A
%XW#e4h5Yl$\Y0t1_As@a?1oBcQZU/1/87=KqElTT]')Zma'sJ12Q?*R3aoHtL;mDO@X:F6C.P>rm'8-%*ji$A\U$IG5H&dG+,uHE
%"H&0C^_nj:Qfrn.bO8@uP4GKE?.1*dN&A?oQgCCSf$dOb1%]kHJFo2V;$fFC1AG6l#7ol2>OS6pP]t`/U@+TO6(-fm?`kY>RQdl"
%_#5&He,j%NV)FZMa[7WL%ik"qrgdMo4F$,=^N6S\4JRDhB2ds#.C1uA'1n!/]/0#G2(U#fnZc4lht,*L=pc0+_IgM+TXG+c]Ks0c
%`H:j:/U@s#7"$poddrp%5#f5Vj&\!m4;+a^&l==8%F>(`L$'^@WL=-T6QK``:-e$2`JVe?e.?YMMm74`3^$sVI95k?3`qm><0.d2
%#&dCo$@<M`?4+h*Zn1V;coEl7ULRs/es&JumEoq'?k`5>S()@FPg!_K$pTbGPoc3@7aH<+O!]\C+N90..WKm\'BfS,.^LelCVq)8
%iJ(XieElLO9$sqpH=98!kQ<UbJ@OSg6/!X&&B?`(i2Apl8n$BlFYb4&JGC,gf/8;06>RM``XQCWL+'m!T[Sq>1]^dVdj-D?FEu0+
%h9`a<Fb3MQWXjLd[=Nrp=+RXE.m\aP7HkX''k8AQQ(29j%NXgIlXKIh4GF&@b1"_@<5ufM%c9)LUNJ",bE$dH@`!HN=:[^J?Is%1
%&k>1i/!@=oJ9pJ!&5`VPj1D7N6fO"Bgk[U.*i-nH7+$C%Z*5EBQ*E];m=RA3,j!ke.)H!.762^"$I52ZX=ll[[Yi<paV&<)'[cHK
%7=oPk+eo&fBGnanKA)/l-YAl:N(&#?f"j^f@^NTYG6c5+MV:WTd-.#7R[7nE@gESQ%]GWX6Oio9$P>Fs=L6R2a`=?"eWHt$28>5t
%VKrSQas<a'"`(-Bm/T\g8'9&Xg_hc9+pkCC-3`X:!bfBP7n-Sb!BHrb&6,Ji%76D6Sf#tHOiY=hV9n;>l4jW`;N[6uV:&">c5QQL
%7BLBi`r'b*a?c*)J7=?BW^4\2-mH\AHBr,b)7Qa>_'D>!fT)&)/5.QQX>&+"4&![104WDNYfMGcR[&HRFO#/^R\UW,d%JfF<bl57
%KO%&p(\NYsCdcOR6BJW9_o=O4JOcZ9/tkq/%t$'%rra=V2@^osd_?]n-md]*%dDf'"$JIN5+%!O7W\V[o"$B#[%`o`p,Ws]K&3WZ
%ABq^j]itN>,.TK^lKb+uaEbUSXW')F<C7#GWq<;8<Z7VSiFk4j'RL(\jJktm5ubG.&-[V1bSm<n&fsG\HRgV16%<lS]JN=n=sWB6
%QpZ$Q]K8Y4$B+Y3V#7A3]h8W?@5Vscl^EuHo\\q*H(K(7DQLo=@FaLi@"q[-o*2RW.<Rs=CY8s=o(7HS62H+22l&NU>8<4G5!Z\G
%nGYn02O*]i'JPG1L+o/(l-\?0UP,>I_N>WnXd?d^1e]fgOP=QrIrD0$?67(s(P^!OUb/--gY*uP#4A3VQQA;1ZB?a13$9oK/npb2
%9Vo>*l!sWQH#&aMEum0,f,n7aq!][qab(+dNEb`-Nq_'`8<Mn2Sun:Q6=EhC%l=fc!-T-69$bL._Ak3Eo>,qbA5*SCD)(2P"G*pn
%aBkJQ8Gh^k^O-"Sh)"))d>>4o.5EVAJ&o0Vg?5QT-A=o!q4VW>(IZdD#X"?_q'lua^\XimI/E>emk53n^Pe1W1LE6_;Ys]Er2Cu^
%*tZZjb$N164^-F*DDE&A?m(Pd/lt8&>*#WOA)s`'8'0FhnTca=<<O`Qkg@\N2d:51A@2LHF/H#@&o'?'Y"41P53klYX>*N7`Hr\6
%o2)uHir&93qEm,^rp4\Lr.f$Nr2`Kak@BB5Q"5\j!<Yq9K0mK9$d4t\`1!7*#:6@Bi^5LBRKWU,1`RC":c%k%f"r,Z6)5A[l-Ym$
%$@.7)/^f%);3`BVBg@k]0:9>NcURP3D^rb]fGEP^Hgfc88INk@l:]RBnL=b@E#f"p?4#J0[$JW('E2rC_/gDK;[R91VH2u2dbYs;
%#4:DlDk](No;IE`T[:O3fed%q+@J.\eT,^B^t;&W/AQqAcif%Qc:1_P$_%k<RBsdM5Ca[A3jaR?W8q;*.[_?nMW7A3"9A[[+B@Y\
%RG*k).mD,Je09aC&Jh)+eNT:ts,n%:Lg,S*`%FNO`ife7Md`%K8K<6HF8UUu/h5=Kd>^j=aO)p.9jUN4Up"96*];lFq.F)MAQ):u
%G7.7VO.g*lR$Z=/RE)^ZB#'rRP@\QF?cs$^T7C7L;CibuK:<j)./@>-akG\V'607a=`:FYN\+'g_3u,P@UB'r1"8,O@_oLBUDSfX
%1eWDAQIa;2gtY)>@F/,Xk>NZ"BI<dEg'b]WG!k2cp&d\.m`65l\0hB-\1;h'BO:uAr6B]bRQYS!Xtn@9:$C2L*ZcF(2t%ZuG:u/L
%O6A`_Tl<55eNl07lK>`[&*Z5>iu]EP>k\0'iq)?9pp_.;!lQlH?;oA?:gunLQo]q"ONMqnE@%k7-X>C@@Mnq^Lqa.ZPird8p`rTX
%]['"[)1iVO+`j"lobs")UCf`k=$lB<6q^+A#5e5P5"ZN]_(In_gN!.F9E)\E4>=^t+X9AIlji#*HaY,U`j*'M:9lZpfAWXSWM_6'
%_02X@`_)f>0'HYdr+c_]?i5?N>G$-cl2<),lfZhb!,MDS7#m\VK;a&e)3N7Xj3O9?/1Sk9FYF&q.f<MMNBXcMf6m!R,p^bIT2ue,
%5EhG[jQ/1Cq5!)j'_.@P.u),3Sm<RO'*?J]!ndXLJ5BqIr=4_9>clSHKJ5QrN;q't'*=k_BSf@1&7-`;(>1ks>(fgkcQTq>p:9R-
%$ckMY0*8FEd7^Sc#^^n=HM[jK:=%6]a;DK_DaLp%bdSUoG$9KKRCJ/pG5EuU5m7d][=^[[>qiIR7i8<sVboA7r;re^)QP3hVeM@n
%]8pr.)=ga(Pnn66!]n'0ha%A:J=Fp/p^lH!d"f0JE#0uD0!J\YOS0`<H-C5Q0Qo8_:><rMJ:7#qg=?WGV:Ie=3Ob=u9;&#,qtAPH
%_Upl^$/Ln$?[&a*k8_r\<:/Vi6l((pT1,*RV*9gA1&;&%qp^Cc8MUkYb.]qD/UtN%KBk9cO+;<*.Kf%/M!=Tm1,AEA6H0)RI$Pdn
%-ZEJ8(PDe7G>60VjqtT/d<?J5c1=q!k;O.GYk*bdJmqGqB%qC]WpF:%$[p;,4iYqXIl=0Qnb^eFqSho!@gd")kOJ5EO(Us"4FGM,
%r@of)<B";S25KMU`rGpd=T1"'X/PB<?BXN6]0S^*n2Tr$+%+[*9MP+Y)oTGr?9Nk<m$'!R9&$BdpeY0YVuRh%3A#r%1Um*`0CV!"
%ndmr7pmDCSGP[LO6F>l(,`T-X&l#"p0F#&QO@(ia$LOuapB"oqff")/+4n&CSS/^ES7`.?O+PLnk[)D7[Z#<smD2cL9t)dZ><qo<
%HYHEO:^?`(br=DCfOtF'n[Is^&2(hii.N`+Yh'nspGn$#(gT5uZOnN!/^L.bl@tftg6h[Dd.Z+#9qd*W3i%bDRV==5Sjn+j3o$Ut
%Uu[#d=ZO>+-u`8;D+i$o2e\Hqm?&1Di):-1_]02KJ!8ieSIh;F=SNPWbhI3[LD%s]gB,gLEpSGpjGXKm/?^"%;(I:.CnEQjq>$Q;
%Hu<0,I,"=/*t+3VZ<_4V>5Vks_%F]]n7U`#V%h3b*MZEj*Kn6abeK$$nC")ho&V`SETQ4;AmYp7qoT=A;Pb*hY-B(;B,\ji"_^8U
%X#`5i!;RcO+]300+<1gf1;S-\%d!+a>[Op*oV3C>^k+ru?Z*;R($$4N]RJ9o(qIn.5.I_&^?p6GYCAu3OX>749Fusbhnu(EnhKtl
%dP:AFg0lp#O8+cW6gC`0&1"TuD`R"l6M*^ffjG(Z!WbWm"NlSkc-R3Z+:CQ;n1+XK*0IbP,+LnDE`HY'br73cq;)st^rD_';7F6<
%2@+DRq4L%C6(=1VQC7'.Y1E=\>`'aGn"A"D1<LW.__X'q:1ANsoGk%6FRB0-K.CY$+7i*-DSh&nrer.^7>:i;l93d@7h^^:.O)_F
%#c)>S;!9;Z:uC"-[CEkd!SM+*Xqtc7Pj7@Q"Y#P40:t*-L&F$Fq:r84He\4.J!,.uK_$5^\QBr+?\!>7k!+iNbkjNj5Ku@%C4rt/
%"?F+dXV#]3D5I,;K/J<Ya)hEcWgF,n+WDW-gPM&"+nW.7d8jA"83ghSpjCTrd1>4>:KV=L!YkCr9dRl@DBC\@jJ4dh")`1h='_rt
%@iYCDiF@@jjV@Vc4MsU/%b'IVT#L@6N_X'\iuI^^]Ru76l6/!1dqY]Yf*^n4,=d.jO0iF#>)*=ZQ5^Z]aC_(Q_E^*JcEl*e!ek80
%<a*H.FXp"tX'QTrU4Yu.j1F(3$FnZSeFHlI1$!dYE'Cc`A%qAW]g'?L5K<O@r`m)\OSq<(`I2eCpMa9+a8W!I#d5?g%3[N?$A9h"
%J_Ff+pWtsW80/0WNTYUpmC!*SB`&_AVHf"6.INdcD[(gkqR-R'TB4E/)UN3'gh^mr+)DXj?+t%rhQf/Tq;AOaHe\4.5ImWT(uou<
%F)_[nIi@ViHlDI@pNau4N*?qNQ)3`aJ\@X$#3k%dW!Y7NO7rg8Z7lmI6.cX"N.Ip<J0MQLq?7!J@&R\26VcDX*+[,VhcjErJFpJ'
%`&B*-@;EMY?8j]#<\djmCES(M:2kQ!>K2'HeTtU"SufW9%^EX$58V'OI3-;Q_U%6Zh`d+_O2F!3E[S#dVi,5T:m(-526!8@Rmal)
%:cOb<o8TU=C+or*orL:@r"Qnr.)t<k:.E!F&7u+BA`h`*OF<F)2^mr)%E3./?1.4^`V$hI@Ruj1Da(W]c/*WWg/$!-N\S8#58WJo
%?d<.%UX.s@'0hKPO)t<tX%Q2";+/5t,9$IpIDat2Tj:9c+aL:G@<n<'a1L7$/dg?F<CR;3(u5Nf3*g1>jn?7hUu0_D7t[PoVB>$X
%?<<6(M%XOWG7DLZc3\A!DTeEN]3=Z!?r]8-qB#W@]OUSZbY&N/=kr&lkHY&Ng6K)p?6nYLHMgY0X_AL<#&R8r3$ELW8J!@$P`F9:
%][Qbj5j/hJp/p-6L2s_Bs0<*0?ffWDaojW4S`\\RYe'6dWXt3G-9%ROQ7uZh[FUCX$*HXFO"e5%582'SHlC0FHkt$FHQLWXjhUU\
%&%kF"M84Z,`1"Qk@s<L`%M(](![1bS6K`)IGY3tU#0-m8&\]q]C3e*uKHe<:k0"O%I[*8J'Z%#PNNp/K,"OT2orA:kn8GYfSsrB?
%0=tQV-TL,+(uE0&M.6h]Vm22sVt#^[T>pN$3T@6iG8e1d7^ET`XTs`b$P5I\_cUFjMKI@PD!)%28;8`M!/;>M]:SWb&@c[_?S_`Z
%1%@db$tY/\\XBWe=6Eogp+6ASPYGgT[*@:\F1&AN+-1Msh&Z8NpdHma)%=t5I0.G[9KS$k:Lk&`H&,dWK]a6<RSh-hO^KcfU#hrQ
%2!f3[6mN32/f02hU0RNfDalP'TgmE159E3p?:H!](JT^6O<Z\t6-pg1cBi+,"OG7=%D\*I@e6j9:%kmYAU\r`kom'NnE1o5OjRgh
%NNm+.Nj7bEr\6#palt%gXs1$R1FJmY2a);GPnn%#NR8^CRZUFa4;onH&-#5cIY0>WH72kNfB"_85j7(;]kW,^-TQ4"`])r>K>qa]
%X/Ku#\DHdR"(COS\a@4M"noOnV1*_[EJX$Gr)j:1P<"PAN'35D9_pm*5P>9VO'B`8#F'n5Zm>b&Vd.:5E:>qol)?41YhWKhl=ekG
%IF&15Ib]2XT3e0XN'r+5H"@BG%u#jKq6#9d0fH`pD"TKUGC+"M'>-.+niac"pFt*/IWr:oWF4_(r`XddO`nsYPb^8=2(WHm!\L)]
%?!?`RLKd$BA(`-oE.O$d7*.a-/ts8ji,8l7JqL^&p*_WY"U]?,GD?iuAc9[Lf=([^&bZCkEO2S631o[6cjbC7Zr2qq6PoAHD`EJ0
%KRukQAL&W[g/];GmbWIjVXb:;2m;VNa&$(1h'!R-\-a;Mm4:@SHU1OOYA.,\5RfJgZReq6AdrjpYO`fuk2;/!d./MPGPPR4W`]XN
%%o$sd9lN"q]7\3X`u-U==gFea]"*W<*4^;k036?PWuXQipX%+R7u)sb\&<iO-o)V#.iWS9!?/[7!*c^[UtFJo,rE8KM;"sq",]N=
%C,`$R`jup^K9JQZUan90cf01gCe2]p3YKU/L>Yp7<'aJ6De3afp%$1`i?!]V/tgQNHsNsrGDN#:Rnuo.3A4b4d51EJF$[:0%136f
%Q>@-][^C_<eS\3[3WQ^Vnj6',AT8>8A7q=r6?^opk\TYsB7=qh?plDl,pi!`)S<rb63iE"6l=Q,WA[mgW"k.`$ma-()!H:!i+&9$
%lWdoYC^l)r;"e5aH=4g6\:iEl3>W.@WEfulTh.D;XUc$H8.tn*iulYVCUWMuWu_f8J*$7"LI$:>T5"m*q`B!nk>9UNLWe`'nn5fV
%OW>s9N&m/\7r`r1\Jh,HdXTjt>joZ9q*Vjn,SYEsJ*>(n2FdRfPrG9<fCmRO##FJm2X'#[o+cB2fAVU=U?F6,>4&#^jaKM]Y%PB'
%X9<<)/Jf*TU4jCpR[)O1&RE*rN7Vu-3oNHhE?XQ-MJ2*@D0i-&`D2YQ2tB]X=7caXUZ9rm[El0:'lDX<%jI;X8r;.'7%Lg"Z+r)B
%$je7XV2LRW2\lrW=As'^K;("5kTjKS4#CgZ4%/Y7JcLM'So#E2T7b$P:/F7,NBoP1'1n:Y*"0C=!A-J^)]P"YAu@d<!H"Zhi`j!b
%UELR6R>d\7650IWjh,pmTlHV-7F:/.JlWS%:_`gH</YLoYKD4s^\./#[]c,B77-E^pE3X@Z5bJ^2-#-IE!gLW2_/ZIcCPTaKBB@*
%MZjH!43@.;T?,uK;WIhOp6)G7YE=>BInNE2E^cb5IedeIc0J$.ZHP8@@5d]4i@;8dnT"D'L=L=`E(;,/-1nB>q/#O0.A*<LEBiB4
%+fJ#BXp*l`:u#WEZR6HHf1O@5;,8Uk)f*3AiYjW&hnE@&lf0`f"5U$Uk:#T=#>q8(P7PpI/Kk#YXiO$??)G+sD)lsAXaBlN@HRWK
%UAOgWdMqS/B',.*&U"M72Cgr?j=>0]CnMNT)g''e#$nLG5SYBaQOR`R$lAR4L3)0PUa(/rQFq+d$JNk=5^+S`65T8Hd(/Z5dtXDD
%,i2`1[3,$IpbG5AH73Oo(&+GX3lH!mM_aFPHN>Hm,g9&:qN1#?%g-5\,X)utktTa/g3]*@H%T"Eb`S)0![daGXe:UuX>8=%JYJBP
%1Tbsi1CG?$9.6fnqfoGq)AHi*1&5FNirn1r51dm?k&VRWMfj="$I[8WMP?roAVplFQ?*)WFjD^:j;_QI>/Z__^LLe!60CAA1&;17
%48=Eu4oDi]`u7^J*Q^]>Lu6#beF2AB7/j>m60M`c/LPprlSglUR,j\m-qPp'#*g@PElR<@IfY-G[7@bS'7+X&UPQ=u:j^(`<'LQI
%A/G/!TnAcjD^@(YF$Ucu>;F@H/f^XIQ7fdt^%`Uq=oKKA>QjDRa'a7\%Y9[1B&W2$Qe@q%$!hM6LVAJ.`!_AemNK@'r7Dt^;#Aas
%^,_m>R=CU2XUAB0b4CtpU6Dl6F9d<h;ND.+A'n_HP:Be@P2-X78Yf'/SS<f;O4't8iC=^g<tMG\C1#YeldhfQ<kK^W$e4$P!M,j7
%b+88?\sg0G3%eQH;d:G"'e+,-W2kYV6C4)M"[d"r"@8e&J%f;^6i2aIbo.OCBK.G2+TZ'^q[$QQr;$j%nA9o!O>qZ#8:kj$pECCM
%?</tAKZ;BUNrL`)NF+<b<Kc(/$a3g/IZo!;e%up-8B!@)$)6%4bs14a?tlL$cIXY@7G?LhlPqkI.d\fa>PS-gL7W0ChLDJMra3Ob
%kD,B%<%lj+);l\KBUL3'71be]6Ruuf!.E%/"u"(K[G*qs6/S=OQn5D<#GDNr>G1Rd'eQ=m>pj_Wn]/;OcURGggpbnf6U?IUpqu#7
%%)P#OKYngXa":VL`t,^jT8gi@q8@m;?@tk,1_eC+fM:@Vb:1^gTLFl(GAJ']DM?fB-G$Ym>u1B@ahiUA)p'9LWN!RF6Wan`#!0*<
%rb53QG0i6&+?)^/*=,\pZY<+sMNp4\&@&t\61#*td.o*qf0J4fk]5[dM^m@`6DlmI,*N[82h3J9+]s<=Ent-8U$Y*o*)`-O$h+5L
%C'jPGMQ2_4UHI2YGFQq?ZsOV$+6^o=O_pQoM0Ft/8fb(46shF:-$FtX\?kT'9nVPF(C<MJOQ%'-9JWN>e0KgR/B[>[2;+ob;!sLf
%L?"(9N^^fa:_53gpk&*;0/P[Q1(=<LPX<EaCc;[GeL6#>*t'*J2ShJt.!\9qf%=La>JhnScE61)O<(1!/Gh&/.T]^`4$%.p9>*9#
%4KNMj"mS_0$$@W#%r$j7^$;$1."%0h3$8\2(F;*i%11+ri"ls0""9^^#3?4+<YT_pa$HeYMK*>Q^SW`>'VqfT!\pKD*ZjY\-SXC4
%:."-A.kNUgc.c^cr)0>KQ#R1#MmK1b,U5An`k*:JTCK?8%usEkb&VZ?E9pc;"]0OjWt/T6a1h>I;m*@?*+2doN@.-=.,[WQ"Tp0$
%2aq4iJfF'WfK0=*aB]>h6;jREbS:L*U4)TD!?lllK4c,Z+Z/b/ckD+O`'I6EifLb#Eg`mqklqHrZjUFpA&rmR?K\6:J&m*fEJ_I=
%d?\#N])e4[-&_uI#8dL@?'j;%/l_!\%8`qBd34gT(E$FS8uDtPQ7<+gQ_:rIADM]UNBP*mKE8W/h<#2[!YXtuf]Jn9C%2$$;QA2I
%2Vd9D&[<HKYbA.`oRQ<H4j0$?V4eG9&Ld'7J.T0k&8TZ*'WP3t!)sFcMJ^277@ZD"Y&T.Na,U=M\I_-_L3c2IULKQUMt>@uCI!eI
%F:Y;\Qo83$Er&):>TkLfidlY?RtNQEIeR4iPcF!4kXa2f5i@B"GpWBfMH77JMCHo78;%F#$,j7.$#)cs;@r2mQjg![\Y=>i`'7uB
%8@;(F<Hrq$6QN(!R*+2r6?UjE>n7q@'[RG/$UE2S`7PuJn`$UPA7_ijXHVsESj=fu"dt.9-+8A%`#<d?gAnTlF)Mfg.fh-6lg&TY
%!Xd3A'Va3K[)_!n&mUM<8,3U;19"*,%_(,,+`R+1O)$mB`!Z-m].5;]m,>G?"<iFO$E5JrB*k>OLh!q0:)6\$MU7CI_;si`e-A)!
%+8ATPE%qHZEW>I'jCQNO5*-@TOEq)5bCE<[$%tDE7'_&gN'.fr3e2i82I5*?4df=\[bS^:DltgfB+50,WTSso14?U!H=9K((7`0F
%(KNU'-,Mg^SgVQ@c<KWco,\85+H<WW/=rt+6gBR\E%<BAU%l?@9O("E^b@rEef%C'.>W_O$oea%Zo,U2e,U!(?5JW^1sm)WA#OeT
%!!sj+%@RQZ,qN:4fI6tm>3j$X,77H%eeb2EmPE/(b,-m:3;(^[-PNiGF]/bl$O^D(71rG8ee1Z,"Fn%I%I?*>Kb6)*24F#+FpUuG
%m^r!h5eT,*%2nZn>K`!RS&U\N6n'_c*6X8[]?0eu(@MB/.NBGd:QO=V2N+J?\Zb!M#33d"K!=a8m#8fE,N7Fg+hB7QM]bT3>SnHC
%%CpfFK`#d9SMP^4MZpC;Ho3,;fm!SOmna/-b@4h(oFU7k:&]a4=-RATAhI?'_Q6[:M'54/$u$FmmcD5A'klc_39nc$(7F@G&poL9
%-kpq^-ucKd!d,tR/(Xl0a4pn'kpq*k0`i]Q9dVndj0"(DDEFN%o-@)>N.b&b7@MH4Nb]8T]AW5phIa+`ME$,)JhF/\"3Pbb`HbsQ
%GYVb9-4d5W$slt(4'#R#?:"=;K<,.Fo&)Krp)k7N2?";pW#M<!b2\$)#%E^=]F[DICHHt_Y^KT3e\gHLFr]-`mG%DXm3pPX0,XP9
%qID00K_#`$OQ=h>*XibVBlU>6^h2Pi`\QucRSmoODe6Hn`iVrFN09tm.Uo^KMSNYGd!5Ch)DCQrq6/2DoJIkk5HT<tga?l>j(,Y3
%G&l(:hUjRrq8[(>)uCtA"D*O3@rlk2"M13jYeu8>5/o5ocNGL`2Eb5gCLf"Cq6';HQl%6d0PYQkO=`WA3'(db[+&.-O+g.OZRI":
%?pJ5(IaH`^aJ*=abd4+k^)+(W]KqG\OXUQ$XpRctdXR#W#>pZd,'_K)_)@<aYr<j^p:!A7Hu=@-:AE0Y6!eR698^"XVbKhr7Mh:H
%iFb&<kpSC:Krb$:<&dDS+!a>bXSM!TXA->7po\C$NI=AiA+Njjs,Hn5BQR[)')?rS@BZo3Mg?(jIj)u]S%da-.3uX!8tA@5ok%^S
%e]IrQW2Ds_UI8Q2!<iE'")QdD_L`Sp&q%[-Y0,ph;DLhLCK7onK@^j]kS!e"/rjJM>@B(VB/TP\6m=OFCh`/b)-WHTh4@<Il<V@R
%GUL)dP9+b@Yb38PC`&)`"&uU.8Za*R::\f7@_7"H'i9m@!p0Cf-XMgpX3p^1@CaecT\Lm+b"k!.b2Z;AANI-^CY$S7K[=^fF[uhU
%;BYDW<lc`0'ijKI,77>IGZ0!9DjWk0#d[-V)W\a"Koj*%LI5(bjDO"#29%XW78n#;C]&)6ai'R8N!31Wi8Y:N)s`A[?4eq7XE(Lu
%/JiFs8=;mU*tItlNP\:qp%Y[0!tnnGR?WGQ2*cds7['(J;Wk;*>nL0]hZ.,3g-?SKC4LW;&3.**d%NmF%rc/n@3$ZH)P#$H#@Y7N
%NRVHh(t'bCJML=eNhFs#f:'<Q[T7$*))$A7TM;+$+iaX6lBCfNr<Y2=d>re2cp8Ue-s/)eA""m*H:SqS(!0nb#jFB2[RqYqU_FSZ
%)5*QMLCNpY#BF:P5eL\P6%hffFq=n4L7!WQFkTUmK]+Blhg""5*n>U9RAZE,%GFgV\,a[qncBtbGD?po6!n*YKLp_QluA=Q0>5Lj
%cB].6X,@CEM?Ie.[ls4="596%SUs#)Qd?m*n!lX`OH=*K\VQX:+l`=A6f;6L:j'M=)#O(YWbMO-5SP+I0.H0SiMQ:L1Vmtu.SF(\
%(*S+FEIGK1jt_NEl*Zc`T$Y#FqbPQf-rH)OGj&aJpE3E@$8S2^@cr\kj0\lcKPY*p0Vg[2)5=C2,'7)b7NotPA8$`lE\Eb%Mp3);
%`q=&M,s%U%LNR8peCghbC4lTr6#;(i(3BihklX6dMQSh7<"-Z>6pM9F1s0"8b1-S+cq&_MkXAhricI'F,U9m)TnU`7dIYK7JT<US
%aCV8JEBPb-)FQ5?*LfA.g>.YAT+'T7.64%_Q.Q.$-BVjthN:aq]20`%'Y->!!$A)oK92]P4GYrEM(l!/6F;'mnCO.YH-@b:g(78[
%CoD$k"5bR&He,C%`XQ.=@fWIKH@r+Q\^+TO),[<sJpn\#E6SOh&\Fs?HjMXFc\b>3cj5:^US41oeYJ,>2#o.!J<?E;UR1-N`H`!T
%#(\bTY,"YK)+,`O<`VX;/c5Y$.<Ki3Cl]D@d8`H-qs<5U];ZC=o<.&Y%BKnO7-F@R.#gl;h'(HO!HhTuZmj*IQ*d+'H`@9qfUa8n
%g'3-/Pihct.)(UK_A-+$mRF9seTaicMZO_=jVn*k0F$M670jZ/FJR>!OqD'sUX89Yja[Rm_VP>>KZnKk5QMTS!6UI(K`mj=C-^f6
%;.r@XLOcD=/gJAl+E=n":`Yd:El:Y[QJ`qGZ*/+\dX0-tRR#5E/L/1hZ>.)3Zt?4)EO&F'#/?6\@s]T8Emeuad3oK(f(LjXN>5**
%*g5&R8rslOPS)2d#g;L+?-c>W+uc1TKhWVi(6h'7(EcGI$N^H;jbU$LX]SeZC28go&uWdUd+CpXgAk6U4jQ;H$tAeUoT0=&o@B\Z
%g:56d&-T8nV[D`@$8;*h'SCajb`2aF#`M;r>)'6r-4a0l3Q#1Pj^Pd]1dn5O;,RnN+EY#+BQ/\9/9iWO$44qP-#doGlak6OKQ`n\
%jJEBBe01!a2$&u<;9BX980'`N7i#cZH?l"@klF1p'.LO[]O5a&dL6a=VQ@X*s54SE<L=d`._2Dq#WZk'c0\=UogE4k?,W:"g/:k[
%-qOB"U8"ZZT.5#BdNle$f%UAfA!Z4g*K$6I1bk7!0@2O!9bSd6<,h`)?odQ=M^E-.qDl+m=P>FLJId_V%2Q:-`BkIN;PjjlAj6el
%&0Z0]#F4GgP*kDl<$tqLkMcRIVGWn'm?El5pM>ZJI'AM4"HlC9)F1[+m[8[:5EK_-]kD[F9&9snCP&OuJX)Ao'W@<t^T1B86AJ_L
%*5g\PoKc!2,.e4>h4GIY8KYSo?@5lXosrFl!hVPs(H+i_s,V_sF0S!X3Wo;e!?FQa2#JV*SZ'@lY`tTD%V\q[T2=O<8#f*4/VcC*
%k$_\E\dJr>AM1G`j4+0AI#rlS:^kufdBV3<nV%/cX5?XgLiMskH@)0#H=%R1[fe^,;E.5UU#a.[2W79@Ua.m>O>]TIf>5)4&@=@K
%##9-HkY9i^XLAo_A3o=mCB="#RqEQ<9cF/@)`_`q0?>WFqRR+2QlmQ]/2%\"f[-ZcK<QlIB#-`C`B_*>[R*9JDRM1#Z4+1\;ZPX2
%-q1M&UFS/DI5"n[.p14D:Mtb_U8s2ILgfjp1jS^](1@QL&`I^bPaMN^Sdr[g-:fu"J/e&LE?JjO^L1n9QXj[@F9Qg54&fTN=8k5t
%6SYYf)qn/cLCh%2pbI,]7Pu?BZ5.Lb%N/U=\bX\GGY?m_lk1qi'9L>&,Ea%9XK*R:LV,8a(76H[<'H\N"4,O*>(iURb(0FUYHL_?
%/fm<LGW^\0LFT^8De0lC'\*=I#eg"Ha%H!?<.*3%..ZUfG4!,me1.B?FDuM!d^T>\VRqAs"qdd?1u#rFko#6M&XGjZ7"_TH.'o1$
%Ah<25&9q\^+"ai3'6kb-ZOnYF<,*GJ2f@4K)KL"[;O;W^ieE]9fS1RE;,r0ON(C*BC/rUpqE(hQPh\tpkYTJkOYRpYT[m-(T?9WY
%KjD):d7M?$B1ZU*RS*n_[\o".b%OW]C1.ZZ#h;nmn[9oASaGe9NDolXElBlfJc&&[.u^Q.M5AH-rIMZ6Dj3_X3V3lPbgcX3XEuX$
%9%67^?&7T[.[(kg#$&R=dKs]u1`i.?.<$RF.8u#hN8.COfi27q&U=8+C;e1=:\liHc+AO*]a"EE?M..B_dTj;qC>KKmmmc!dcs,o
%KJZBq^E[R?4sEGt<k#-1JO(r"Uh+gsE,^-^F(1ZTp4.]16^5c?c4De_Fh&OH4(Ah2g.W\GkGJ+F@QPHK*b8?G@V"`E>jf100u^pJ
%+2*9'bsq!b1k>kO]`f31;Zp'55_<0ZfR5\]&<R5`=9i_,SF''90\55baC:^/^hLah3ZCpOD-[SX#e,:@MLgB#<ks%D,`ZDK&Sb)\
%D[]8-<PKRLMajLj$/$pU78qd5d)[7mr^fpYac(i-KKnPG2U0Md8m"%?@h0c&!2.o6fcjpq@pA8gKeg`%6>8A?Aedi1Ku"FLI'_Nq
%;,#$28QC_ILd+I+mA\RWMW6<Q0ep^<&_<``KU?T;p'gr##5R!'g!H"lR1WOB**S#I$7'U\_oQO)PB*pAQm#8+3P(l$*6EeYfkI-T
%!h*E6V^WRl;%+;jjuna+F1_P&1(M?dBN2#=I6:W4Z^d,GjQ9IQH*kZe.&>EU%@Y?LkOmt+%0;E&T7WuC,n4c\%';p"e`eg8%Dl+G
%1e5+!]Og5.kYUe(@kT3OF]:%JbVDBHd7B4;nZ1Q"nUVSoYW57i]Jc7l3)WR.9]WMDD1TIG-V\"uAs)LDbO&p3hfS(<:*1J-UC%;5
%l-^S?VcU:2NY.'9M##<-e@COC??K\E)iBcJlFp)E'uC!@1p/[=(?0+4g10=F@Z[8XqSc62KRYeB=hJH2O^/g7\D:Pj='TaWbWf/h
%2RFM@0-3AGnScn4VdhmX:,9TB3*"aqg64N-2'CGmPW's7UM)N>7D4h>+AM,c<hC\t9O6k1n(\$Y;O=U?c.h5j=bo=jV$Ic)?4p#@
%3E6eo:q8np]WWOX['4c'@b*!+[.n_4?-dbfl1k3/K$6KLg!]u2!nmlgem+MTO*@Aq2aCM1_Sf9-:P7cIcPS?h7QY9826.B2GnZQ:
%pYLWs4a5,QGkJJ^&;9-TXU3l)<3`8BHn$E<=Wq#$2MIDs-/8rUTEnh0^#39174rh/ihAm%i6Y0KlT+2)XpG.K(kUCu*PIse97\8U
%`piVS.a4^8S]&ZnTa5GV<B^J`VMZLS2j3rUG?pMqGh7is5,t?Ng[4m8!bkV"_SAQg&=eEW_5L"tG6<*n/l\%2%*Fd*a^?'_8V"K*
%_DnhFH)^RK9IB5K+q4n<\S5NBMU=>WM\?V31$HV(6t5#V/j%:3Y$mc/24ah9R^i5]Q$Boo_!>GVQU6am-RitCEtP,Q]Jr^+)M'ea
%U<9u`"QM1h;WS:jc"'1g'aGih+RQXnF=5C_bkb_pR(aE.^<Lj`'hpi("m\a+HjYL8+<3q.KV#O-M:K&`*P3=_G[dJLU7L"!7(pBd
%MtM20^t$Tq)B^eFL1B5G!&F8q!]3@0.T(<FmG^Rg0(Y$-JQRQ/Qe'=I)C'"C3=2)"lcoK"%>7QPE"FpJbJ4`+H6R6Y-s'eZP(<UH
%/i4Rk.7;oe,^f[RTE%tK`g;#*r,r][Nb3]9^&\Sol[pT[#37]rJO'PWX4*=FX/Jlel5A"N+.YT_BYjd@.SCu,G)l2m,Q_aHT1jcm
%e=,u.6.OAm?g56n=XP&0rA'r<6?ASFCH?=2)oWR:CBI*oSl[1Z7c!bA=m3:@_3B[M9%K`%D6q&X;V954"L4i8Y,r?fEJFV2>3RQ7
%3kL`S'qa).<>;)G>i#mD;RD`dX6/3LqU-=d=.tRN89$u\C@eL_:Xc>^O<ZM?B6c+d$*:A2fsM\X:6/*`?U(9#),lH=2!Ra\bDeTN
%YcX_<:)GTb;WT[T)fcO%UfK4\_U@_g#,qgn3qJ../7SY@`+dLa00V+RF0]9QD3DsL1o*++k'[q*-Ru'P*huIQ"Oe\t:G-6q97`C+
%VT2)7@f];%*e<BZiFe8X)a9KSe7Qe3$L6+!L+$#@_&u^D*"L@gZi0sC7'U+IQ3OC%Rk'=nlRnr:'[An?Vn&`L7l@I:-Yt;)n/N.1
%:@$>)NjN!fhOJf>Lm)T(N+sVfJ.^?)rC[<o+-2T-^^<Lkm=K'k3(dJf_/UdmBF]'d.JL3f!R`7j42YO-5*,YqDfm?slb=&'C"D4g
%!HLKts!]WVXeJYX6*&%."jmruSg_WSF)Rj]*Hg*R"UKp?25h`:UOWt+=n:JuFW.2iBdk0-7P/ddCqEN1S;8?SCi)+u&".8eP*8Cp
%9#<[Pgo@l$P?9CM9p?8K&OdeuhFV,;0uoVpB([k/'U`:t6!SIWa[?%:]05T\9o49)6u]*,CPHTFg"^2O);i^BRFFh(c2RQg&'a8(
%K&;7O,`sF]Y*'c1a9X?=flj/J'$U\CW]O:9+@QeCR=L`:WuqF"RU6;>-R>&[@9l=HkW0A)+W(G_hR4_#)@S;CYa>(c9p)ms:m%-b
%OdES6#To/>1Pb1k:M&FPm>JP%A!&6ZF@$3N$jLG`WOtJs^]"F[\D>s9>as;lkWrMB+]Bd3)Z6DgiiEBn885>^U*u#3hAe*>Fr&jX
%^*A8Z.9Pm^6_&@[)\<^?R@sa/Y@>2OEOF+%Xc0Pr;)9k#3N8\\874jc\F-Kn'm+BdM<`4VT[Vt#aF;S_XroW/h,&%:EBb+"T,pbm
%Wq*PJlIV=5>*sNYW!2i:>D.']#SK/uq$GAD(<hd;8'$=c--bpG!Ni"CBQUl(;9<L1%<7a0[IXXkOOPl8W_.kr9'JQ*RlFb[12#\Q
%OoQ_WJ1>+K:9mG'H&K$7d]M*M3BQY1'SE.8pRPZXTdVr[^q_./>LSZ*i7,Xf^,C4r]<PY/jX;6+>.BI%/UC;lKF1X)]3asn;Ub'a
%.kMnH9EH>>kH%c8FG4^&TaCBHOZcaP=%eY+]LXiZ?1Ojh/m$gd9KihiT`q$K4&(E@4_uT&=`QNTT6Y$;PkLQO=ql"BJ1r5O4&stL
%O.r!F8dGc=Tnt5>\Z3(MVk+lhPYL$<R#i#44D6[]qi'2KT]#gBACE91!'cMpN'>,0J=jgt`h(0e-?L;A%i1;&gSni9=6YlmD`d9M
%87e%SB9Ke^0SE@AZM\X[4I4oKjTM*@%H3'ulVkq_[_Y.Eac,*C!m#&8;%6D(l_O4ej`OCkC7hZ6r>b8I/+eG8p2T7jZnjm8M/D)_
%OFg!KUBM<U,%;&FHM9ttQKM`>kgX"r3B8Z[f=I3f"uHM,N$t@[M=-A%=V\>"b9)iL8WtobK%/%%m*sN^V9&>#)OlZ;Ql8?mZ%Dh?
%j3bOr4Hb[Aa:-))eHL7H4tBG-GX?+n/7*25NUcVM@(tnr8hm+:&F@qFS\]+2#o2PB)soI6Ij"QMn?kf1?BUT`C40X%FWd_XZ0Cdd
%JPL?<eRNWDKRA?C76ch!d09T"IL@k+BG5?&cY`j)T&0gtkknJ/J;V3+dZk:QN%5W32%lfgSjkfgO<X%H0&nQP1e8mSU0.?#]bEnr
%#\KVsaXTZuK`(I#duaq(;.C:jH,6r[Wt6(sG<!FZ81;FO3gAu0'_DYOEZ1O$&3P4V-1^l0+Q[R:O-%]N@cdBl1^i??;_Ekm9nua#
%KIg2XPiE,C:t1aB/@n9u^q>o,#9K%]eeq!\D(_LMj<4*MqeeBHUS?mg%8T6\RUf5Tnb9(gA`th6DFRD(d&-J%;"BL["*p2TLlgf3
%e_/:V8oOs7/'OD?F_FE>+N`Dp73WSf&S?=W;1).L!R0i0$jG<Nf-n<q+J$Q?(\flUKbL)r^9Ha8r6(Ki])rmuILft[Vfk@DjOntV
%!8[8c*JL!*glqJISBbDC:.e(bYk7(XTu2'\Kn9l<(j="ogloqDmk,%-K+@8FQ6mNppsNSaj#8eg)/434!>.g$]>GLM:,m;]?IUF@
%H%Z^DT84(>Fsh8b#!W\MLGO@CE]t!ca6*WjUJ;1CB=Jl1Ib1+=$]qu4Vo)A7UAFQjU7NW.XCt!hO^^N\@5/:#d<6>EK*Jd:K<Rb^
%VUq-=*+J1(.WohI]eUhHUl_5PM?O?Pi`5,KY-qNO24:ipbX)Eg6Ep"a/O\:*<2)jB1^QR,nFpX3A?_L;J;WLpJIE/R`g6:$ihNCu
%7?oJZGYBNH&1uXcNG=$:7CF8LPN^$Mo*EC\c_FadnQDYP9GLDeWH8M6J-Y5MS;fgb[2)N42[3C1<L;q]=nZ&_]KL$9;*Z7^6rPJX
%m#G6?"ep\@3u3fI1Y4n"<+O;LU>DrD;UusWiqgB\j5Y6dTr?9dJas?sZ?]6_M4Uu9=Ma2KioP-^O&F!\+m/RD'ZC#e-s6hF);GJ-
%Y"Uhgap:Y;Y?D[e#B`meNA6(T9P4oo&8Ed>\cM:"6??OleJo4Z(]L@6+2DYM:=gD72!WE:Ri\&b2/j=I1A5We/r\f8d1F%W?+,g*
%S2D_!QR;ToS<]T8M*WdCo]S-uOGVigZIUAj0GrMI&irp\74mZ%Uu_Z)[uXa\L+8U<3d$sR2G;u[gEl?Q)hu2l[g]$-DOPtJm'b$)
%cYhM_p93ZHg[T,J[o&,RXAM#40cZiiq$_?(1)X,(klLX_%^$R`lCA=JU3!=7YbY/)@^I7$$I5pbYtIhd+-c*%)\rMn:i56:8+V(t
%32]_]3[M-S+[\f_;p_3k3/8&.TMIhpd6&MIbKn)JTqsTMU)=u6X;*)t"9YEFkWhOK6U]/8DP*YT9$]3Q_a*>NW?gTA#u)'$a0[h2
%P^5Cf),GtgGa2S<%14ZU1;gn/iiH<#c0bodFO<@Y%YGW#7=u?Q@rN_V&%+?Si^>=02"Q5Y7C:n/)i1X7dt25UbA&QaEe&[-UZN_k
%"F_+b0Spk0$Li,h'(=.<Hsnbm1%kW^&Jk>@-8aj[CY6sp1]7AddXei(5Te)b9p"tj=2CDo2oR%s_W_T4"XK?gE%Q)]6abEZbu1H]
%Il,_4Pk]%&`q-kBoObB(5h3Q!b'G]afq)BD\CVTdc9tOc6AunrPY8?FkUV*4-f%?J2uLWGQH<%F<C8;F12'dk3/;++O\j:M5S"s1
%`R3%1@IV\398K`PH`<4?-k%kLija29G>CLh*b,0*OZmot8Us$FRoIWm\PZfO34W$KoOg*UY1hRr&rZ:D2GC6e:YE%kh0A[f)j],U
%5U2iE^Dmp"+B>--0#rWa6ZXR&].>8bJsD$imkUQXB8)dm)<FJe)Nf<2&[C(IY<ZC:W3@1Gco>`\/MiF=>H.]Eb7"C]8O7GLUU$E=
%<NB=aVXXhJG,J+RX(;=K^RRLL!sBUkn7+Q]INDE)I>"X%5E@B)5)Cr:k;:1"5%+VW;6JRA(RO_S8Td"&d8EY^FZ<m&,rmP69Qr;4
%qN,;`5=@Wr/p1\(Ep&-hZcHfO'm)@#X<l;=?MNhHIT.uu+\MGipHbV5dIV%f"J1F:_mt4'00F-lpo94cjp6tua5St_M/H]DU8M\!
%0AO@Q.lCP_!HS>Fg:Nr$o)TNbXf-0)*afc\NB=VPTWtRn@D;4<b$%FdS^>hH]Wh*\$LQjO7DuM:i(PL\9-/:-b7*8]4u)K$&pa>&
%0tebg&/O/Abgq,LH@CDqn&"Ac4[A9eXZOD5^s?I3-h[Q?HKJ#k!(J't!D`%8?,5+aqg]QThh_lj:l%@TEaq:GeeD36TH7_[,#-o6
%)Wl([<5#*(RDTn8XO^'=*6uX=#utc.:*4l*dkbk/k(4Rm&aM=sr7(p7V@3A/)fc^cKF^1k)C+hKVr6WLU7]:)?Vj+d?$bFkFMT6+
%SHg2n>C@$O%sS)CA/S)HmQa/0Ba*<#a1Qr:P@NOH2:sf,NSD^W/,inOPa#/@ra.ddV9Pn3(I`^tfQhs>664?E&%nd(Cqa9)OQ%)6
%0>o1"VL_3P#Qa/6EtTe4%+2DqXe+EcPTDlO%P]X+CYT:65)4PpbLcNU,Bn;90`(\gkW7&V!\WR0IJ<fm*-]"B%6pC)GSFD#D<Gh,
%%4H'K[!:L6MD\#B]Zi];[tJJc2A[-jeR5EAJOb[.lcL!^f3I8AZ$m/EJ\Rf8a7R.hiWJZt@RQ748XtaU:W1E79L"49*js^b<M?!*
%pqdI-[!)mNNbe9f;](^aNc*=pMooq6KY:<ON=TVA"F6*:URPUr_PjbC:$.faGh2U_4,<;*`KpDd&4Z[]+6)-#bVGi"p7S-A(ek[>
%S*kA'UZ$mUaB:[qL!BrS:/#:Sl=)+kpaseLCCD6tas0:^r#4)e5Ds><G%]3^dH;+%R@d![OQ3Z<J!_]pm5*dPHJj?"L1tM]An'RY
%C"!/[CcY"tpmT5BF0p[CibM$$$*A``Gi2GZ2^FTrl"NU=FI.)-dfY(_a,fJ95K&@!S>Y;`cIb.Y@.Y-&E]DZHiIS0<"gMBTdfYZr
%p)4LOGi2G,=W89H6Po'H<oujk\gTZoV63l9I*HCRg\eSsjm=V]62\9Yf&FA)QU'0_lHEgTPWV#3iUW\&E[lP,cXl4pDO&hmRu=D3
%*\Z!3bKc@'iI3iH#BXcN=FI_.Tc'sf]_HNN&bo4on;$lenEV*Y"*f"80`(FE@IX)@P>@h,3C1^=^&.SRG[NC2duN[K7nn>A$0lfU
%SpG1O2')4c"&Z1oV>-Ta6ek:`88fa&)s\uc9h.==Tr@`5?=st^aD+G;NqhoHIS<Q8+Ze]J4p<,#L6F%5A,6>(*)?,>pu5f--qm+F
%e)k-EZt6/l/UEdm]cU<J61ck+Dd:Nk1(Q16NPX&DIlS_;SAcMm]*o'i:@(#S%VGF>o2`jWRf*t\(qZ[0d_!`kFA`"`oIe#^&Q5qr
%1$W&)-uA=Wq68g^*g@!1_fiB^Q4Hf2B\behPebW)$F\>,C]Su#?fD5MM(pRE4O0PaO%7q7TDJ\dWgB0#18[:M,+cbO`l62,=a[4+
%/8j<r\uQGGZ2!?^?DK2K?5Nt=%%j2V(Eh&`kc9m``WbT`@Qn*8BaYfqo^QssCA0YK+)b\8H:\ZL%ker9P&>.Y?FI)d6>r?K(R$<%
%l.GpGm(I$HaJM<G#0#HK55Z!5nk\'h&Mqc$PZS5emZj/k:@=EQ\$PrX(??k1Ql:OJZ=hMXaJ4o".9\@?+dTq/%r(hss$lSXa)3r;
%h9b[Pl'CL1>p'hXdJT["of9BsB[nah@kT4uQ]L!],S4b@WV!:J%$K6oX4?79Y>30P*7Z6=)Reg*7QU58D:`Pd,h[r$&bnA^i.R^l
%Mb!pt&L6Jt/8@AAeY@/Jh3r'D7-P>(cf$'?,7A%ab(Ge-\s=(o,&RbH#'q!FC:iY\[/LVu'[7.:")/mBoXt,1X[n\%$Xp7'E]KT.
%`Lr<!&<&Iq!b*98F1Fpld!RNO`;tYJ<kj8$WKX;rS3a+nM]Uk[ld`>#I2,T+\2bN0hlSM;b,c]:=9Da,\hu.g4fHHhUug85Q4M=-
%iF^0!41Q@k2Wm"e7\AKL=jY8b&V9`D[UAb'NVVLL$,qK2'078N(MN8;UTYZLiLmGQ/QS'u$g4WMJLfEY70==mV`5blg:.J?.ahR7
%"(>?t]O.?-%@]n`mSd3BAnS7#;UeWBqpt$\1AqYY(>N?!X_>Oi?*kS`b3SAqr\tX`VSZ_tg3u]t9q*!b&+K4if`Lab6H2#+mq>o.
%IWf4S9:XfVM6&nM3HF@ZDNAP&k;MOV[Ya28cdD]22sdGrLi\dsn>K@,$9rKbO8kmH:P)Sp/,eM8oFJ?N-6WPsC9+Uri$8(C"7g?!
%>k/N'5%BAA>P:1GU^bIEd(UoEaqs]d"J[HYpJn2]O2c5r1e<g;cc2iggK0NWdd22oU+5h2hr\'D*5s\pAZ3o(Zr%hN838D9c\a(/
%.;`6/5G0sQ$;.8$XS#FL.&$`>c`&VfP=tM'2+Z`%%8q;39lm^0.tVCV@Q*kWn^\/^Yne%*:QorLDq[\^o;(hs"2TqorHK,,HXnFk
%\3jj;WdoPJ:`Q\4m.P*;mg`LZ_02k2k2_7)+$I0rb+-dp\u8G<[p>5QZQ"tQf39oRgQS*[&I9bns(H3:p+1DbBqc@g8);ONF;QUm
%(F:U>EABBS'mc]J<^QaUWV7a)>>(FH%bW:93p<m2F'Acs5\^X0A5;u5(=oFT/CR0(=@/K@a;tOILbpX_W.nnHhT8<q7&Z7fk2sOD
%X3si4@]d+p(c]/[LPQT<8Q6!43f,C*HkK`%Gu#XN&/PkL0/tbTk8Y(Z&nZ`/P-.5%GUM$Qfhma*(45E%?DBApM\H_XGV==e1"*n-
%=H$'kp@cEE_M#!+-`%*VODuaJAC8nDD(>btKN;<[daiSl$>]ZAm9IO=K6_E6Wu,-=e202n1/O'<(9RI7`:\if+oVGf1GV`QR"J@m
%7;X00.U4e9]BX*3dO;RdZe1#B<f//`B=K;oIf:aEL*dcC(nQr$ItlgQ?QRi/iZrQG"2\U`AZHaa2+C]#HCQc?g+dPHG[04=d3>OQ
%KNk?V.b0^233,X4,q/m'2+-a^<B=V:ptDiUD&h_q?N,U+W\,=YMNeoOBKi2fQ`FYjZB&Rh8[pW6FVF^/BjegNP17a4Wjf"R=37)S
%JLX,`fJ-OOMDe>I@`qqo[AIWk4adZNQK@ro:au)p<b@=t-@Bfns*.'\NfL`IQ(C),P(@]JaK%&WjImA)n(b1700eRVX3KcU7pgX9
%B+Mb'o1pEWS`Z=J+;FG6'p)@:mLfel3-bsDg/#9ca0Zq5Pc"/U;Ok\q<H/l>WfH,?C^3d>$&tR4!NrgFKJ%78RaggXK;(!&p,V?b
%V`@.:]&>9>Y2W59GoB3+d?+q'8Xd?!$VV/k1@m%Uek=d+Q`U-hXYIABQ3\GteXCeqX^l@C7AEtX-<Tt$qZW?pfn7?UH]8)'=04KH
%knHZ;E`&MnBPL^M6.JWCZ43&T`8G:7/q_$(T;3]6Q0uZ-MY>nJKjB!I4GGUA"XiPo*!3]r8?_:;.I)\eh2N5t\n_rtS]UBfHGpOl
%6!1^oO0`a>Se61>4M)<IGi?%),hHr#UE6(g2JKq4#Gk.9Us`$"SL-KbU<B9p(MVbEd;UO/hC^*8,!m]Y=O8ZqmNJu&4Q,4n3IA[j
%@-R#$=,MFoR/c1?00/72q#*jGqCd;II+Wr=qt%l,(VbI9JJVt7fcr."f\&Wqk3/]_H[GD7_3`XAPb\8OmMMdi6q.T1;r&%nNk+6h
%l&aVB6CM&NAT\8mKf&$p5oO5uU^1OKlKgRbB`YsVU.Q/7VT44"=,]7%-gdPB<cuNt78qF)L+7I_&$[U7D!i<D#n,=\+\U'-6sC>(
%Yg'(`;aqEqeN6Eh^:\8).6Tm`ZU29[.a86>Q7`a4gl^kk:nr3E8:B2AKAoh0TNu"$p&X"AH6Ygq34BX;q#(RY6iF#4[f_EVr.^#>
%HYuLCb+ICP#:(Ga<0S>_VCAj(7B1[qA(>I&D!X[/:g-F@B]Z#t'\[qs2@J>43sVY\b-"/"JUi'D>>Hd<C#KCIfWXkCZoCH$9nka9
%6G?8PK`%64#L%^O*UF"6TCr#UGn<V?oXY.,;k?f>51+a-'>LdNdTCYrNAcF_?ARl3JL.R'08udaY[XDk'%,ro+ug4HafngBZ,2#7
%/Z%.H:@*co;FuB=marEb<]QAoZYM@![70<d&s</@We`WgLR9.qcpkd<fCgDkBFb>EI-D&n-6Y)/5S+c&;88Q^6pVBfjD*5Dct0#F
%#?k;FpF3;*5B'toY4#-7Z%MZEaJk6jjIoN>p#NAV-0!^r'8bf:dJLoO:EMbXA=kr4+rHn7J>-\J4+\r*S3)BJ\"5[9%oU.d&c%h-
%9/-2YfPcdUk.@''A!@HoBKME[HVBtKI%,kY.(sCo6_@R;[^,c?<VfC_P;^`p%=qu\p7Rk[[P;MlV-m$D8EaC@`VgWV66CGh\]su(
%6Lb]rh`!"%f6c"R5=5n2g1\ppFg\`aL`."N1n^"44U>:*1C3!,[:>,i)\n;ZT[:KfZ&bRU]1Z[Me[/I7nD(suT$jHC!haY`*W.u7
%3[EJTK5X,k25;*@oRWa]e!emk:#NcXR\`HoWFECU1JS!DOiOJq),qDK[H:a++/:YY$V4W($]?jR/fN0GJ6)JaJJQmP`%DcNY!#._
%cpg:t6hM!.]KU[W%QSh2<7![Oreq,T4+ST;SNMP>q#*i\U%+@Gk>8,1forA?i5r=($Mqln.+Z8!kOFu^r^YNO7T+m64V=ruS_4d4
%(r$/=LiEh-b$^f*MAVYB;^d"/,EgK3[rp'rY179d,^LG1CSQb^6Ua2n-*#4i4V8sAQk=D8b'Q[*,nYH,S1<j8Yn8tL9T(\DV47bQ
%JQ%.DQpEm1884qQ5mfkd.!0t]`IF)XZudCnDK9:.$-WJ8h@%C`qeEoX;"`2IC*2lpgeSiuYo.X[o>9@CE.<[h$.&9'^\V%0mpDQL
%:].U@[rOA^bZ]k/UYEAe^@bs[8,5'H+<=RQBs[<[9(qX;2WCOb1H.s6n;_7cR2ZaLjROE8dJ='A,G#V"`#H=)O4/!uE3'9J"fG]5
%#[Pi_>m(rpK/XGE.,%f>Ae;(;I'HcsUCS\<7-(L8\Sqs\UcIF8qR:W[f-eC!9I\PU:f<cZ(pD)MWS.jtAt!*tVYd$I2<gd2ABH-4
%Phdcsn[?o9&R;CbAm?l?d):sU4Bg0dQ-F!]QdV<#":2"TWSa\cW%[eg$";,BCkTgX3Tl=*Grqp?D+\2q<GSD=UgNLp$]nt-m0;^T
%\T<`kZunH59h,CW:LNK8/d]sC0;5OFS<#/f@,M>G)Ljm'$FpHg:l&UpP'j<s8!=4YQXag?X>2HBY'1I#.1Nmq>5E$Yg*a?Kfp@Q!
%1D3Mef#9;<JcRPrNeh*e.>@Mo>`bODih'9j<=g&*g-X#4'^pVA4.:qh1'n\fP]9>e>:F5SD,2m[.\WsqpfnSD>hIFe01>\D;&X8H
%:j;!^09k[]LPW^B:R(s(IC\d3*?9H3ks>QGNII]FQ+S_UOI6GRDBqj<&_]^P]Fle]jL22?%2S1JFu6FtQ:>!`,slX"/UJ[o\Wk6k
%T9C1%B;2j?7@L_im7/I!Ke:P%#S[m(gHqP____4^5U$(md`.P;+[r0pkS"RD6]DoS$(8_j-f4(9Ef6/G5m%dWFeql)Aa;O_oVj$C
%.(#7'mDe;U9$[;ej9aM7hM@_aV_R.8lb"*TROLSo.s]"rn@>]4LOiQ/oEgKkpJ_M[O&E`'V,(/SELfY,rlldG6^WTj$&;$g#t<=_
%#-Tt+^Y,H:4\"`[+q@UJd6AMZ?5<g'prF;<=@e;(T`u'i;NjWX"09(m.79eQJ4AUsj96G_,oCdW'W;Wp#kjPa&Tn1"H93;Qk&(^K
%#omFEp'o@7LiHG(a\:(K3q3Nq)jr4o]!?B:.^jlW/g"4]3ZGf\TJl>P4jXs(^TjKk)N2)U]M^04fRu$R\T7#o,_6iP%hTaBkBrW0
%X:B[C#MHV\mgRY-Fnf^%cn$)u7s=D^SaZ;L3)IU`$##2g@nK!hP]<f-MO^]I7mZlO,J"/mZ9ZH-KT;-<Xk%PQ\h@\7Eoo:rOA6!u
%S5;GW,"QeDp-9=d)"_G;L<%ht"`'UO"Q>&UiY.2.g&eb2'+<PR(6Hc%rXakR5"p)>s77YhrMuumDnl;2Mr/o)s8C\jrqYAObBUhk
%^AdZ'J,#A>s8(7^?i81'Dn^VneT\cWqu3XO?3Mk/&.<CTl8N(`I<W#InJ>R1pTM@0ra0d207WrfGOOG']D1+NnEm^BIIl!5s6YmB
%ZI;)O<7O5&FrBe=[pOU__]QVf,!LLtr6!8krTuQ$?Tn=rhgGD$f5KRFf,rjuq;'eD^-Aq6RhQ8>d&W4?of$6+rQkN7rU]4@FbkD&
%l!MR+b-ZZk:Oi05h%/CMDYN_sDnc2/RkMem1A,U0TK>6^T>C#r6+44Qk5Y>5D\(4mmb@X=rGQ'CiAC+#*(HFHJ%E4GJ,f5S\*s@d
%^s<Aea8\dB!pKLUruhg-r%n=5-Hpi31J.0THq9b4quu.!UCRY&*rK7U4[pM+Bu&&XksM!3SKubcpj_:QDgqN6\,Xe35=@?k$hR^%
%J,fAKmN:iT?[_\)>CCDfgZ_SkSQi`)TO-57r)-;IOSrH)U>t1fg[VrqH27I"+*R[O\<UV:[\74455^;[`9)P%VYEepp^`@uP_>9%
%kMl.:@tc'L$7C$7<A,H`O*oqO>pK>Y+?M]=e+bb1gB%>aa<&cDc)s$u&74S(*uK<4CN4#Ih8Os5T..(p6TE?RO_lr5o>0:5VEBO[
%HCg#,3j(]p\K9Q%rk&4"pp>Ka%p`LMnq,b9]`,B->kn$)J%5OHl[ScrYA\X/IUPU`D;Xe"k(MVt1/d4ZGPh+s"Q-uWK$F8jp@%b,
%*I%+!YGtg<S,YVMqHj?uD`?P/r0NoQnNYjSQ[^`=r/Ei8O'hn*s%sPqKP@nMLXP]Y%mQ=]\]43&V29;8cD?t<U3WUFD4_?9g;;j?
%fscK_j@u]f$T+Whld3IVOD\3"[2gen!GU_Z2(f:?7??]o0s2$2m(cgK&:*(5ddM5C#"<@\&>utGdCdj&qH3nt?_-fC*o'eiDnB>X
%R/U2ZeGFoYXK7&8WluKgS(uDK?W&D1fQX]WB,Gea$OFBF>4MP,P>49WGtLKA@4T;pON(LMq?"='d0fA2=OmaHGlUl-_4l9L!kipK
%h1tW7UhSA2[,%?NDar-L?CmlLs6Va0^4#bKQd=-M+4:FU<T^2BI84!qf(<fGrf)\Wr!D*Je#)QrHQDC.5!`D%FP76RbKh0k:6+qD
%d!KZ[Z^'WbY2sr,n7?@?Z)H-a+i(^TXT-_A,Jjm^HfL%9=rsNfr/*28*itYo\mZ/(o3/FE,O\P?S[BF8b<laZl>;=V;^m2b*@f'%
%0WWh:H9!6?*UDTRr<G`*T^auT=+cs1I3Jf&0Wa,0dDnr/Mm//-V?,B]732AnR'bk16]7pr[=6I3K_g^=B)]pF*FFAq!:fDgJbiN*
%l@1I#8Qo7CN+KG0<qDo99mG/r&a"Z0aIO/`aJYuiT_m>iOJ=pdiLa8q:WZKU1;pkVUZ=@u>!I(mcQ)$t8(f/*F;HG[me$t=`!2@Z
%jEHmm7[EQkkYKQ#^XsTtC;]bV9p;gMme)K%53Jl#9Eh2dY5@-bMh5B1]n3LP\1Q!4GJ2kbdkD+kc.^@^+l!a0AB\M_$hS<I*I>!a
%;HVgq%,Ke01\]*n$.AXn%R)1#G`jHB1FMtA#p.JGcl`OTLHF;n`OK\oXGH*V+Rg+sfpd#5Vb/d#hinM1rJY4XMfOB'F4<-,je=R&
%0(+u4`:'F:cDFhTnil8_>*TJ;7mq1V?Ff:$IiDGUU;Pd0Y?n@)kGV[n:it7uKmHb4.*d/&_,R>d7J'n*:pc=^G*/Q,X$@^)nb_/$
%CEHt4+buTB:X;d"CDWV1SRCV&6Mb>dnsQC<6b?`V2S+)"[0rU'V'3%rKeF&M]P&)cg1qMr_+hP/Y?O9gh48`*n70h_<EUbKIXK[\
%'XZ=AQ3T>pa^02)hUg4/:n#I.,(Whq"\V*or%U7NW,C!Mdo^naQ0b:DYI!_0"Dcj7^@X-Y;[=h[a86X#eh-ll0`r\8\'N?Xcck;^
%'Fa'?UaB4qMh9p8EMB:0_=/jJfA`f<GVjj=ksE3'PeS@2BN$UPO[5OJ.Mti]8La$@$tM7"'R-#R"t4jiKU@@BLLQ3fY@)nK-Ya;n
%_-g]Gb-,-Rp?/>]TIk34*6Que(p#XZ5]qSnk>%0JP2ogg6gY>,L[TZ0-(_0<]mOEAIr7r645W4XPs9Jio'0@`!=e6LY>iUYV<*L;
%TCIMh9dkD=#Qtg>^#9g>^>Y4JH=tIl2h1MdDndAbs7X&Xs8VfLXk0l68/$>g5l]fUe;F<t=hKrZm@uCDA%UJ4\.&iT6dQgPgGUfk
%L=E&Ns1RHN@$&44f?VURo:3rsBrQccSR4#+K#(iVN6<=Cd-'q9K\\r=*;eaH1AnbNIE9Eo__(GLfCc'"HX-'.\2D;N$i#k2ZFCWG
%[[p^u>0j*E@"&=kM5P/NA^`)t^4gCO*(+ft^%T.sBl(Q`=^rq#^ksY?HFG&2<pUUaLg^)l+J$/<kgjYYiAhe0e0&XEFE@X"],b9E
%U`l8'!>a!a1D.DBQ5""a/a+H#)@l';6BJ/pfdn_4pjTp0N6iLP7GJf#:F%k<JjJK@71gM8S/!#1JL:AVKDiB?O>@1`5p0W3e#<lp
%FU0@\Q4FSh+I/c]LB&B4f.-\_3-49Lh1i]YDAg?FlsL&ZW<27TO;HUoDMsE7)T.Y6dWUY]5bQ/^QPnQ9%2n<P;UIrQ:X:5RTCLLb
%&0S)$0g6%;%VLlX]I4ccCk0%ABdL(LU]HZ)+`.r[@@Z*`_1h-Q+]+!O(btT5!U)o[oE#^MOg_J]h1cf'#'IGu0s-I#pTC1nJ]86R
%#3t5:F5*#YUrE"1k\gU:EZ?9HVb$ru.CEi8cA7S`BZkE>"8eb94nXpt"242/&8@j>6.>\#C9esUMiurcE!lm74aH"<lC]lPCd@u"
%0d!Pj]#93Af9uGFX0$#0M_Gt8lktuTW:tkXb8]VM7cZTmAHOEae#N\`^B6!PVVK9'Zb2l7/HTpn-[aInbQ]8?*:#%2bm_')//Ro(
%F5:N=@^+)B[3HUfL6j)SC]fRi0&0fESe0Xigk6S:<asXR.Z+WK;$PUir"ggBLbY]*E>Z\n:Mk4+`U4_)8DlUVNZmLDp.L^Feg03=
%O9.t)R57Psc!E\$;:h1-/ot&_%M.hBnOQ9oE_'c%a86Up28fkqJNkZQ-T0@XKgj?C^uZ-r.Tc4=mU9?p7>Sq<b1[mARa&9B,\nnX
%c(&'0LcZ]$Lh.9;SS!Ki`-((T1C/^C>cHTn()\TiM<4rfj@JjU3DC0mo/Y/XnHGV-K&mK<!mGr979C7HjYjakVRl8-7Q/5uB3qB(
%Oc8LVal-D>QBb:^$[KKt?p7]kZF!.<EAYJAr^\jkZVLBU6E=B)hsu@omV0h>Z0EntL&-?kP<0E\@Y,^pV6/b&J>quQQ)7c[UZ$*Y
%B$Z:@Nk>eRmL7eq4t!S&-qhm`Y7;bT%5d2&6ntLE[A)Ze-T4*fpVZo3[3CZ^O`dQ)q#VoO];'[?ln<P:p#&6Q;h7%9*h7Se7nd@#
%kW]`d.Y0lcG9Fse&JM0QTO/["dV9sI%jKOR/;UkgJV/\\j!1:_me%Y3md(bga!6t!>P'"567gVlUCO#,;1IL:RREI%+\]t;FeFpH
%LgQqqG!"rm9;K4qY9Tc[lT?<2='O/rC7oF<a,J7_T];u/A']@<[1(#("pVAk78^)e=`e=%n=j1;Q%f:jHQ?cn`hMjFQp&Bt6Nc32
%9!X]d>gZ'rmR3!TUu7sR9i-W3gIMn5l#O0WX=b1uYH[,Z/n@f/KrF#\86AF5Kk,jceV-&DG01BC/[],I4(PQF9-XYHnj1Z'$(U4@
%NJM:.,q)_:AD%Z.hl9(tG5FB:aW=&E>#Z\tBO>a@!RELNQ"=MS5iD=t(S/WWD^oY6Y@)e@Z>;dtPBo[09mKbpgho@Ja?Z'Y^.4"&
%gS,EWaR5c,ea4.<4c@XRDT^gY%FB"Lk[(Yh&I-fkZ\ebR[fj0AMBI/T=.6-)*]YO:eV_#+'NnI0+fpM12j>2UK*bT;1#d+b734`e
%2u=1=0]s4RaR_#jfCk<%78AZm/*++s.@sgX*Fl8f&K8-cBLUQU[[Jee@"b$C=qPq1+Dm&D5g5_'BLN-2o/Y/XnQ5iF>401t\!9)m
%;>5ZLZm+ih*%0;k-!k>qZKL(rGSP((o7BNib?CiPL9t;E<Pg$7eO?dOCfW&1EO(;&f8;\2ibm"U770,\Q#@cikc]]pe;@?P"h.Eg
%/39"2,bcf#;/N1h1RaGgLIO'D_<J9X$qZo:U)+]gaM!/A%[h/j0"-PUk\d>$4/@s]0:7R"a*j=lA*PRj=]&^&F@A*n=i2sTC\UsC
%)7>:n1pY\gs/`?6UUp`(Mhi=LXl1+f2=*fbY?5rWG')?/8+I#%+3QB"CQS%CH6)a'0ehZ@N8mpc_T>>"rm@HVoTEJmAUC/YUGP12
%dn)0.4^r,"%VM7V+o!GW,"L_T>V[`"C/PK8Wc%q.R%Y*f)'m'8#pZY@)Pm*<(DmL>Tj/?e?tY9k%0FE>I4dhh2e9f!h$6"8`'Lo&
%as+,LKX9igXW0Yt4At8r@oe#=nPorXaY.!N`-=]K5r-WMDH13Y:.E@bb(*$e(),s\??EJCO?2@qDG<ME-^8Dp@YL?a=>Uh^NeWK@
%Hntq1.+bX;;r<m%`.pS<&nBI"IRr3jidbZF)nq2`Bjk0K>.sR;pC>dZ3CRS8@%fS[Mft8V]&m+p/):3e&F2qqmW36ubQE&c[SEAE
%Zk-fjR7RR'G!//>hl_LT+U<qbj\=P$`qB4IV(5-t$&9oMk#bDcP-l^\2^<I@eoSt#+I]hl92&4+rt^S>-FUiC1lkHa!O8@bXV,\>
%@:m$JpK<A2F>Vu2%*3X2IaUc,N<Eq\=2H"eX.@Pa``X3Fs,E6fk,di?T/\6"pk[4mrLl$E=k#t!caM>7q%2?"aG'`ePUDGc;iB7j
%,qE1'\M&f\V;#!Fg'R]Z-&LR8#HMNkD7/C^C(1&uN<UWPEYNJ$H6c!WQLo3X7G)9c.o)1j7-?pX*t5p+&IG/Y;q0"#;F4_o)_ruG
%arFBK'hE:,?eK"^*lJbjIqdToq6h1:^9_)=D1s>GWA3n5?2#?PM:(CA?GVA8"a[IE>m*R+5;Q$nHCiC]7b8c0@On>Um)c9Mop3P%
%Op"\;U7hc:eE2X^=Q:Z&AYgq'@)#M(1ViFb^6r[jaIH!-p1\HdFBP*l%2SK9/1^oI?`INkFL5qO)<$A$mkuNA2U;+XU-%sJXm-oN
%o7+ZS+-Y?YPD81%obIYqWF8G:G0po]bID8.&p9&>Z&n''?Gs4qnG8/WV&NsfYlP?nES5moA=s#>9s_WuLj/0$Od@:Ip.9n`HU[&"
%hn])'KFdr3r^C#q0s8PY->flX$#;r)-/a8,4r^A2+@1tbWg+9Ep<+<2NdMM94X>P[>8dVJ2]M=1A0kRf0*8R'6GB5-1%`i[]nI3,
%]7?QLe!Hhl]]gu\6.g)q.^JBn9TU(M,I;W\j%dWI$V&;O[k=#Dn0'b`h]=Nc6Ft[`2mnH--[naA)#+"60sk999oJ#7Y_V2*5CF[s
%1Q'lbG)Tn'%9.=]B0VWb'1!XDAPa0&P06c$&=g_SF!64+iH@he;[T'nkZ^TOWO:(R\oaKa$ChU/;CG/Af2_&q"D@7#poAfZ@d)<q
%:+:9WTl7+B+iBYI4"8[q<=6;"ki;_ZMB@GVpo+Xl;Ws?3V\K!70#XHe@+Skaci>^,87bt-07[qjZhUL-rTI/CM_^rr;Ws?3?_IiN
%e=MF1djg&4\4WImltTY+J8TnDpo+Z"kYgWoKha)hrjiZtJ4n`jTan5'-p4D4j%eu%"D@8n>RI%%cmaWC+nY/%+[##d\e@CN]^3E<
%A$a@]p`ZTT^N1Q?W^<Tt3i134=+tCu^L!^tJr:>Cn.2L8eU!7l=o>oJ3i11PKha)h-%QM"QlNWOF_:j;;DZ\=V8f1n;?Jkn/UH_\
%j7DkCgtnk3rlI=-qXgA!nE/OoOn=oT4_atB[oo%9$Vd7^M(VO,#$%9%Q_20]XBU[*84&G_IPpK]*-/F#)?`'WJhoMMW,0`8mp&'s
%PXWh].m>-e?K.EA:cq;XA6_k<WkKo]?-_!sf8)M3gc=#k7s<,-_hS%n>Hj\T@mUqI)]tYEFc2.e*(t]b>\j[\dXl>f7j=sO[Y$b,
%43n,k@i,D*j#*bJ#1\Q;b9.lmDQA+#)sWCcAXF-_%ediO3c.i^I6#pTV05@2%,h;p+I$*5f>p$uf^Q3"g<RZld,O*F@KSRDV!_dQ
%@^A>;\9agkC+uTtfMEfqH\ne]%FN/lD-6=P(E9(l15K-N)gE6=F`FZ0..sM@`l5s8(F:Ub2W1\!XG`'n%oq;pfRPEA6q:)j)pGkA
%i.BruK/rZpQWs3hnaHOYMiS<5=WC:nO,\^LO,ZHU`s+ZjU^d"%6*i]iN:F/=QWmX@Cd<O5XcJHSY9:UVfRPBT/3Ys5gULU<CtS2s
%g\]X=<P2>t@fm85aAY0JCs9bg4uRBVN.,oh+ioLAMUk7+UkqIID:Kel&,Um;mQgu$nKHLM+;BC-X.p->:rF$[dfbi6,jT1I_:Msi
%/;55W;m=P*J9Zp<#r@[2=bA13&6..F9DHH1CJ\=4$/J7'iB)X=MMhQRL*^0[QAln?i//1AB6OTi-$<+P2<!IomWX+=5^c\"FBN2-
%YMAF2L+)_/gUZ0KO0(-=h](p<`C9*?A"b@3->NKL<`C=UL[r[GasiA#Z!$;P:s=@Ym.(TkE.1h@S7eR1JR\sj6Wuq0/,Y>EarZ]3
%4lSZ7bs?uLNlt`LQU)Zo2$'N*8PX4NY!p<R`Z]<<TJq5M(ucJ6*(*ukTL3COH#_3I[PH:ZE#TR\4%KUaf9`8+>i$t"oQ;_=6b6FQ
%;JqQQ7lr2K83Od2US!e,;t+I&%)5(2gg.uphkH5'%=FajY4rKHYL;\;"Tbu1%brkRQn15qSS\+3oLEqS.dan$3%m28MiD*C@Y;(q
%,cPd\,F"HRe!8%Le*G-,E/]7&1Xu/=a3%1@5A#5a;\kq0k_GKn;gXr#:fcjTLF.pSh^;XG1&>Cj7%JYO.>pr(oW@e\knI^*c?*j-
%kk'D22&rAUQ=JFD(7h2`'LgnY/[CsF;s7?@-AtVX-sOSDqI=e@SSHP"A^T``FipG&=,X/0Pa+;Y_o\Y%)9UNLN.-VEeFt,E:;,l@
%Mb[FI4m5>`9?Kktl/uU)kn7QC3(ABG:T78E3^qFFMS?K%1ju4%d$``c/#nV,CCS>JkP_5P[HNiDV_%[kQUO8i0cj7_l56-@Mba!p
%>Ji2l@sLe>HI41":0I4kh53AuFaWN+Q$$lq=1595<K&A4Kg#Ei`+-"`hk",6AV4].nh+KU%AsfTs!h<"G0eHRb+T)JKT3;r`UpfS
%=ND#7j;:dPD&f"Z&G+%K*R^i#f<OQ;'7e5DG6F.0!JJPYWXI#[)B7dZ*]!H[.e%W&po8?a+TSbN.bA>RYb*#YbHLo=^`YencRoW\
%=RDHZ\Bg[LWE2k\e_6u5D"*JGDOesMHWit&FBd1uoO=rfLln"mjbR<22>:f7aHD;h!n,X3)*]_rP+bI90(b?5;#ln6nVpj@E_(;q
%,6pSG1=+CiXqsFZJI,Hpb792p<<sTRM(OK78/'IB_%JXZ::uG5In5#s&;P?R49lOqh(Fu6Q6HO/W=;8%;*CEtBG@c`*MBEAmHG]-
%URGY;0$Tf90iM_"1fYKjpAf=F;#>QA^cnPs]afC464rHbMgL=U:a[#/+?q7!:@7"6ioI6XB&9\3dMB(p16VZJiBUIR"Hk`]\>KYj
%W[)%BC-U%tHT>kMPkDC<M\IXke:P=eA;,./P7itgf3fD#/3Af8]Yn8Epm?kEQSs[7LQ,5cR\!O?!V+8?!(\a!$ka%kRI/pt'JDtW
%iA/lRVY"+RlfMU6Nsf'OO\f'Y,[S$8)?,D9$go?TpjY2C#gVH0Wgm7HO]XMhA2$I2S.8"Jp2Ec=jQEUDg`UYE:!bGb"n_:LSb45.
%?nV7hG!cj'pPLOQIKad`p<1BLV7+VPdBthtZaL:pa#`NfH5OKIObG"o]U1u%bUgU7gs(Mr&GpR\g1A!3oRo53qDM97#HGRHQG#55
%[lKT!>U:D`*h"D+6.tNo;i_.DA=pa-]mB5.%'pVQVIS"JUs\o7`+_@p3=aie4DC-Q#MM.e)6KFo7F!B,LFAa#$cg_<H!*dpAWK)T
%)C2>gJP.MF'eeR)qi\/mQ;'81mVd?],44^;hYFMWrs_)XMBdt24BXj\g9)_hAjY&pQIc./r=VnM5c8gn,k.)9V2?i^;H:#Yc,_/'
%;UfpR)Fbnr'W:5V8W[1%-d;f^Qi9u8OL`;EPqu(rML7r98G,)TMEj=U2p7KrGi<(RpN6Y%!Sm2Hd/"-uINs\Qmfg<7+uQN69[_2f
%&[b::oQ3g5(\O"J/l%1TrTSN]Unr^c!HEVch%=oMI>G[<nj*o;BT@nmK7&X%>kB1+ZTH^&+-\#rFX1QCFE$Er_\,0HI,2%UC2d#H
%Y('\<6.$VC.<`#$3XE:YT8Vb?c*ZTP`Zl-C@=._'?RCq)6q&R[>O]MB?BOr*"f])W.7Y,+10U)KZq3U:rH<8kNhH#g/U!:Y:EU55
%#T.3l$%YWEGVdX%>,e70q<,DqmYs'EM3Y#ri<goEe`ciH$qOj42VGHt^f_soS7;l(D$rlK8>_;)&@>?Z0Wq<>A0<E#PLpbn(s-/Z
%1ZG1XLI'-]m9`-n(??h'>paUq#[-ekG0JYV7`rY95\_ZSj)YP_9?5>9;&.ZZ-Rt0>HVGnJ5e-`H.N<%d/iA+d1rY:Z67g58,bWmq
%e,Em=2(o"!V8j$1F=FBq"&!J_cf$+"H`Ym3BX4?V01WsoN84_3/]"Jjo?*3h_:BA6_F4!H15IYGpfQ6',LsI2p>n\'ok4@oUhHL)
%9e\_g4>[VKd84RPjdiEK%iopuH96tUL_74.EsE#NI%o0V-bs#4iBeRL4hXrkL1;_$,JL&+Mp]NbN\YU]no4o^6&P[.gQp)V1Gs@:
%ji/bbJm;_0+"^$:,VG]@/q91\)eb8fJ2lg+B^-pil$[uK4m9]8eIGoOBj*bBHNt"&HCG,,%()quA75(u7B@&$N]aF[guZlmP=$+X
%fc9h%-RM`li%M-X7M[X\ll!0qD]>lG>0%2&ruZGm8[P]maejKHO\#&%`;/=."^[UT4QfD/?d[RZ]SDQ:/A_k1ni.BV\9hZhe>a'o
%^dlj]#@:R-f5BhSZg1fDeHeSDB3[mIDLt#%0\75)KP,!poH+CG!MGUeS"Z+O;Vlt+^=WaO'jpnF4%KdWRL/W+:s=MDP'Upog9=X>
%gK[6FE-=i<Z\+C?Y(e=A#(oO^Du,'H%NcK@8eu3r"-ZtD&Q5lpe!A?KQWN75pPH,Zn/@p]XQ9FMUFLog(16/W2ScG&q9H!Rk)af9
%[+LLBhOLu`*F)(P<F(ZjNu]Thp7Wk2#Yjm6)__l+8aT0lW9jaZ>@N-Jb6AR8Ml\1_Y@o5/7AQZ7o_)gX-qHu48*NlJ5e^+MRK0P(
%,(#[Q2m^uHP,k:uO9;&K3UaGtM&P4J\-%T+i@.#Njm/\[&WS%Hmob`$65>5C],)t/j"kFoj&E+T.Z8sT/-BLQ&^not<>gY3ZYcrl
%-oa;cT?YYs<EE[pZ',<0Ja[uCBmfKNDt"FA)/MblHf2StpkB(#>OmNdogE,3kDl'uG^tA?F5s$T<ja(*,).d:@VCFHRPb]868e.Q
%i0AM_hCJP<FBklW)IB%VdbQ[Z(pWD)*u?Ut;a=En*;`0QU[%'i(*d1^FPrE%V97o$IPaTteP)Vpp1jD]5Z/i_PGuVJ,a5RZF[Scs
%S^PjN@&0g'iQ8<DLCq,QafY(jcGU?pmu^rbBNO_Ucs`.N2\^U.jQ;0iQ!cgD.(L%.<>4U+9#1gOPt#Si$Ac2mD2TEsG7Er,IV-SE
%2=1Y$\Juc\=?TDI)3Ffl"Z&o<U]lCDBsSc#j<(_96tdQWq.qbJW+mrGhP(]`YWb!HM+:Pq/.BQoR5-i^5+<eFWij>iA#H)5CH)Vt
%?Tk!^pp;"BBn&s0>2V=jNuK?nnD`p32MlRKH2+/jL`+4&HPj>:'J`)f5qW!=Z%LobQmgm9j%"L4&+BOKs%2L'`<6+AYKs]T:VY_t
%^R_i\^,=<9aY%mYBsgR)JaBODC:jkEK'*h1Vr0Q=c^,IXWF_0,$*$*/fHS6>^H(4X*[X0A/V1QMH,E]&^WZ!YW$Z`'\3am`n_n7<
%S4#qMq]L+:**s>_irSh#=ROiSZ]U9'+-,Xad-o0*=]5IT61Q-UjJ66cG5;Y,1AcFs6ZA@jcD>/"Q'S<*Pb*ZY'/sP&(3NC:GtQD,
%0tBE4(]1/)DeAPOe+WDQ3fQN+oj8O5ir@pi`t/-\[g@\uaJ,U4oM9u5&#/ikrqqO9rh3-IgISl-RPC+,iZ7?C2bA(J]2RKJ0(+ZE
%OHhcgK1ZmVmQZHU0je;!XipI?9q?mt'J-.iq.8CG]'3EoFo&(b[>,)gW3h3Y:X:c4(p>u&dP_PN0;*A?X.ir1Va4'm&b:!6dG_W"
%'i&/1#Tfo-$nRfO'L_<D`(;blWe"iAGe6s,3M``q:ST,+`>E8FVZ;u#SPj9I>jJpAhlEc&+@Ru[i;`e-%d.X&qCCi5pg3fY7!aq]
%5Q1"))ZB<?8#`j4?q+rt_cuDuhh;g(GKqXGLbc*SS*U8VK)&f!i]J=iG-Qa.Pj=N+"c5Fs6sqP`i&M-kq=,?.Y[lD)NN*2W/b])o
%![99'*Yi<foJ]1AA6Mq8"\6VQB;>'nWiIl2`K!G&ZLFDAU8!]H$(2AHU_=JkPZ#7Q988gIM8>?9Jf&Nn2Sg@ZDbCAG%#"R3]R'u+
%7KX&!)ltV+_>?*a\PsD^.Ho_FiF&L^<D>kcj;2k@4k"uiNiJ2g_P_3R<!;3*FDQ=_3j2OhO7=9W4J\'mn"e?,^O)>?<:j$K;266i
%e1](0^:7h$93"QPe*u"C6S[c&SOOXkaWoq2+Q&8m.6i*=geP(2(_Beb6Y<935bnp*gJZdZZr)Xk!Q(K?A/TO/+EgDa8O_"ckh>f*
%]0@e!O7=9O4<fkQmjA\^I[EYOlQ.;b[JC`6IVFOq&K(^[79P`qCh#-9#s&kn[@g\JHe`WWa$AZVUlg="l_nf03/-!?$<n*Tcl+"'
%%8J1W\d<)WCdP$B/;+@HZ*Z-X@E?ic2AKZt)XX#GEr`nNlXAYfP_VZ4nGQlARIrP5W:5G8U/!pDXIG//PF6S0D)$bSI$j]:%HL5$
%SptQ]'pD`P"W4B$YC)7GjukarFk#3QpPsB6>%ptF\:JN4IQfA>lV#ICb.bg^-5s*pU'*-K"^WV=2VMBI*;8?sGZo%d\B;hqGYs>1
%.cS3CcT7BZ%FrFH$Tf%5KPfV9Q>+YXG-Ye.VYT)0ZIL1WZm$YqB$W)"h7ZLK*JDdufl7Tb:Vc,jUD0[um`@tke7SAXf]jNkWaR1i
%]2\P7[]Gu=''>G.J)1VD9#H<4!CSR;e]j4"'*AKpRh0sG2r["3)duA@K,Pr.#0/p=.gf3f-DI5*92diB@).&'M\_um%['0/JFON&
%Fo\rnS4%E+5B>8fZ)8E]3Y#cd2,1AL9Z%!W+cLXYJI[^*?,NhDA_aBbk2A^pUuiB0kT+0WCk"ZG*[;*HA^3?Z8TlA)BB\2I(4n]Y
%MlL_EMN!Z8IDtD059rOg14]KI"/N+@H<L-tdE>tEKicJ4_e?JpSNVd^c?Y$tTcGM(KR[TiEIfIA/5"YXZ@(Bk&6iToh"g5Hc#m^O
%q2Xl(hg9E)m.h7j99.spm65-*c`egV7DUjOXq#p%i+h`=re]FSRn=HNfSs\\(JXM[<oJ68HZdlZ"bK2pin^>8R$=ZC`QMGX%Q`@I
%6JO3D__,<Y_`8-'E`uV>5$lFJeC^(>l.!`W,h^3*F:L$TZVZte\h.4Q&9fS?T0"SGdaCm\:Nk5GOkCt;qIeLdnKDm!He;^_*e*Lb
%fa`")l<d/+q/D:$e@$IalN)4FKsYi[<:K0"7aD:H!Y-@]jA9rW=omf#pF5M;%3ggkfL(aU3`[a>N\/1>J)MB",0%h2n)X6p(Mjp3
%@LAcZXiA)&Eg'T9.%4r+%gP[Y3R#[(d`JZ6e>EmliIFU6-UX<]>SkPY$O%[ti[Ii>:dDF2;'"U#B+R/S!MVBXnRo4#LJB/j9JD0!
%aTd&o45/(fpNosoLYY.W+0`&s4-]n#Wc@&5`!brf6M/bjMRXG(mT:XJj8'YtK5CF2M5>9:qjG<YGC,V8]"<-[W2WLWgse;[,,VfK
%(8s@%qr*G#b9%<)%7ct@R(A6EkV@lDRCI1/>!o3IMYgo5d#i&fD(K%h54-O#ol_@>O0"2<*7=`&TXoV@g&eU\:U2Q?<^5qG!VV78
%@ENlk&GLF\)tEVV&[QgX:cAp72<9__$+!L@H(]AdPi]eC#2MDE#AZ7/G%WD(:ELCWMgHFgHuX=*0O6H'8#5a$OI^-6LaXP!DB9!:
%Rtj:0gnQcN'q]i)C"@)An,_e>EI9ac0P]>Qok<qfoQ>7q[s:ZsnhaTqfp2%2CAARHG[47U.&g2ugS5.gWJ+%]5i+U3A0e0@Fn:.4
%gZGft4VI__Fh`8Gb"fGb:53gthP9R"<.0(/*nOr.15Q3.gKN<J*p?5ghJOAOJ(,Y2jtRH0e,ejs6$7mkWTMEo#:R56B8k*QFOY+J
%"uVmjFgmEB@7D=0@&4nKQ][d:MF/]tq%oL`m@\o&A^:a'iS)]ic#E>k3i,7H'sQF/H\ANY-MHrcUSGTf!tB[6Rf<#cmXbRbGOi_k
%/3s6f\3,Q+.kEY2MI:Y<m)I9nms_'3@06d_<afj@,CEio5;QrWf?\,%G@XZaT\_#Q:,KcdPr)Q@)f5bMP]PTZ67=oV2nkb+(q!W[
%p%:*VEuKV[J(Ae>^Nja\[<dr/keZ5>i[]Hoc#NLX0\,^AnMo@Pl\?qh.@[$C#s[J:[/GDm+goD]'l^"@npN6,((ODaFCZn<'MglN
%9s3`b`F@B&+hZYJj1]fQ?rZ$S3uq)l[#M?O(hb,tPY]kqNdGT8hVdUd,JW@T4u+S(YA1J;[M0-T/ZoqtWelZ]fiV[WN<k8`8u"/s
%T@Rc3<.mD3[;4eY1FTBkHCSof@#Xd30j-)W-XlNZpF'`akO9m>dH-/*qbF3/Rc(\T&C66B$dTXURm`fFf+0o=n;I!k5r(qXNT.*1
%W`N9%#3\&C-uIqM`GGn"8a@B-lD+p*5JHWTV'E)/dI,5a6be51]<Ni]2%;qmI-h9TJ-ZrV-`U#W*^L_SBssoFb)L;`cc14:VQ1<C
%/'B$^e&$<,P_qXq;j;ZgWp&l'FF=s3&">L>JGeI&TBh8t\Dd7Gn%.IV.HXJ3`7cdK"GOHc-tEeGC&CnOZsI\tXT87<,DlJ]9]IAo
%iT/G#f/&QG*1'S8JO]1&2/>Oo8-Hbtm4#oW.^W:;ZdJAAe^XZW6fkk)/3G-B!oH@I.ek-#;=[$4U:1YrpRNRSg$:M6oZ3u:h'I`c
%_IZYeM"2d/N!$0SR8.(m_eRN:iu56J)@bq0/dFFU@NSMO`YF;g=J55EcO.rFclbhY"47n;#]5+V3TA7?X.nu?+u].2;%XK^*?1Wq
%&SY6HA,I)iJ3uq5peG!kd7:/F;mlqqN=J0DnR"iYs,?GkLcm5k>kErL=FFFNOq`W$fTYp:TA*Ji_r8Gp-[m;qOu!YO&4(ed><[_:
%Q/(hhl6`=oEnQ;4/1Hsk=WO'I*,baM]*bg^kNLk!cjW[M],pDoYo+OFH,8qr1mS%I;PWmE`(&&p-hf:%3P>0]QT!P1P!7>;^Ve(q
%o^ZfoP]*r`@Bim4'sob4%Vms6IO0A:Ol+"i`0T-<EMQZIOPV2In,pTd1I#Vh<R=L9Dl,rlG^IetNR)5"HWA[-Hr&l(OJ3,1+&+cP
%nmbXQ%f[YWYmifdfjE[9qo1Zp.o_IET\=HZQ#DU/L="Q%=DQ6&A##CcS8`'.?m<EGmi;BiDRc*HkqKh$cee2%Fg&k/]f@^D+J]?2
%#gTGtPjn@@5m?1]U:jH@oNUXl)VhgKNK,E'd<fP#XSF90;=lS(;eI2HoXEA-`W]/U"(^_Y?3tE1j+?8APe(.HgA#[:_d3aP6c_>p
%H!=7Hhem='UfU((`Y!$VWQmc_0&LSB1r/aa5+1[;U?/QF.b&k]H3`VgF)[ncX7<piIEs'^(]8.Pb:VnP,fW"1j$XYqLI]Ja:=h_Z
%/f+h,>3"pPGcJ#?`P<BYr&7gZLhV[C4o##05_*%?/&9k!<Ik(0O%=ig2\NeB"gfl/3B@qSNBjBbXTh"IBr_1NA[FN>RUbQ(>Rfs]
%)>8l<#/,qL:qIgC,&8$>dh,?8%oDhFH1K33_ZTHdae^Rrbm'%&4$_k;6b$Hu.[)Fi.Bi4d#N)<u"&oiQgBu]PQHa'-Q?RGZWep?`
%\Y+P*T=OpLX9ti2D6'O&7G(U,4#T=PcB#!.`q]BV=Ymg;QG2oa,f7^'M?uWNT1XtAK-I=5BMX`nAF294E9d"I<*41OM;VPr_D8Vi
%o,6=rVNh88AY@m.(EFo!ZOJjXZSoa0ND$#e6-7fhn_"bpW9\c*mjWUD$+o3kOV[pG%hfb5+!iR$r@if[rKZHGo1):I_Eri"_$%!\
%B4&S(+*dr4,"Ihb#Y:b3iIL1?60"mEGD_icap"^Z"hD$ecB<U(@dVUj)n*MUXW[JamD*4cNDL@bDejc]JM#8-RQ49(.Ph"rbKa""
%NW8HpUalpEJ@3K,/NcQ2_UdlSgE]?6$,uj%\,pLl]i/C4!a%JU*-?meT/=P+Jqjl<Xr-$X]XWUBh[/H+aRU;2V4cBVo/NV*7ih+*
%6W!StIg`;>ChjgscaU/,'X;a,`JcNrlbb,#i7>=j2;s:FpH8f@'IB+\_GSEGCJS"K0b68+A=RI>%n<#?kasmM22tp2b\g)t\0akD
%aQA+j"_?TY*Wl]q.PNJ((k;Q<+<"jU-@1-/*Th^()f(p2`'Df%#@%"p*XTrOA:10NLbIsA6oTNibp+#E?V?T_RrN#u`ZJQtUQ%(R
%Fm*9X>b,i#T[-ZK.iq!O+Ki?jX%1bQNf9c?92n4fir:HH_aCChf`'VirR^-eU38d9#1ueJd>"_Bq$FdLCg*\958hmk@.bo`LfFi;
%.;LdFl)hX<J:7Y(Pc!rW+:Ui$^Fl-)-tmi\lOCFb2K<7m(u6+O/&u;pc!k:0]dAC(#%&,q+EOS;\tSd+0SPnkP$j\96"GKQc6@c"
%$rFKPb@aeZbHW;5?\['SiW6DTiDrL&!?)84MbT-X/Jc1>c@Bl78ocpeocYKE6/^&5p7E!c18Z1KNl6'EA""Kk^%@3T2HkWu[j(EI
%YeFA=OSd^7(F$Cn$<<hWq1R7sU.MU0f[pd!Ps\7Q);.!s)CucbFX(%(,#\(4#*-R.VetP2$K@M8b\0,R0SF"?L?'mk1@FJ?Hq%=k
%5:,^ZkrTB:(Vm?D<l4A_Q5,l^ho]""(%JAm2/^rk#.=<>$#6m1c+FZjS2Tt2@)85k>%H$i#=@aLhTMhC!09^R2\]2g>WUup.@7c0
%@!f_Y![):t/0b_a,s_85\OkMjge(3PN``G"EJWcdJfO>E_2P_kkq5piha80nb-?s>%LObf!]#ktV$i-"9CQ4IF.=p*ToONJ[-;@S
%?_iLcmIRe*hbXo3-JF2QhVF9;of9oWl'-Ci]R(H?[m#Ea(_Rh10L?;G)!<`jP%1T">tM>SHG<-8$f=uHPO-2bYW<P#"h-LiX?'qC
%46pK_d%!5e@DH7F70]GX"2(_gXV;*,*HH"[LiY#M$q(#&*&d=H:nh4lF8AIR@EgJA^Dp3sq:)H\(N\]-ME)OHhHIsLpJS0@$+-3M
%cr8*#PE\^\p!:s')>WXhdYmaOa9Z'$M&M[D#U]\MW^Li"^Mm6,<q+n5&WLGP1okD/T9hadJ(kYNLc%ae5/kjAph:"I<DN(*MP'VT
%5Ae:GIusu]OJ7D[,5!=)cl<3B$g=;ZHR']'i7=JEC^FNdju>Ws<dGll"InB%<^g>Eoa`oCpF#$^I:+:`/[ImJK!TZ)^$0J(`Ttno
%4t63>Mp+3f5_FkWmj7]PJnWsQ*5B/Uqkl[Wq;^p.gaDu\i-bE&aU8(<^]!7i++F3Mr?VEFaLur_j)2,G0C?XT4SpJBmgUlDMLWof
%Z'?LR*=FqWj93Y3a6?X5.*'5)oL1Q!LXrT;i7is1=ID-4Mrdlg\I1a$P_9nDq5LSC)JkKnj>ud$qU-:@\J9X'O*`LUR#`j8K@c'#
%r@CTk>:5^K?\gk147H=;Wfd-31&Nshl";-tolN(TCEjWV5TN[U`8:T4pgs2W3qVe?IAl"X-q%nld)_rF9%<Eud"sRG4@#lO>]d^k
%3;2Pl'S9\t,?6<T%']PG!f^U&WS#0tL(L-H&SB2bkQs$WEQ.)_o?tOis/?*dHT*Ulch)DDJ`@bXTT6r,^E6_f0S;!`r()Vae9gF(
%pj51Nd.o0en71/Wr??83jS-0S4lt2N]pu\,qF$2ZHtj30"Ksm++'J*rX_nEPNFs[ueMbI$(gJKJa9dki6P;mh%&i<`lK`_)(Q5\p
%/^L^mfIZojhh-/W_Y)J's6j:03UuAq"l(QbhW+1ed3Ie<1Us3Dn;dpm,q9V_Pp;jYh:<UN;Voh8-S+,bl\`KE3D$0m#pSMC/)F5_
%OPV%9)(8SI0cNB4o3-gZ(P8tP%W@gKANA'X..C=3Wsm[NDoU^I7<ZI,VY%6n^gC_P\BjBJ#IH;F^!oD9[tj0;"i#_B>lWu$#VY)]
%;fNiU/NPNY,%LNKdSMJrm=&;Q0,,Vq+Kf&'bV=7U18\NH?sLqk_%saYcOjl\B/T54j7[5reU^fq(%!$iO%,I_2-8ga4h,8h)Z35"
%0-@peXLeaG)=&=V:d6$G_N%orC27jFQ:[0L=9N1rr:)@V/2_EX2em-Onq0,W_WG&k\97RU%oJ\P=rF8;fc_(Q^Q2rN;tKZ'h\Wo&
%N)6E,ZX7dKOl;lc,?u%8$9r8"as+eAI'j8J32;GbVf9dQpd+5l!Zics?F`nQ$=\G5VcaBJ@s^)_<+<W+]N)[LSGgRNb=MTZ*Y[IH
%N)*qc#mp?:`o5O+9/0[L(+?Wl$3Cnd1B^s^;$sem!/No,9U]BR`#j9Obs0$Ga#gicV<t*BjT*VT8NS!P-i(Vcb.b_d.NoQAd5iKd
%7cckt6=%pYA:t*"$G<Z[E@o^i"ET?3C.TBW`@Xdr2+]9`fcQ;2eCif6oO;dr2PWl8jp9Eg*BMW.E&8"M%S@mQ[A>!S0uG/7adeHi
%$>un*&UaV:]R"1u#g4oY*E*<\_+e/^I0,Tg/B7$4WtG?"9hc[nrj^(KUW:O"@p$nBY=o?B4!l8cVa2;kZqMseU``BI7&gln+B+]\
%_')83Qj*U!md%nu&I0IaUpuW3I*ssiJTZ(S1K*OIV(#UsnB0VTbW=c'jfMC<18&>QR8eMhfNA#4Ghn<m/-m9k=>HF&=46*9VhG^s
%jCrC'R@fX_WAld37-DY8MH59BEm#!G0$=&(]#i'pPQO*QN$]38qVh:sRG"Q^IU&Jol@:E0;X"%sW5c^M[BuA/(iC90EbAgV=q/p6
%+:?J#Y\>@0)BB_<N@o!(qf)qYbfed)NmSTX8`5B\Qj*8eWOh8Iono[^Zqd5#@Sn8.K'#f\Lc`umnB0(&+k["AKhW!0W$N[N.b9Tf
%oYM1T"<7%B(Cj:c[9J`-V5]G9&31?<`siGIUpq>f?OsUCUEL<IaIr@2mf$YpoXi"l;f,#lVnO/\Sd4i^iNJ`a3c4-PqJ+2]-<#"L
%mmUbr:+T"XMGe+@Ke6Ws,.o137<K8gQ/Dm%RVr`P,269*d$o>mchia]ZrQ.Mel"#%0J+aCatL`^Sak+kYh$*%e[=[e*LG^?6JDXg
%Ba^11(=H?KZPq3>'HumN5fUaXnZ3_C9EM-9N<VZo#Q3^P+pqX;#e?#7$8'\WQB>DteNtEncA9eHZ8AAaePR:K'LMpN%g<b,8?m^;
%Ab^=h?G>n7F2Gm1oH_A`g,h#SKWX=26nHCj,g82NRfO[n>B1CnnGsD*S3Ce=7_0NKEMK8ukM@+IZqsTrFV1j=:c_C%cL<``_]pFH
%G%sYRI-/+$_u`ho2Zs:^?!\mg6\q8@c@o^5Z.L?!ou%DI1eK/,Uc*?$n&%.Jd3p0@VT``V.aeMP#_F[MUDDXrZ0]D"0.\@Tct)5:
%H3[e'+OHSiN'n7!!QQ7('>-lIT]3MsUMN1Vi*bjmM"K[qapj<AHeEs*.\r8G_2b%I=Le7!5eXT9>"U9SO;s>9aXs1+/MU/7%1po:
%4aSjGOu#X9R6;*q#:#s(jX3u,'W*Z<G%BjAJnp,T68p4X>KU1j%#R0-38\T"fT>b=>(o6R3i3&EgAi0Z0ju,bs,`Lm,3G3=2b7?O
%Xsq5CF<mME>*\Uq/-e*ZU)[0-A@?0ehD+jCipF_<q7-q1&=95%BJJ,c%`CX6V3/@BX@B3"q)6Hk,u,k#dE:/i72DSq`p1U9OfTP=
%NK3?')Be\0*]5)`6ZMTS6/%@*Us[)ue*h5`SAfn,e5ngE=HIil%7WE7S_.qAKObE2R1:T2lP2^=?;PNi36$'_"U*$:n[8qC?@2p'
%.tNmpB%(<,hdJ#K=TlDabhNgl>s$\r'#-VuSOKGhDEqeLk<>`+/ULWkr#e(->1_K`)\"<W*E8Biggp:[^>=c:21TY)cLk[UXW4,=
%TIXD)3[eqe-`jG'S@O"Oj^!592K59\JqS60Ef#p?itZSmB/t^0p)bZ4p0s+P3\Z>%Hn8jICeJgH@UH4iS0D3u1T<;0):"gMUehdA
%mFCuRg^34FELFu6f;":o-8BNZ53a^?Nk$BgR@0.eUgsjr\lnS*<qt"8^Dg.Khft1N-/pB5Zp#$RR%F`kAt>P;\Hq7CWe1)d8F,6D
%i?Ib8,PR?:Zp>W"8(%!=6jY<.?*"]bm5)BMAj7LA[@6pt?*Xa\2(n?D_#\-N(hCR+^db-u/OFiFm,DD7-W`)$<NQ?!P!\&d3PZI(
%`=[q8!is,([(udKC<oms?kYjNZHViP''BtsL^m8iNmBWWT)k+5oR2o+eo5<J9tO":H4hoXl.D<S:*%jWAOYf.1qMC,gl>p5%6@Jq
%&m\!c2GmGLc[O#Zq(*bT@'ruD`3s>ElDj?CbM)dCb=OndK#`J9la',?8utgcI=gp2m'LEZ$j9F`X7H##12![6,Y%u^F>28;JugKf
%<Zj5PJ]q5uI*uqT8;d!;6nK[S+t<ZPiGd18J]^K,s3NA"k=\@m;`A].TUhu\(^VW^B2[OA:bO']GZqBY/k%&!oY:N&&h[^fDK*8)
%hf/5)<a"r9D-K==D)lf79gMsrH#$\7_aPMDPs\B+GNC]H?lD>hja^:?G%;f']*@SRijD\[!jE45RQa4G]8'?RaR[C8Llr9H;PL7"
%d1YpL2(`Y.M>)g].#NTedWG41On>+%[n#mg=<\n)3W%C4fd]OJNe0nsjqgPA-\V4;W5Vcm_RbL4J.3,@;[MfW9W(ELc(0[Pq17MT
%cSru%ag\Y(MrDpuj3?W1.d:]Io,FX[EE4joCq*IVm0rVsLC;Y[iG5G!YAt9@%6fDummp#/G&jGE3EnI\GZs#u#S2d.2\u<3994^-
%i)c.LacFfR6&q4lP7?-m!,G:Q:AK@2OR.QI5b0]n[:8IUs5Ds-[\YK/JL5aL=TO3LJZuXL8nr33.P)IL%.>;Nfr(jX%5;8YZ@I,s
%*1U4H_&cKMCWXZ@%IX*p^5ZtYEY]q7@>gd(1q6KuhcKR<+0P^\2jW99Q/7VW29S!/`h!9t%KJ@VOUOW]0*r:!#=,1#HRdDc_EOMf
%#Da1U&=HBGN#9?`S:Gdc9LZO58-eir5!p1a"s$UB1<=9OK%_r8Q+Fd]903Y:-?\4)n`=HB9$=EsiP+U#Nb\l5\JB*3H/[HdYu[pe
%g*(&[f,j?i2"gj*Q-huMQ>==*eQ]16aQ2%U>-9_jk?<Yi8[)IC@AqA0C\KZrN5pU\:bGG*`Cj<U-=t>FK"0#QWS\J.NftIo"S^7U
%)L-j1\Y4aa((f%.Y"oea%n1d0[#f/RU?e'\Z%?8n+MRET/=t+U\+L9-GGC'H!O]h3"mk9<p$:6H=i/8'&`#(3Mgk,6+K!]f*BT?N
%E7u,I0tYKTDHIZ<j&PCtdmYm0bFS:[H#V3ZjGWB2\bil6EK4lQnT*i33N9ZN0B^"P[mpfijHo[j4*075UMh/^p/"`3@H&G=N?cYu
%\6e+j"?&;^+L:)7o8q=bU/tfNJaX9-7s)Ckg1TP6ao04+jl&5YL?mZ+1[2EY%+]@=k*526%Xfk\>[W5*CBrV9jt@eG.@Yeug&/fF
%qSpf;a]`M.i^/=jnM1:$7gl?Dqlg0d9?nMrEH/\bX8+A]47[-O;?]8j.*%9L<f\H2IY2Su?C)<un*l)Q(_KKf*+NrRbLIYD3q@$N
%Gm4(9qn[]F2,rl6n*0QBac'TaKs1a^_CZ:bY85]nmKm6tKS95\r,TXm06la4JRJ-Q6MJ7]k\pmp[h.-FHOK.$B(V'FZpcH3BdoS:
%4P/0\h+>doi>\eMb^Sn61ebUVpSnLi)!/Uc`EGZe)mCZ<$8-RFF-=#+oiG^.JS?>,D(C@NIcW%D+cMiu_@>e"R"@NaIRB$^#iHt<
%ZTUbR4eZt5IV-1JCYFhg^*:03=7%H^7qBSRoT`drCC:bb'Zj\7p8ILc]E%m:gp:"dq++g:D*8![ep=k-P'AQSVC!QDJlB[*Y9U_g
%n(%2LG.cG6)dOPmK.AK;%/=JEM.>!9ef#K7OZ%Z`6nU;AM;tZ:KNERjqNCt8=L"J54AAm]PsMoK^#'RO_.9f6RAr/"3&`F4jAdaQ
%HH5Zafm0^bC5d5N;r`'GNd7`?5-S9q=%&G',>@IaUne&Q!Auh5($teU9/8"Q#b"\%$,p/3l0T2hV#N8-WIX7PgaD^@kdE!'TJtGW
%>cQZ''5-Qs#?[K+)-j'B6amsQOtW#Rln>ThYb)4(O.$Kmm4E,q@B#XcPGnj(^8]`h4#2OrMu@I6I8mTrToL,DC,t[I[fK,SneMd]
%637R;/_>-<Z[)-nSb+-pr/AnOA!"78%2b0AE2gs)I]>6l1"*U[oP/b3HJY^V&+Htk=DY-*b/$g%"nnsR/bg+5SKZUDQlI)m"+F7E
%dX.]3Mc13u+*Ui2/5U>#"Cm"5RmShYF,H>\7Cr'X_uOe)7_1MT2pJ?218O0MOK%fme5Hnt,hV6?d[TR9)P<"\pPO-h'8#17.XRQC
%"ST'a(GCEWrYtoPmu97<#MT_2#k9s+f5AM,CUEn7JK:.;ob\h'U88&06]eLISdK*ED]7q,2u2fG11-#IpPO-(e&=V;J=.Dn9r1(6
%M&$Z+92XnX4[717X(u\:,c$5kQn-j=L'S3qfr>8)>O2Lu(t`G5e:a&a-.iD`d\j\NCOB^u,W4sZW07[k=<.'7P^Zk&U^D3Hka$YS
%"^jARAjCo2ELC[!k#V_@Xi8jJO=AKlOSC(aRAsZS(P6A*"+A==\&MK]4M@Wj#cFlOUQ4EI-T6XiiTK-XgoXe1,K<pqXGdkk!"c:A
%3"@H0bE(@p@\6i0:DUc^G3oAP@"rf4<bos9aFcFe?Mq\Bp/YSQn&k";ob_"br,??^b3$r&`*\!d^[$Ck`68*@$e1^)\bJVFWSION
%T"<c9>fR@q2Ld,]`toiC^]/O!T+*>k-p@)iFW`mL5:AfpoK\./qaXP+JYsJni-Qa6G9=(!f*0.,g[!=:U(V1TbBG<`iGu9\U<k)6
%n*'d#.SioerS1@q_.2=o:JGs+_=[iAr=DHWit2QFOaXlM1p%ln[@$#2NjN2U84PZ^eIPVE'n/tNWCVRD^bMe,5:k`+-0!=Ufq.Ol
%r+;D_QZ$"3KKOitbBT8=I;do)'CZ#g/Smth_"SH69fB+\MRN\H/edET.WEl:G^t2r(u4$<eqabuF"E:.KM:%F;_Do2h.O&@^8U>T
%LMd>Z&Z@5n^-F3@Lj#IrX0:H:"[o/V<1\EtE3([.:TPR5KU80O<Pa.:P7]6'$.8(QU<Medd$Hu.Idn=;R'6\b_h-`*C!cYcV@E#>
%'.6E:e^Q2?*Ku8DGqaZ@@m2StDe%buM=ipI/',TP/L/-d"qT8$s7HuuPd%CSaJ#iMmm0D:5E9YZ>(u\n>XajCb>oOcPIE#DXh2C-
%#?']`B1q[48;!6:7g!GaCCAR.BbN1R+rmo=/C=IMV/%90M@5eVm01$MqV`)DS$n+p./4ulQ&Yn+#ER8X9H-&.N\M`ZF6NUhSo+A$
%[LI5?31@]"KO$@MeY&oO0+:*.S5imk@-5UPpNAp&Knq6dCcS2HpN1RIi\Ep3I!"iAd(I;=W3HSCfE.Pn_-n!PX)gYlaK+M3St3IU
%B8?qICW0FV7*m]uCD!/MZ.b3]7S$WB+,ILa%(-Ku4@f)NRZr=Q4ti`u/LjlnNi'1CQ/F4X4Yc;(mIYY51@HR;MdsGgCW&hacLQTR
%-JKq.\P&ul*7u38pf+j_fibpN=hYDC(IfKSKSqFt[)GcWELq3s/Sr[.1jIZ$%uL_Q"/:qJ#^(.nBaN(a@h(kNG$F\h*E*ttX,T'0
%_%),DkIfal7:(](KXp5Xb(-fJjjU%pA`qaOcLJ70\h99llLL@-cm:TL[?ieT9?8VOCt^-?EbZTb.f%`0Ge84@_0Os1'\r7(YjjD3
%*FXfS]gabBT']83,fDl\5"2N/.Iu2,05il21Rb[UX0"sUKe3N8Oi?WVX7Gb9NS,rWNq>p'Ia,(9GXbF)&\]:ikkV;,n?X+@5^3/#
%T>c'9CH!&/A[`IQVQVlp^^k<;Z@>*Gan2<gCbsMuLGg%o_*_Fd'RaMuOn6mdgPq`%*nkR0oYE+L%SVq"3`>O2D$M@/gj#XY,?p4n
%Ht;j5,^O"uOeNA'5Vf5JD*c$l%rFYMq2]>Z;Y$N@kbm=CrMrkjq"<C(FQR=*ZLE9H;P/q=2Pn,I+5)rj+s5L*3_B@j*c:J2,2lrP
%iVa8\5LZh9LTpgXjL1udjlug?5I[OTr/1LE^N=h6a8odZaO8>X@+N63T.1Ujl/k5poft<k;m7ILC7rq*r<uIA*'oqO;J(ik"O4iC
%>X1?IEb$k[O=9Xs!g]Qp&.a7/rraj@"5kI"l)U3b(,I+&ie$PffZe@p:pEM)f8U<acE[%)OZ)-I:E2-rRq,8u*X)4*:n3S0CfY<b
%],8cK/<7T&TIKi1kEp30[f^9'i>_5?Qs=iIdJ7[C9`,@5`+Tk4YHo3j)+p;iGZcV5;)Z4G:nKuS#CRpE2mLiSHnKAo_'\]A!@C3-
%!nb.%e%N]'isqcnEa98!>LOU%JCu5_YegP`898)]_76cgjAdIRim<MTZcZ\k:fUn5<s5\gr5BP9DPM(]X[Hlce.:4V3,ohVKgN^;
%+G"Ga'i>?JN[QeM,MatshoFB_UcLj>:E;?u","<44&A9)$4#\>M8f&*q;llWP1SUo*mUGfDA&Tf6k1t@?&:;;8FD&-(GN4)%p^#k
%[Bshibjik;U'&nco.rt(J[a`Y/mJ_g^*:L4=eg<ZM,Oi;jrEHgej"6G$?86&`rlJGA;PGOa;o9"`rW2rYcL*^I,^@O/)m"LLj?>(
%J_1/Y=F*!Lkn,XCKb;aDjV*Ybh"a#i%TUR7LOV'0Kd\Tl')Mk*BeM4+GpJ+T?[C]0RBXPH+&J>ZM-s+T#`RJNIN]haq$*r/@<;l/
%@N[L9rH*r"R1i'l#)Ms)kLm]LdBg/9cG7p>&6G]1`j#r&jFHoZdT;p&K<]RGPF#q>COif9*XNj>)U(eS6@Ip.JdaR5P&s':^*)ME
%_,bnsRTCop1mT>JD7L[?3rt/)U]<:_kiNnFL5,qb?nY(=EW<T)eigPg!pB3-$og<.Ek**P\/eTt`]aB$m1,"q[.F3`K4-g&J0Yd\
%En4Q:CJ<)?\O"0P8J8n%V)n@BLt\#:>umCu.N9O"@ukE8$$kcs-FMAT:5h<+**3WF$tp=EpA$THVrc-d8R*iEF?'C#9BQ^YQJkt%
%($Pi9D1'TZZm7MJATdU]5pVT9dhPOK43\ZhXTQmTC`IQ;_+5Jfo)hB*TlbJe"bHI0-28h[.BZ3opj/'S*CShu::CO].qu,QqQ[0L
%(1=`$OVd7dfY!^3`I\A?'UY>FYT>(EKqj:o'+$2-K9gc^[GM-^&:#2&`!0O#j,/st1`3I4pD$AB#\on=+tb+MHo,,kK`ee)UO**J
%6^,%dld4bsXWT"/S$X@bb/p0"d[W.V&AOA?3LBna>Nh2t+ag8(&r&Q`;o"BO62G\Cf*9kTp9Fd3r[Z2!Ou#4@`Et8WK-fB<(1Fnl
%Ff"=KB1"18\2\[*;33daF=pK'8EWCZe8&beRZiPj#"5-GP-q_.H>p.=f"'FCAnW5T2\^P"^3)'ri5L;THA,)OQcE>>@E5I&Y^OC-
%IWFr]1O)iO6I(cR%mY%M2KjfqXUmWW_eMsO@Ri/oDF]91r5&P.J\!;&.$Z.-M9.k<^eXUH%[>WaooC!'Rf."CUD*52Nt?]W-%I)u
%'.J7H.1:MFY=Kb=\Ac=/nd?0qiY[9.G\2LSf79S+nr93!F[V;]%M_.dSfN1hru@rup_q0aBLJRATc)aA'Tk$Bm@;\%Y%4B3-?1GB
%&tU+ceOpn9/^UI,aMt]'%Tgb@1loMO.0R>$;=oft=0X=>6cYfZ3`2]%:eJS^U7WPDDg.gnm#>3plApjF"p-!BYurM*Z9_.)4n!DE
%Kcmoh9gQ_:,qA)!!_;DE>cOd3M3*0lR7gi=`'nP66&.#6-50(<brldpT<h<[Ge_LYp1F"iLGOcUFZl'V%q\bu8*1I2+.H+5N(<"E
%jW9oA50Ei:$@F_;7s)Fl`cUJ%WP(&mlM(0)#3=XqBS&@D&6Z)<k'T60/paatod2&%JAj'j/.^6m)#LiGj@=TtNrmJ7K.es,i;&XZ
%#OXrg/?H8%\UtGSG=9u+]?9T>b0L)LH[%&=q*k&G.R.IIX#uYONt'[O)]ie;^?>:t6ok7H`#s+Bn[cfjh4.08a3"%OO,76DL`&jN
%E+(lB?Eci7O*TAp<MF<YOZ,F/e)JhhoD<1mNJoWq2`XPMEn[pmT5Wpd'7<4(qVGQpY[Q*eYuCYi?PZ1ho/B%'S1b95bJI?UG[/@U
%RhFpWX'\.;JW=9k)b?X`1#uLas7l)'cDruI-h;;+R.j++H2g#Jk-#7YQZ6DnDf]=cFMbXss/aW3hYquX,O$[.HR0mk&atuQ],lT/
%_92m@BVIr3`:qaha9Dc]JjAUU2irVV"n]\TUjgEic,>]6=Ak;6R.CSA0P\q\V%K#AF@$R=L-+#(=d(n&g7f7/I[3DR"_]j$IZ"o^
%j#41!gWP35Qq$IQgnPO?oU\AK>Y$b,6Z<OW*c?S,F?jG>mrr0Uj-#fK+=/1:_W^MXjt$qbb_!fe8u))GajCDV$Q`GX[bWKZ:.f>[
%o!LGpcq!aEd7G1BR=pF]OL4R5lHobs#C(M[Eik%)'/Tj49*.HMhZ1K=Y3eJY-XN"CgOY1J&sl?;."#`P*!;U-1GCUB(@/?Vg*_<V
%'6\,PeBffd</+)"GX.ih[u/3i]Da@U;_p*`2&"F^NS;FW[1@Fq3'STR@TeR_d*)Ppn9MK.OS=P%=t*!:5BCutP0OqbM$?dJ9"35=
%cnXU0j^Z>B!?5A%iX._WE$oAg&a;lYpQ7J33C&FE!ourm&.]4?D#54`%12-+[\\!?Dqi^[KX<D9-p,iQliV:ViL)m>BL^u%1<FP9
%']O6F]<^^F6]R[f.dg06>qRs'V0J,dfC.+oJP7.53X1dU@HWq"-\q:nfF\O[SJ0`h=Ge7T>)W)YNs*e#bo9+s'@Pa17Y@0"%9-J>
%!=.X-\(p,*/@aP#?Y1LL7J])."FcReW,2ghVBCsO]T".Wg`\M?-JO9,]^FjXAH>B_#u@o,bV*\HCdO#lfSs+O^7/2QI33$?O2F!2
%8,X4^DY0K(5je&P#KjPGrF>1pIph>KVeIipm#Wa+&m/+Bi!gPnL'V4aL8GVr]W8%f5U/U-nO%72?e[n@FNJZ7WpS`m<^Z$>.hE<K
%&uM`&gRlKT0(b$Q\7fk+]W<<?R!JRsp1.2]OP]!?;2>$6A=rKE\'f.tP9mj(BBYl0XBK.RlMrNG>#;_Ce3>p1FMi."kS@Ug<kO0-
%,d:,])7.tcFjt>l_6!gHghK+mf;O1XI<<AIX4>8qB3P8NJh)O&jVnh\/aS@"S8ck^Fh.TWPu%Y[U7mN,&&FNd-Z40R[Uj].J<ks<
%W/QKWVJMb[R$19,!?Mp_&*#.m=\^%Z))Y.,YjbYBq`'Nq0fU"aO.8"I#)"nZ?tS+:K7aDB3S8r#@AEh<KgW+#$nN<a?Ps^FLY+e>
%1B.PcTP>:!5m@E%cn_g/qngkZkMk$0=9c3[lekdDKirAgmj*74D;E(DY":n*<K.rjd@2Ls=EW2?#d4(eEPoPt>/S)W[/<!OjZ;1U
%j+^u_-EIX1b.U>,S3cZ?OnN9c1_@R==5E8]+MELcA#dNm%(r5b<E;KF5ess+6&MbH-X#Y%p(l2X3m'MoDGMri;]N7NS-sKs@1hqM
%Wt\R@LhhNRK.[Wo^L]P4:DL0&4D6.:p:EuL?bPZr>+1EQIC<u0aE2#[\^N6:9Zq[?`bjo`b'Djk"a6,qD&,WU./"fFe&6iW='h]$
%TV=V>Xfm?_iu1c3iLUY];!5Na@,aT*"-@)!"bi*:%ReQ8!nb\+&."J&&13;Q(XGa30^Ui\D)Ipp+Y]pb88iL5'rGnjZTA6U8t4aP
%V':+L1-M$eL$::S6K9iEI&>ZdW+mMgXj,\ToPNfT#FOoH^pFE\r+3O=NG_GGbk)\6)l./7T+.'/<&G9:gSt!P]lBPs/6LkE@s7#a
%-O.=[UpK1+To]lNoBUm'qlQKoDB6J=G0@C0`+,cO63Oi'i8$Ef]eYsJLnp@K5qaCU?9(EeKJ5rbX0?)Z?:#(%kTrWc<uc5e1&=_j
%,t+=`-?Jo2o4"QR?PL2$dHW*Ba0j11ijcG%Qjd][Y/@uJQp"]kA7$#QC$=Re',?%ZY%!Wu!n`VE'u5o=D"^EP+c;6pj_3CrkGQj7
%6q9>D3Eh>`[;",3]C%KO&?"5=3ub*O1rlC\kI@pGM^X)A.5q#$b*i4N:up4mMlYuYfdH$?PmKW^AtY3i1J1t0oRbr=dS%%s;ZhK-
%Xek*MZ$5CpXPN82[_65WTL&<8cgT5-\DGN`jEm<"7lXjJmWj;;hSK06N(s9fplQ;15f(XAaStMEO*1gAo]r]@m,coCW#4NDZs[aF
%FF:<#o;^q@eR,&N3DS+p3;;C6W]$ZF8P\>UWZ$]%paYi25V!DL3dg2.7"-YT/=drs<n!*P$JJbg.IUC956SCh!]Gho6kk&(GGV"K
%)-b*Ds3,KnVVAUmQlg$,7R^D7ICWQ!RRMKZNtsW0C#M/:'$KLTfp$W.24mBEs5\2;df3^T/\F^-UZo4kR;`Pk2<ANM_+DC_p%SAG
%?ft%"7M(Zt^0f?*/K<&T8GU'!Eee.11'mWha4VD>8an3FHEQm\d<l(3nIHBTXUldg%Gp_ffA0NQ3!%&IQ?99SN`Di=XP`7@a0h&'
%k6D^8j21JJ"Qr;/H;8q;0oWH)._X/g[s`ls)"5-D3<UlebhSXNPXtt4?uP#0KLU:"*;4!0<Oqa)7:S265tCLo0%'i@(B;\)nSkI(
%D^@^K]=5fW,]ujt]E]k^Fk1eESEBG?\&RHdg<+V)Gc7f52sX[9#M4BVA:9e$U[S:@Mgjj+a&Cm=Xh5/$\+"CPORTfGEqU22^UWe/
%)_qTr)E#nJ)L-"MZkH[b]^3EcVmqph2aAsD$EmBQS\j\,?FMeil6I#',(LA4&(d9R^K>$k0fY)`!pC=`VZ8a]cmJrm6L;k)'0mRC
%"].V6*P[dqLYs_4$D8JH!1e=(VZ;$E!S$"8<WU^db78X9mB2=aJQhsc5X2g[3]3R/!56&G\dko%X=r47ql;:?i&]552N:EP1(B$E
%L,$h<BZ=j?G[PDA*h$j*A!,`V3O!4]2mG,d*Ru=?]0hT2(n81k=n<11=)[b!m9Zq]I9!]OM+fG-M+oKXMfg]);7d>8MIP-`O$<$h
%-IX<f@bn6+X5Af'(J1ICi94a?#%N:;&<l*,ULcGT%/\Ofr>%,ZUE,9DF*(gGfjN=4G"&_N`[YnMf3%.Z;/+]DEin4Caru,#>opGs
%4(;fRO4Y?>6O\s+f.=V.G;8d=mDV?O6,o4RHe.&IpFu@)Xmut3IYZdtpWJLIeiF?4^6IDorsl_ts2UY3.mW#_f"_:q0:sHdqqC-T
%;FP+$;Ic%P5\luM^gV[,2Drrb'.mS@RbucZ+Z$)7rK#:;3X07t"#7ef'=9ObWl#W_Q\Xpg5/l&)Dh*!YTt84Blk$Pa*oO9(i\1Mg
%(gkNr)oFc`.M8jDrG6Rde9'6u`sqX#-ITc3jk6DmM1tT[FNRLrRa@h4Ir[]2%H(Ws/\DGCU\V@f8tH:N*$l\sorkUDCIGgpEtton
%*Ys7JR3SW?Zm#8S%[E`5c[WnGg4qLE0Mo)#)]!dV:`XU8G&k;Y$Ag??BEh=t4'i*u>2q_ir?,_I0rW&-E41?8M5f4#loY.9eM_cA
%D_H9bdn7s(!/*LB]9SsXh"9fiQ(CF!Q/2MC6/H;5&:ACH4o"#_p+eBm136KTOj!r`7Ed<1!1cS7k9\/oa`1X-]T\K%'K!g#B$)N3
%,\+Z!%qCM>Ju=aT.D/F7FUG=A:IIQP=<j65\f)f]#o\/X=o8gnNFYcbF:+[>!.Bt01.F#teefX"#o\/X=o8gnNF`$3"OLj.EseRa
%'gTc0B$)$%,\+Z!%qCM>Ju=aThhhCp25!kJrFeYUS7^9jojR)c&UJU:\I(?a,eX&";9p.SI_<62ACs-UCg+qSXNY)>,C"XG#T0*d
%Ahp^)jrG-2=uBuB%o(q<YeJ[QO_Ha0Z"Z.+YoYZMe?7iGU=g.q\S2?.BdR>p*X'#g0OfIuQV*5<^rr+$Y^7!8#_HmPI<`k*>-'`9
%5tpYBN^XoaIUFD!Cp/7Lo8cW`1RZp%@jX!%V.Ji2[=4$m$j8Y\>oknf3FZX6Orc;6i5\q<-*N__618=LV;oaOm=VJl-25Ws6gnIP
%cPt"HnGNj1L\&QVXh6<.p'CCcaZ][md!Jg/R'UoE#lMan32#6l;hTX-6Q$eq"DbB!1'=lf,6JqJ&2@sR82Zf#k&(JNBaeS4VXZ#+
%1LsB9822pF1_d3L1'=m]nZ'JC@jlu"fYut&:hG69a^si?`"0]'5Y/_"keKbg]F@dra)*A=OB#+dTT@F+-aTh$LEF!i3LWMIYGNG'
%c6eE431mM-Y@dF*l^qDn@h1PdC^]]*&J$5D_E1,Z#:CPZ5</%kS'&N1U3R"Y=O"A8?k\)UP^rcsEA$RK4DF'Q0S>5'g?>[/8V!Li
%MoJ"n+P$s5JC`]`iFGls"^3^L!KL3:HE#Q,<EK.tH7PAR@1^\"n/RU.g;FQb3!"li`6^bRfqPa.Z,j/+)5&j:)%@R;mqi_j*")q)
%7Fiet:6Df<RG]cLR=u0EdjF4idl?eQc9%#0ZAG!$`n84').dVn/3(j\D"0m^[#$esf."@-iH=`\BF"u]'/T;`@hUXaA,\6A++gCb
%bUJ';!H\[A0+pOi->(C=@hUXaA,\6A++gCbbhnE\3c/>$!VEMraOnF)=^u8W/3(j\D"0m^[#+T_&O<5uF:+[J_Brk5`,*bBCY?%(
%YcCcA_Hh!nrkM`Y.H2Atj]FFr5:+S9Olfk=.S,Te3WC(3bl29A[tU5TgRr8X;)`1>[,>*YH>c7$Jk%)pbQ`A*M:iPH.a$0oCKBt&
%S-5^$,hGKoPY@82M+5a%*_4NITK1=#10Xqb]niMZ-;ldtG$uY%\#:D%fsO`@7LjWZg-DNr#1^Q"9ln@9+`Fc$]X.grS>N'j"PYiZ
%>Hau@<AWM+-4H&,(3K`)YmjMi@_n/D&6V\GF@QP_id1lPUbhV44kbr*lBA"N1<2B!K4r)s.G;,GadKie.oq'QcecNH77PL(5<hcB
%\`RL#0W4&-9ZRCKLIO&GJP(!SgBX*mE^jfR-ZG#-J`@_WSB4$M4E5s8EF'<8C0=5ALo1"Le=$/1Z-hCN%[:B6dM&=7_$g9R"*&aA
%eZqcAg5nhFgX9sYR9I"X"e$lG-Q4i9WuDpc^#l$sRRu)VoWi(CqO(\+$<,8GX//B[34r[h2@O+WZ_5`^JpQ_;0fC86$tZTPl>k'-
%U"qIr30LK][VKg#Vj(KWHf_>2"C+T'i/c&bP^Zlk,+ur<]Tj15f+Jnpj"_FI+-sK/kB/%oJNkW08Llre]`pCCf:mK2?V=oSCr&gN
%1)TLj;Kui`&N@0X<&kZ=dbpl%)Pms4oE*ntUjH"b]pK$%OJ)"MZ5;%Qpc`+<q=Cc-2;lLY2O;D$+rbR\88*p/GZ8L;CjK'"+*-/u
%;iGH#N!=Z&`;eV0O'nMFdl8pR+tY`^'Gs7#`"0;M+R+#>'>+<u1b/b=AYZZKOkgXZcrH"N+9QW:$OSBIL_3h\=fNDhc"*q5nC`C\
%2Y$"'Ak*P$I4[VZeB.nk?%X!WI-\#g+h8@,c!ZjCY[DNO?-U<-]Qq"VFP)3;Y<>t.]np&2']Ic'k<"ag4j<),US`c:4Xi7b*K#O<
%-"PK,Lm37O\P>4.8NLcY1<PZ/cabe5O+C>DZdae^HBs/ZXFYI#:u=N\[Oqs?-Zukj'7\7`U=dV&:X,S<C^F5_EO,2XiuCQRX!7q%
%6XFPM\1:AC^q'pGUpFLek@e,EPSkq9Gs4=b!?ffkQ8h1q%cj+C7@:<P//1X2d\ORNW1qs0Vi=1G@0&=>%hhTs(/dMq4C\38&Og#C
%QPKDuOHstmjV3ZFUb@Mlld\e(GCo/Gf]_aY"mj-q[HlJKkp@8ms5f5YlCS"(5Q0h2rlZBjs7GJ=r:(<r?K,fSmLF!W0JFY5kmK-7
%rom4.rqQ@$pYFj5Uim2k?06-h>F5*)2gY5[0t_-=g8RUu":ON'DY/NkZ[MF\]moruJ,.QKTDrCcqk(XT]=6_lBL2@uKc_ddG;d?c
%LD'$IbW!)g1T/5[0hjel'%DFR(=ag\+KQCS5&kF$DZhuVLI=$-*XM-:^/&Qh`UE\P?TI6=.@3i@r8#HUiG6lkf7]qnb_8uiB27iS
%B9]N;0\0J1SUoJ9"St*,\,`u\4MK>3$Z"jdc7LcTHVo,BE>(JTVmI9g#.;!$3`#W05of?nPEK.Nf`2b<(`]U7MQrqI<2<'X"%'sE
%;em^*i%\oPYJ@4+W.M**DpKIWLB@ZWF-"#[eJj1Rn1)B[d[kni^cn>m]+4Y*>-Hi^,C./,>Pb)Li/\.`-NptMLu2(jQP8A02Xq]'
%m7*!FkPh)/r,4oVhnb4hj*B$j:;/cHG*e=8_eKiD98M$Y2`F#F=X&ONk8[`4&JBOa0$"`;+XrbS$Q*q7:UC%Z4(fY-AiCEL)7"Qt
%(Vr]n'8(D_r)RFs$c8HZ&[<m[G5&9EGuUPb*VeiN!\[&#]6m4us2I4"ZB^`jWVd7rR8i&6?Lf$_SsqW;2_:LrUjctIS!<E(itoi+
%48Q.tMtk]q>H6O/`P8epk8Ct@7,C4eRk+!320Ok;8gJk,Fn'`uZitiA#ETk(75#&&D\;cP_3$3^03oFeG\Qa>5`d`c6'*4GqQrNb
%8U*:0qaGFem3U+f(MQ_gG&kE3O/SMBNWO[BX*fOT?c`.i#n,:GlL)g4<"65Y6sSQ!'i07TVkKF>/a2L8p[k-C,GH7Rn8=sAp(Qr5
%4hXG9qjr//6d,g]0JbL]icBV91D;H.;So2IU+aa]a69V_7t:Ppr]0!QqBHn6hm]pVAB=,06h%QaPgb`i!Qq!gbQgoaLB<ANr((?M
%n.\Z6/[o\'c$0-gE([!+17aTm>=bWDbPk2U#gX*;*%iu0a?aGL$0&5;&VCT;&jgKRV+<$*%'WC;2U'$CI4h@>@pe+=AtVTQZYOdo
%-"r49#h38LC8@7aHpsZ9f9qp8drSDkfO!;tHE45Y8(Bn/;TO5ulbY5QF%`8KHBetUn&C-(%&:D7_7oW9Tm$Y($LG!$,\ph2)k0P@
%OLe]]HkRteOnj1#4NA?JCYGV>2A&'2<6S`.+:Q]RL3MZTeO4_AY@=ul6,_Ue[XNnG_Kkdg/fbn'mJHob2<rV:8VbZV'%^miTEY9b
%\GBT-?^Y[/K8DsjE%+<X.UQla9H6hq/)ol"X4Yjo[uLq+"Qnn26PC#lc(G8lL%tJ#&HpGV%38_fE[)+D8]ndL.ru3WM'b+ejdfoH
%k;<4_;[TbVF?BTG3D3>U/T$LqC"p97,Sl57=+p$P'$nXnG)$Mg]qfgDLc'B:)XXH+')BP6f_i(fq7%fdK.h5MFqKIfeAI5(ooIPg
%OLg^aK2k;-G"Ok43cuZ&C'S8*`#_"*>Te-%:g#tTY[lkcZ4/r?3QaL'+?%Is8RsS;&W./LJWY5?5iNuV80BAT!+m2K!0Ug7N'ua(
%jk;3+Y:'V:1a@%i]-60<',tQKKOR,5Yt%S2"rA4c]?"%[<k1JoKuQ[%MKf^oD5E)+2Z7<8J)]92Z%j6`+X<*u<tMOB4^A`rj\9AL
%dZL&1Gnl7]/3tJTUMdF[qR38[NoAMCan:#;GaQ#@c=4p6O`:+bk-MLf7+$i'ruj=O89GTcFtF)A@:;m;U`(1(cJ7elC!m[Pbeq_q
%-5T5724S*p9"hkY_^F>2n"rssE9fTQj*sHF#@^jaa[e1h%ZrguJhb(AFa8QkfeK,Jp9_B++TLT&Lg+6W=*8u.lLq'';dCF6$GYem
%i9sNAG6g#&*oRrlBu3RXWDd/RUPFEh?XLS0QEg=8/4'!=&XWNKJ:IKhddR2,^]39`qu?,GJ,[]2#l*Y6rVaM0nULH-n,I;="Maeg
%J,@FXs8'd6huESg6c/cks/!JVqR8]hnLsq4Va(4OkqE(gTDgn`'H..(qWU6EoDeTdJ,'$E=t-?I~>
%AI9_PrivateDataEnd
